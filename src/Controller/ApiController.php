<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\Auth\DefaultPasswordHasher;
use Cake\ORM\TableRegistry;
use Cake\Mailer\Email;
use Cake\Event\Event;
use Cake\Validation\Validator;
use Cake\I18n\Time;
use Cake\Datasource\ConnectionManager;
use Cake\Routing\Router;
//require_once WWW_ROOT.'excel/PHPExcel.php';
/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 */
class ApiController extends AppController
{
	
	public function initialize()
    {
        parent::initialize();
        $this->loadComponent('Contractor');
		$this->loadComponent('Upload');
		$this->loadComponent('Multiupload');
		$this->loadComponent('Paginator');
		$this->loadComponent('Push');
		$this->loadModel('WebNotification');
		$this->loadComponent('FundsUpload');
		$this->loadComponent('BetaUpload');
		$this->loadComponent('BoardUpload');
		$this->loadComponent('EarlyUpload');
		$this->loadComponent('EndorsorUpload');
		$this->loadComponent('FocusGroupUpload');
		$this->loadComponent('AudioUpload');
		$this->loadComponent('InformationUpload');
		$this->loadComponent('ProductivityUpload');
		$this->loadComponent('SoftwareUpload');
		$this->loadComponent('ServiceUpload');
		$this->loadComponent('HardwareUpload');
		$this->loadComponent('GroupUpload');
		$this->loadComponent('ConferenceUpload');
		$this->loadComponent('DemodayUpload');
		$this->loadComponent('MeetupUpload');
		$this->loadComponent('WebinarUpload');
		$this->loadComponent('CareerUpload');
		$this->loadComponent('SelfUpload');
		$this->loadComponent('LaunchUpload');
		$this->loadComponent('GroupBuyingUpload');
		$this->loadComponent('CommunalUpload');
		$this->loadComponent('ConsultingUpload');
		$this->loadComponent('Feeds');
		$this->loadComponent('FeedUpload');
	
    }
	 
	public function beforeFilter(\Cake\Event\Event $event)
	{
		$this->Auth->allow(['index','login','testmail','notSpamContent','getWpBlogList','saveDeviceToken','logout','maxLimitResetPass','register','AppcountryList','AppstateList','AppquestionList','resendEmail',
							'AppuserQuestionList','userContractorBasic','userContractorProffesional','userEntrepreneurBasic'
							,'userEntrepreneurProfessional','SQKCCPE','editContractorBasic','editEntrepreneurBasic',
							'editContractorProffesional','editEntrepreneurProffesional','userStartup','getCounrtyList',
							'profileSettings','addStartupList','userSelectedStartup','keywords','startupKeywords','addStartup','campaignsList',
							'timePeriods','commitCampaign','addCampaign','addCampaignCopy','editCampaign','singleCampaignDetail','uncommitCampaign',
							'followCampaign','campaignContributorsList','startupsList','startupOverview','startupTeam',
							'startupWorkorders','teamMemberStatus','sendMessage','entrepreneurWorkorders','workorderStatus',
							'updateStartup','updateWorkorder','allDeliverables','uploadRoadmapDocs','deliverablesDocsList',
							'recommendedContractors','searchContractors','addTeamMember','rateContractor','teamMembersRoles',
							'deleteStartup','deleteCampaign','allRatings','startupRoadmapsStaus','updateStartupRoadmap'
							,'uploadStartupProfile','Contractorexcel','Entrepreneurexcel','startupQuestions','userFollow',
							'messagesList','messageArchivedDelete','myForums','userForums','forumArchivedDelete','addForum','forumStartupsList',
							'startupForums','searchForums','forumDetail','forumcomments','messagesArchiveList','addForumComment',
							'archivedForums','reportAbuse','commentedUsers','quickBloxId','sendPush','approveCommitment',
							'UserNotifications','deleteCommitedUser','iphonePush','sendMail','sendMailForResetPassword','startupListForUser','submitApplicationQuestions','submitApplicationQuestionsIos','startupQuestionsIos','campaignKeywords','forumKeywords','searchCampaigns'
							,'startupSavedWorkorders','saveSubmitWorkorder','approveWorkorderEntrepreneur','acceptWorkorderEntrepreneur','rejectWorkorderEntrepreneur',
							'dynamicRoadmaps','notificationsCount','updateNotificationsCount','startupWorkorderRatings','entrepreneurStartupWorkorders','addConnection','acceptConnection','rejectConnection','myConnections','myMessages','searchConnections','keywordTypeList','addSuggestKeywords','suggestKeywordLists','deleteSuggestKeywords','searchCompany','viewCompany','companyKeywordList',

							'jobLists','jobIndustrieLists','jobTypeLists','hiredCompanyList','addJobs','viewJob','myJobLists','archiveJobLists','deactivatedJobLists','editJob','deleteJob','archiveJob','deactivateJob','activateJob','unfollowJob','followJob','jobFollowerLists','jobDutiesLists','jobRoleLists','jobAchievementLists','addExperiences','applyForJob','getUserExperiences','editExperiences',

							'fundsManagerLists','sponsorsList','fundIndustryLists','fundsKeywordList','fundPortfolioList','addFunds','editFunds','myFunds','fundDetails','archiveFund','deleteFund','deactivateFund','deactivateFundList','archiveFundList','activateFund','likeFund','disLikeFund','fundLikeList','fundDislikeList','followFund','unfollowFund','findFunds','fundEditPortfolioList',

							'betaTestKeywordsList','betaInterestKeywordLists','addBetaTest','betaTestTargetMarketsList','editBetaTest','betaTestDetails','myBetaTest','archiveBetaTestList','deactivateBetaTestList','activateBetaTest','deactivateBetaTest','deleteBetaTest','archiveBetaTest','findBetaTests','likeBetaTest','disLikeBetaTest','betaTestDislikeList','betaTestLikeList','followBetaTest','unfollowBetaTest',

							'boardInterestKeywordLists','boardMemberTargetMarketsList','boardOppertunityKeywordsList','addBoardMember','editBoardMember','boardMemberDetails','myBoardMember','deactivateBoardMemberList','archiveBoardMemberList','findBoardMembers','archiveBoardMember','deleteBoardMember','deactivateBoardMember','activateBoardMember','likeBoardMember','disLikeBoardMember','boardMemberLikeList','boardMemberDislikeList','followBoardMember','unfollowBoardMember',

							'earlyAdopterInterestKeywordLists','earlyAdopterKeywordsKeywordsList','earlyAdopterTargetMarketsList','addEarlyAdopter','editEarlyAdopter','earlyAdopterDetails','myEarlyAdopter','archiveEarlyAdopterList','deactivateEarlyAdopterList','findEarlyAdopters','archiveEarlyAdopter','deleteEarlyAdopter','deactivateEarlyAdopter','activateEarlyAdopter','likeEarlyAdopter','disLikeEarlyAdopter','earlyAdopterLikeList','earlyAdopterDislikeList','followEarlyAdopter','unfollowEarlyAdopter',

							'endorsorInterestKeywordLists','endorsorKeywordsList','endorsorTargetMarketsList','addEndorsor','editEndorsor','endorsorDetails','myEndorsor','archiveEndorsorList','deactivateEndorsorList','findEndorsors','archiveEndorsor','deleteEndorsor','deactivateEndorsor','activateEndorsor','likeEndorsor','disLikeEndorsor','endorsorLikeList','endorsorDislikeList','followEndorsor','unfollowEndorsor',

							'focusGroupInterestKeywordLists','focusGroupKeywordsList','focusGroupTargetMarketsList','addFocusGroup','editFocusGroup','focusGroupDetails','myFocusGroup','archiveFocusGroupList','deactivateFocusGroupList','findFocusGroups','archiveFocusGroup','deleteFocusGroup','deactivateFocusGroup','activateFocusGroup','likeFocusGroup','disLikeFocusGroup','focusGroupLikeList','focusGroupDislikeList','followFocusGroup','unfollowFocusGroup','focusCommitment','focusUncommitment','focusCommitmentList',

							'betaCommitment','betaUncommitment','betaTestCommitmentList','boardCommitment','boardUncommitment','boardCommitmentList','earlyCommitment','earlyUncommitment','earlyCommitmentList','endorsorCommitment','endorsorUncommitment','endorsorCommitmentList','registerForRole','registerRoleList','unRegisterForRole',

							'audioInterestKeywordLists','audiorKeywordsList','audioTargetMarketsList','addAudioVideo','editAudioVideo','audioDetails','myAudioVideo','archiveAudioList','deactivateAudioList','findAudioVideo','archiveAudio','deleteAudio','deactivateAudio','activateAudio','likeAudio','disLikeAudio','audioLikeList','audioDislikeList','followAudio','unfollowAudio','audioCommitment','audioUncommitment','audioCommitmentList','informationInterestKeywordLists','informationKeywordsList',

							'informationTargetMarketsList','addInformation','editInformation','informationDetails','myInformation','archiveInformationList','deactivateInformationList','findInformation','archiveInformation','deleteInformation','deactivateInformation','activateInformation','likeInformation','disLikeInformation','informationLikeList','informationDislikeList','followInformation','unfollowInformation','informationCommitment','informationUncommitment','informationCommitmentList',

							'productivityInterestKeywordLists','productivityKeywordsList','productivityTargetMarketsList','addProductivity','editProductivity','productivityDetails','myProductivity','archiveProductivityList','deactivateProductivityList','findProductivity','archiveProductivity','deleteProductivity','deactivateProductivity','activateProductivity','likeProductivity','disLikeProductivity','productivityLikeList','productivityDislikeList','followProductivity','unfollowProductivity','productivityCommitment','productivityUncommitment','productivityCommitmentList',

							'serviceInterestKeywordLists','serviceKeywordsList','serviceTargetMarketsList','addService','editService','serviceDetails','myService','archiveServiceList','deactivateServiceList','findService','archiveService','deleteService','deactivateService','activateService','likeService', 'disLikeService', 'serviceLikeList', 'serviceDislikeList', 'followService', 'unfollowService', 'serviceCommitment', 'serviceUncommitment', 'serviceCommitmentList',

							'softwareInterestKeywordLists', 'softwareKeywordsList', 'softwareTargetMarketsList', 'addSoftware', 'editSoftware', 'softwareDetails', 'mySoftware', 'archiveSoftwareList', 'deactivateSoftwareList', 'findSoftware', 'archiveSoftware', 'deleteSoftware', 'deactivateSoftware', 'activateSoftware', 'likeSoftware', 'disLikeSoftware', 'softwareLikeList', 'softwareDislikeList', 'followSoftware', 'unfollowSoftware', 'softwareCommitment', 'softwareUncommitment', 'softwareCommitmentList',  

							'hardwareInterestKeywordLists', 'hardwareKeywordsList', 'hardwareTargetMarketsList', 'addHardware', 'editHardware', 'hardwareDetails', 'myHardware', 'archiveHardwareList', 'deactivateHardwareList', 'findHardware', 'archiveHardware', 'deleteHardware', 'deactivateHardware', 'activateHardware', 'likeHardware' , 'disLikeHardware', 'hardwareLikeList', 'hardwareDislikeList', 'followHardware', 'unfollowHardware', 'hardwareCommitment', 'hardwareUncommitment', 'hardwareCommitmentList', 

							'groupInterestKeywordLists', 'groupKeywordsList', 'groupTargetMarketsList', 'addGroup', 'editGroup', 'groupDetails', 'myGroup', 'archiveGroupList', 'deactivateGroupList', 'findGroup', 'archiveGroup', 'deleteGroup', 'deactivateGroup', 'activateGroup', 'likeGroup' , 'disLikeGroup', 'groupLikeList', 'groupDislikeList', 'followGroup', 'unfollowGroup', 'groupCommitment', 'groupUncommitment', 'groupCommitmentList',

							'conferenceInterestKeywordLists', 'conferenceKeywordsList', 'conferenceTargetMarketsList','addConference','editConference','conferenceDetails',

							'careerInterestKeywordLists','careerKeywordsList','careerTargetMarketsList','addCareer','editCareer','careerDetails','myCareer','archiveCareerList','deactivateCareerList','findCareer','archiveCareer','deleteCareer','deactivateCareer','activateCareer','likeCareer','disLikeCareer','careerLikeList','careerDislikeList','followCareer','unfollowCareer','careerCommitment','careerUncommitment','careerCommitmentList',

							'selfimprovementInterestKeywordLists','selfimprovementKeywordsList','selfimprovementTargetMarketsList','addSelfimprovement','editSelfimprovement','selfimprovementDetails','mySelfimprovement','archiveSelfimprovementList','deactivateSelfimprovementList','findSelfimprovement','archiveSelfimprovement','deleteSelfimprovement','deactivateSelfimprovement','activateSelfimprovement','likeSelfimprovement','disLikeSelfimprovement','selfimprovementLikeList','selfimprovementDislikeList','followSelfimprovement','unfollowSelfimprovement','selfimprovementCommitment','selfimprovementUncommitment','selfimprovementCommitmentList',

							'myConference', 'archiveConferenceList', 'deactivateConferenceList', 'findConference', 'archiveConference', 'deleteConference', 'deactivateConference', 'activateConference', 'likeConference' , 'disLikeConference', 'conferenceLikeList', 'conferenceDislikeList', 'followConference', 'unfollowConference', 'conferenceCommitment', 'conferenceUncommitment', 'conferenceCommitmentList',

							'meetupInterestKeywordLists', 'meetupKeywordsList', 'meetupTargetMarketsList', 'addMeetup', 'editMeetup', 'meetupDetails', 'myMeetup', 'archiveMeetupList', 'deactivateMeetupList', 'findMeetup', 'archiveMeetup', 'deleteMeetup', 'deactivateMeetup', 'activateMeetup', 'likeMeetup' , 'disLikeMeetup', 'meetupLikeList', 'meetupDislikeList', 'followMeetup', 'unfollowMeetup', 'meetupCommitment', 'meetupUncommitment', 'meetupCommitmentList',

							'demodayInterestKeywordLists','demodayKeywordsList','demodayTargetMarketsList','addDemoday','editDemoday','demodayDetails','myDemoday','archiveDemodayList','deactivateDemodayList','findDemoday','archiveDemoday','deleteDemoday','deactivateDemoday','activateDemoday','likeDemoday','disLikeDemoday','demodayLikeList','demodayDislikeList','followDemoday','unfollowDemoday','demodayCommitment','demodayUncommitment','demodayCommitmentList',

							'webinarInterestKeywordLists','webinarKeywordsList','webinarTargetMarketsList','addWebinar','editWebinar','webinarDetails','myWebinar','archiveWebinarList','deactivateWebinarList','findWebinar','archiveWebinar','deleteWebinar','deactivateWebinar','activateWebinar','likeWebinar','disLikeWebinar','webinarLikeList','webinarDislikeList','followWebinar','unfollowWebinar','webinarCommitment','webinarUncommitment','webinarCommitmentList',

							'launchdealInterestKeywordLists','launchdealKeywordsList','launchdealTargetMarketsList','addLaunchdeal','editLaunchdeal','launchdealDetails','myLaunchdeal','archiveLaunchdealList','deactivateLaunchdealList','findLaunchdeal','archiveLaunchdeal','deleteLaunchdeal','deactivateLaunchdeal','activateLaunchdeal','likeLaunchdeal','disLikeLaunchdeal','launchdealLikeList','launchdealDislikeList','followLaunchdeal','unfollowLaunchdeal','launchdealCommitment','launchdealUncommitment','launchdealCommitmentList',

							'groupbuyingKeywordsList','groupbuyingInterestKeywordLists','groupbuyingTargetMarketsList','addGroupbuying','editGroupbuying','groupbuyingDetails','myGroupbuying','findGroupbuying','deleteGroupbuying','likeGroupbuying','disLikeGroupbuying','groupbuyingLikeList','groupbuyingDislikeList','followGroupbuying','unfollowGroupbuying','groupbuyingCommitment','groupbuyingUncommitment','groupbuyingCommitmentList',

							'communalassetInterestKeywordLists','communalassetKeywordsList','communalassetTargetMarketsList','addCommunalasset','editCommunalasset','communalassetDetails','myCommunalasset','archiveCommunalassetList','deactivateCommunalassetList','findCommunalasset','archiveCommunalasset','deleteCommunalasset','deactivateCommunalasset','activateCommunalasset','likeCommunalasset','disLikeCommunalasset','communalassetLikeList','communalassetDislikeList','followCommunalasset','unfollowCommunalasset','communalassetCommitment','communalassetUncommitment','communalassetCommitmentList',

							'consultingTargetKeywordLists','consultingInterestKeywordsList','addConsulting','editConsulting','consultingDetails','findConsulting','myConsulting','archiveConsultingList','closeConsultingList','archiveConsulting','deleteConsulting','closeConsulting','openConsulting','likeConsulting','disLikeConsulting','consultingLikeList','consultingDislikeList','followConsulting','unfollowConsulting','consultingCommitment','consultingUncommitment','consultingCommitmentList','sendConsultingInvitation','acceptConsultingInvitation','rejectConsultingInvitation','consultingInvitationList','invitationContractorList',

								'userFeedList','addFeed','settingList',


								'getBlogPosts','userAvailabilityStatus','userVisibilityStatus','addBusinessCard','editBusinessCard','businessCardDetails','deleteBusinessCard','usersListWithinMiles','userListWithSameLatLong','businessCardList','businessConnectionType','addBusinessContact','editBusinessContact','businessUserConnectionType','addBusinessUserConnectionType','editBusinessUserConnectionType','activeBusinessCard','searchBusinessNetworks','addBusinessNetwork','addBusinessCardNotes','editBusinessCardNotes','businessCardNoteDetail','businessCardNotesList',

								'getBusinessTempContacts','diconnectBusinessNetwork','deleteBusinessContact','campaignTargetKeywords'

							]);
	}
    
	/**
	 * Index method
	 *
	 * @return void
	 **/

	public function index()
	{   
		$result['code'] = 404;
        $result['message'] = "You don't have sufficient privilages to access this page";
        echo json_encode($result);
		exit;
		$user = $this->Auth->user();
		$this->set('users', $this->paginate($this->Users));
		$this->set('_serialize', ['users']);
	}

    /**
	 * Login method
	 *
	**/	 
	public function login()
	{   
	  $this->viewBuilder()->layout(false);
	  $this->render(false);
	  $QBpas= $this->loadModel('Quickblox');

	  $basicTable = TableRegistry::get('ContractorBasics');

		if($this->request->is('post')) {
			$json = file_get_contents('php://input');
	 		$jsonData = json_decode($json, true);
	 		$this->request->data = $jsonData;
	
			$user = $this->Auth->identify($this->request->data['email'],$this->request->data['password']);
			if ($user) {
				if($user['status'] == 0){
					    $result['code'] = 404;
						$result['message'] = "Your account has not been activated, Please check your email or contact your Administrator.";
						echo json_encode($result);
						die;
				}
			   //pr($user);die;
				
               //$this->Auth->setUser($user);

               // get user profile status
               $userProfileStatus = $this->UserImageWeb->getUserProfileStatus($user['id']);
               if($userProfileStatus == 1){
               	$userProfileStatus= true;
               }else {
               	$userProfileStatus= false;
               }

               	

               /*To check detail of LoggedIn User in ContractorBasics Table */
                    $contractordata = $basicTable->find('all', [
                        'conditions' => ['ContractorBasics.user_id' => $user['id']]]);
                    $contractordata = $contractordata->first();
                    //echo '<pre>';
                    //print_r($contractordata);
                    if(!empty($contractordata)){
                        //Get user image
                        if(!empty($contractordata['image'])){
                            $userImage = "/img/profile_pic/".$contractordata['image']; 
                        }else{
                        	$userImage = "/img/default/userdummy.png";
                        }

                        $firstName = $contractordata['first_name'];
               			$lastName = $contractordata['last_name'];
                     }else{
                     		$userImage = "/img/default/userdummy.png";
                     		$firstName = $user['first_name'];
               				$lastName = $user['last_name'];
                     }
                if($user['role_id'] != 1){

                  $userPass = $QBpas->find('all',['conditions'=>['Quickblox.user_id'=> $user['id']]])->first();

                   $result['code'] = 200;
                   $result['user_id'] = $user['id'];
                   $result['first_name'] = $firstName;
                   $result['last_name'] = $lastName;
                   $result['email'] = $user['email'];
                   $result['username'] = $user['username'];
                   $result['date_of_birth'] = $user['date_of_birth'];
                   $result['phoneno'] = $user['phoneno'];
                   $result['user_image']=$userImage;
                   $result['isPublicProfile']= $userProfileStatus;

                   $result['isBetaTester']= $this->Contractor->isBetaTester($user['id']);
                   $result['isBoardMember']= $this->Contractor->isBoardMember($user['id']);
                   $result['isEarlyAdopter']= $this->Contractor->isEarlyAdopter($user['id']);
                   $result['isEndorsor']= $this->Contractor->isEndorsor($user['id']);
                   $result['isFocusGroup']= $this->Contractor->isFocusGroup($user['id']);
                   

                   $result['quickblox_password']=$userPass->password;
                   $result['message'] = "Success";
			       
			       
			       /** Save Token to DB **/
			       $tokenTable = TableRegistry::get('UserTokens');
				   $userToken = $tokenTable->newEntity();
				   $userToken->user_id= $user['id'];
				   $userToken->access_token= $this->request->data['access_token'];
				   $userToken->device_token= $this->request->data['device_token'];
				   $userToken->device_type= $this->request->data['device_type'];

				   if(!empty($this->request->data['access_token']) && !empty($this->request->data['device_token']) ){
				   		if ($tokenTable->save($userToken)){
				   	
				   		}
				   }
				   
				   echo json_encode($result);
                }else{
                   $result['code'] = 404;
			       $result['message'] = "You don't have privilages to access this page";
			       echo json_encode($result);
        		}
            }else{

            	$result['code'] = 404;
			    $result['message'] = "Your username or password is incorrect";
			    echo json_encode($result);
            }
		}
	}


	/*
	*
	*
	**/
	function saveDeviceToken()
	{
		$this->viewBuilder()->layout(false);
	  	$this->render(false);

	  	if($this->request->is('post')) {
	  		
	  		$json = file_get_contents('php://input');
	 		$jsonData = json_decode($json, true);
	 		$this->request->data = $jsonData;

	  		/** Save Token to DB **/
	       $tokenTable = TableRegistry::get('UserTokens');
		   $userToken = $tokenTable->newEntity();
		   $userToken->user_id= $this->request->data['user_id'];
		   $userToken->access_token= $this->request->data['access_token'];
		   $userToken->device_token= $this->request->data['device_token'];
		   $userToken->device_type= $this->request->data['device_type'];
		   if ($tokenTable->save($userToken)){
		   		$result['message'] = "Token saved successfully.";
		   		echo json_encode($result);
		   }else{
		   		$result['message'] = "Token could not save.";
		   		echo json_encode($result);
		   }
	  	}
	}

	/**
	* Max limit method for reset password
	*
	*
	***/
	public function maxLimitResetPass()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    if($this->request->is('get')) {
	    	
			$email_id= $_REQUEST['email_id'];
			$this->loadModel('Users');

			$updateHits=  $this->Users->query()
                                      ->update()
                                      ->set(['forgotpass_hits' => 0, 'status'=>0])
                                      ->where(['email' => $email_id])
                                      ->execute();
	            if($updateHits){
					
	            	$result['code'] = 200;
					$result['message'] = 'Exceeded recover password limit Please contact site administrator.';
					
					echo json_encode($result);
					
	            }else{
				 	  
					$result['code'] = 404;
					$result['message'] = "No Email address found.";
					
				 	echo json_encode($result);
					
				}
	    }else{
		    $result['code'] = 404;
			$result['message'] = "No Email address found.";
			echo json_encode($result);
		}
	}


	 /***
	 * Logout
	 *
	 **/ 
	 public function logout()
	{   
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    if($this->request->is('post')) {

				$json = file_get_contents('php://input');
			 	$jsonData = json_decode($json, true);
			 	$this->request->data = $jsonData;

			 	/** Delete token from database **/
				$tokenTable = TableRegistry::get('UserTokens');
				$tokenData= $tokenTable->deleteAll(['user_id'=>$this->request->data['user_id'],'access_token' => $this->request->data['access_token'],'device_token'=>$this->request->data['device_token'],'device_type'=>$this->request->data['device_type']]);

                if ($tokenData) {
					if($this->Auth->logout()){
						$result['code'] = 200;
						$result['message'] = "Success";
						echo json_encode($result);
					}
				}else {
					$result['code'] = 404;
				    $result['message'] = "Incorrect tokens";
				    echo json_encode($result);
				}	

		}		
	}

	/**
	 * Register method
	 *
	 * @return void Redirects on successful add, renders view otherwise.
	 */
	public function register(){
		//$this->viewBuilder()->layout(false);
	    $this->autoRender = false;

	    if($this->request->is('post')) {
		    $json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			if(empty($this->request->data['predefined_questions']) && empty($this->request->data['own_questions'])){

				$finalresult['code'] = 404;
				$finalresult['message'] = "Please select at least one security question.";
				//$finalresult['errors'] = 'Please select at least one security question.';
			 	echo json_encode($finalresult);

			}else{
			
				//pr($jsonData);die;
				//$userTable = TableRegistry::get('Users');
				$userTable=$this->loadModel('Users');
				$user = $userTable->newEntity();
				$user->status='0';
				$user->role_id='2';
				$user = $userTable->patchEntity($user, $this->request->data);

				/*$user->state=$this->request->data['state'];
				$user->country=$this->request->data['country'];*/
				$user->state='';
				$user->country='';
				$user->predefined_questions= json_encode($this->request->data['predefined_questions']);
	            $user->own_questions= json_encode($this->request->data['own_questions']);
				$user->question_id='099';
				/*$user->city=$this->request->data['city'];*/
				$user->city='';
				$user->answer='xyz';
				$user->captcha_value='1';
				$user->quickbloxid=0;
				//$user->terms=1;

				$token = bin2hex(openssl_random_pseudo_bytes(16));
				$url = Router::url(array("controller"=>"users","action"=>"ConfirmEmail/".$token),true);
				$user->token=$token;

	          // pr($user);die;
				$pass= $this->request->data['password'];
	          // pr($user);die;
				$result= $userTable->save($user);
				if($result) {
	                $lastInsertId =$result->id; 
					$to = $user->email;
	                $emailId=$this->request->data['email'];   
					$name =$this->request->data['first_name'].' '.$this->request->data['last_name']; 
	                $username =$this->request->data['username'];
	                $password =$this->request->data['password'];	
	                
	                require_once(ROOT . DS . 'webroot' . DS  . 'quickblox' . DS . 'php' . DS . 'resgister.php');
	                
	                if($quickId != 'error'){

	                		$query = $userTable->query();
	                        $query->update()
	                                  ->set(['quickbloxid' => $quickId])
	                                  ->where(['id' => $lastInsertId])
	                                  ->execute();

	                               $this->loadModel('Quickblox');
	                               /// Save user password for quickblox login
	                               $quickUseDetails = $this->Quickblox->newEntity();
	                               $quickUseDetails->user_id=$lastInsertId;
	                               $quickUseDetails->password=$pass;
	                               $this->Quickblox->save($quickUseDetails);
					
					
							
							$fullname=$this->request->data['first_name'].' '.$this->request->data['last_name'];

							 $email = new Email();
				
							$email->template('rgistration')
								 ->emailFormat('html')
								 ->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
								 ->to($to)
								 ->replyTo('crowdbootstrap@crowdbootstrap.com')
	                             ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
								 ->subject('Crowd Bootstrap - Registration Confirmation') 
								 ->viewVars(['url' => $url, 'fullname' => $fullname])                  
								 ->send(); 

							/*$email->from(['Crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
				              ->emailFormat('html')
				              ->to($to)
				              ->subject('Crowd Bootstrap - Registeration')                 
				              ->send('Dear '.$fullname.':<br /><br />
					                    Please click <a href="'.$url.'">"This Link"</a> to complete the registration process for the Crowd Bootstrap application.<br /><br />
					                    Alternatively, if the link above does not work, you can copy and paste the following URL into the address bar in your browser. This URL will also allow you to complete the registration process.<br /><br />
					                    '.$url.'<br /><br />

					                    Regards,<br /><br />
					                    Crowd Bootstrap Team ')   ;*/ 	 
							
							
			            	$finalresult['code'] = 200;
							$finalresult['message'] = "Success";
							echo json_encode($finalresult);
					}else {
	                            $userTable->deleteAll(['id'=>$lastInsertId]);
	                            //$this->Flash->error('User already exists.');

	                            $finalresult['code'] = 404;
	                            $finalresult['message'] = "User already exists.";
								//$finalresult['errors'] = "User already exists.";
								echo json_encode($finalresult);
	                            //return $this->redirect(['action' => 'login']);
	                }			

	            }else{	
				 	$errors = $user->errors();
				 	foreach($errors as $key=>$value){
						foreach($value as $keytwo=>$message){
							if($key == 'username'){
								$errorData[$key] = 'Username already exists.';
							}else if($key == 'email' ){
								$errorData[$key] = 'Email already exists.';
							}else{
								$errorData[$key] = $message;
							}
						}
					}	
					$finalresult['code'] = 404;
					$finalresult['message'] = "Errors";
					$finalresult['errors'] = $errorData;
				 	echo json_encode($finalresult);
				}
			}
		}	
	}
	
	/***
	*
	* resend confirmation email
	*
	****/
	public function resendEmail()
	{
    	$this->viewBuilder()->layout(false);
        $this->render(false);

        if($this->request->is('get'))
        {
        	$this->loadModel('Users');

        	$exists = $this->Users->exists(['email' => $_REQUEST['user_email']]); 
			if($exists){

				$users = $this->Users->find('all',['conditions'=>['Users.email'=>$_REQUEST['user_email']]])->first()->toArray();
				
				
	        	if(!empty($users['token'])){
	        		
	        		$fullname=$users['first_name'].' '.$users['last_name'];
	        		$to = $_REQUEST['user_email'];
	        		$token = $users['token'];
	        		$url = Router::url(array("controller"=>"users","action"=>"ConfirmEmail/".$token),true);
					$email = new Email();
		
					$email->template('rgistration')
						 ->emailFormat('html')
						 ->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
						 ->to($to)
						 ->replyTo('crowdbootstrap@crowdbootstrap.com')
	                     ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
						 ->subject('Crowd Bootstrap - Registration Confirmation') 
						 ->viewVars(['url' => $url, 'fullname' => $fullname])                  
						 ->send(); 
					/*$email->from(['Crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
			              ->emailFormat('html')
			              ->to($to)
			              ->subject('Crowd Bootstrap - Registeration')                 
			              ->send('Dear '.$fullname.':<br /><br />
				                    Please click <a href="'.$url.'">"This Link"</a> to complete the registration process for the Crowd Bootstrap application.<br /><br />
				                    Alternatively, if the link above does not work, you can copy and paste the following URL into the address bar in your browser. This URL will also allow you to complete the registration process.<br /><br />
				                    '.$url.'<br /><br />

				                    Regards,<br /><br />
				                    Crowd Bootstrap Team ')   ;*/   

	    			$result['code'] = 200;
					$result['message'] = "Success";
					echo json_encode($result);

	        	}else{

					$fullname=$users['first_name'].' '.$users['last_name'];
	        		$to = $_REQUEST['user_email'];
	        		$token = bin2hex(openssl_random_pseudo_bytes(16));
	        		$url = Router::url(array("controller"=>"users","action"=>"ConfirmEmail/".$token),true);

	        		$userTable=$this->loadModel('Users');
	        		$query = $userTable->query();
	                $save = $query->update()
	                              ->set(['token' => $token])
	                              ->where(['id' => $users['id']])
	                              ->execute();
					if($save){	
						$email = new Email();

						$email->template('rgistration')
						 ->emailFormat('html')
						 ->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
						 ->to($to)
						 ->replyTo('crowdbootstrap@crowdbootstrap.com')
	                     ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
						 ->subject('Crowd Bootstrap - Registration Confirmation') 
						 ->viewVars(['url' => $url, 'fullname' => $fullname])                  
						 ->send();
						 
						/*$email->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
			              ->emailFormat('html')
			              ->to($to)
			              ->replyTo('crowdbootstrap@crowdbootstrap.com')
	                      ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
			              ->subject('Crowd Bootstrap - Registeration')                 
			              ->send('Dear '.$fullname.':<br /><br />
				                    Please click <a href="'.$url.'">"This Link"</a> to complete the registration process for the Crowd Bootstrap application.<br /><br />
				                    Alternatively, if the link above does not work, you can copy and paste the following URL into the address bar in your browser. This URL will also allow you to complete the registration process.<br /><br />
				                    '.$url.'<br /><br />

				                    Regards,<br /><br />
				                    Crowd Bootstrap Team ')   ; */  
					}		 

	    			$result['code'] = 200;
					$result['message'] = "Success";
					echo json_encode($result);
	        	}
	        }else{
				
					$result['code'] = 404;
					$result['message'] = "Email is not registered.";
					
					echo json_encode($result);
					
			}	
        }	
    }	
	
	/***
	*
	* getCounrtyList with states
	*
	****/
	public function getCounrtyList()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    $countryTable = $this->loadModel('Countries');
			$countriesResult = $countryTable->find('all')
											->toArray();
	        if(!empty($countriesResult)){
				foreach($countriesResult as $SingleCountry){

					$finalStateList = array();
				
					$stateTable = $this->loadModel('States');
					$statesResult = $stateTable->find('all',['conditions' => ['States.country_id' => $SingleCountry->id]])
													->toArray();
					
					$CountryList['id'] = ($SingleCountry->id != '')?$SingleCountry->id:' ';
					$CountryList['name'] = ($SingleCountry->name !='')?$SingleCountry->name:' ';

						if(!empty($statesResult)){
							foreach($statesResult as $SingleState){
								
								$StateList['id'] = ($SingleState->id!='')?$SingleState->id:' ';
								$StateList['name'] = ($SingleState->name!='')?$SingleState->name:' ';
								
								$finalStateList[] = $StateList;
							}
						}
					$CountryList['state']=$finalStateList;				
					
					$finalCountryList[] = $CountryList;
				}
			}
			if(!empty($finalCountryList)){
				
            	$result['code'] = 200;
				$result['country'] = $finalCountryList;
				
				echo json_encode($result);
				
            }else{
			 	  
				$result['code'] = 404;
				$result['message'] = "No Countries Found";
				
			 	echo json_encode($result);
				
			}
	}



	
	/**
	 * Countries list
	 *
	 * @return countries list.
	 */
	public function AppcountryList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);

	    //if($this->request->is('post')) {
		   
			$finalCountryList = array();
			
			$countryTable = $this->loadModel('Countries');
			$countriesResult = $countryTable->find('all')
											->toArray();
			
			if(!empty($countriesResult)){
				foreach($countriesResult as $SingleCountry){
					
					$CountryList['id'] = ($SingleCountry->id != '')?$SingleCountry->id:' ';
					$CountryList['name'] = ($SingleCountry->name !='')?$SingleCountry->name:' ';
					
					$finalCountryList[] = $CountryList;
				}
			}
			
			if(!empty($finalCountryList)){
				
            	$result['code'] = 200;
				$result['country'] = $finalCountryList;
				
				echo json_encode($result);
				
            }else{
			 	  
				$result['code'] = 404;
				$result['message'] = "No Countries Found";
				
			 	echo json_encode($result);
				
			}
			 
		//}	
	}
	
	/**
	 * states list of a single country
	 *
	 * @return states list.
	 */
	public function AppstateList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);

	    if($this->request->is('get')) {
		  
		    if($_REQUEST['country_id']!=''){
			
				$finalStateList = array();
				
				$stateTable = $this->loadModel('States');
				$statesResult = $stateTable->find('all',['conditions' => ['States.country_id' => $_REQUEST['country_id']]])
												->toArray();
				
				if(!empty($statesResult)){
					foreach($statesResult as $SingleState){
						
						$StateList['id'] = ($SingleState->id!='')?$SingleState->id:' ';
						$StateList['name'] = ($SingleState->name!='')?$SingleState->name:' ';
						
						$finalStateList[] = $StateList;
					}
				}
				
				if(!empty($finalStateList)){
					
					$result['code'] = 200;
					$result['state'] = $finalStateList;
					
					echo json_encode($result);
					
				}else{
					  
					$result['code'] = 404;
					$result['message'] = "No States Found";
					
					echo json_encode($result);
					
				}
			 
			}	
		}
	}
	
	/**
	 * Questions list 
	 *
	 * @return Questions list.
	 */
	public function AppquestionList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
			
			if($this->request->is('post')){
				
				$finalQuestionList = array();
				
				$questionTable = $this->loadModel('Questions');
				$questionResult = $questionTable->find('all',['conditions'=>['status'=>1]])
												->toArray();
				
				if(!empty($questionResult)){
					foreach($questionResult as $SingleQuestion){
						
						$QuestionList['id'] = ($SingleQuestion->id!='')?$SingleQuestion->id:' ';
						$QuestionList['name'] = ($SingleQuestion->name!='')?$SingleQuestion->name:' ';
						
						$finalQuestionList[] = $QuestionList;
					}
				}
				
				if(!empty($finalQuestionList)){
					
					$result['code'] = 200;
					$result['question'] = $finalQuestionList;
					
					echo json_encode($result);
					
				}else{
					  
					$result['code'] = 404;
					$result['message'] = "No Questions Found";
					
					echo json_encode($result);
					
				}
			 
			}	
		}
	
	/**
	 * User Questions list in reset password
	 *
	 * @return user questions list.
	 */
	public function AppuserQuestionList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$finalQuestionAnswers = [];

	    if($this->request->is('get')) {
		   
		    if($_REQUEST['user_email']!=''){
			
				$finalQuestionAnswers = [];
				
				$userTable = $this->loadModel('Users');
				$questionTable = $this->loadModel('Questions');
				
				$userTable = $userTable->find('all',['conditions' => ['Users.email' => $_REQUEST['user_email'],'Users.status' =>1]]);
				
				$userResult = $userTable->first();
				
				//print_r($userResult);die('d');
				if(!empty($userResult)){
					
				//getting predefined questions
				
					if(!empty($userResult['predefined_questions'])){
						$predefined_questions_array = json_decode($userResult['predefined_questions']);
						 
						foreach($predefined_questions_array as $singlePredefinedQuestion){
							$question = $questionTable->get($singlePredefinedQuestion->id);
							
							$questionAnsers['question'] = $question->name;
							$questionAnsers['answer'] = $singlePredefinedQuestion->answer;
							
							$finalQuestionAnswers[] = $questionAnsers;
							
						}
					}
					
				//getting user defined questions
				
					if(!empty($userResult['own_questions'])){
						$userdefined_questions_array = json_decode($userResult['own_questions']);
						 
						foreach($userdefined_questions_array as $singleUserdefinedQuestion){
							
							$questionAnsers['question'] = $singleUserdefinedQuestion->id;
							$questionAnsers['answer'] = $singleUserdefinedQuestion->answer;
							
							$finalQuestionAnswers[] = $questionAnsers;
							
						}
						
					}
				}
				
				if(!empty($finalQuestionAnswers)){
					
					$result['code'] = 200;
					$result['questionAnswers'] = $finalQuestionAnswers;
					
					echo json_encode($result);
					
				}else{
					if(empty($userResult)){
						$result['code'] = 404;
						$result['message'] = "Your Account has not been activated, Please check your email or contact your Administrator";
						
						echo json_encode($result);
					}else{
						$result['code'] = 404;
						$result['message'] = "No Questions Found";
						
						echo json_encode($result);
					}
				}
			 
			}	
		}
	}
	
	public function sendMailForResetPassword(){
			$this->viewBuilder()->layout(false);
			 $this->render(false);
		
			$token = bin2hex(openssl_random_pseudo_bytes(16));

			$this->loadModel('RecoverPasswords');
			$user = $this->RecoverPasswords->newEntity();

			$this->loadModel('Users');
			$users = $this->Users->find('all',['conditions'=>['Users.email'=>$_REQUEST['user_email']]])->toArray();
	         //pr($user[0]->email);
			$userId=$users[0]['id'];
	        $fullname=$users[0]['first_name'].' '.$users[0]['last_name'];


			$to = $_REQUEST['user_email'];
			$email = new Email();
			$url = Router::url(array("controller"=>"users","action"=>"ResetPassword/".$token),true); 
			$rr = $url;

			$user = $this->RecoverPasswords->patchEntity($user,[
                                         'user_id' =>$userId,
                                         'token'=>  $token,
                                         'status'=> 1]
                                        );


			if($this->RecoverPasswords->save($user)){

					$rest= $email->template('reset')
                                    ->emailFormat('html')
                                    ->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowd Bootstrap'])
                                    ->to($to)
                                    ->replyTo('crowdbootstrap@crowdbootstrap.com')
                                    ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
                                    ->subject('Crowd Bootstrap - Reset Password') 
                                    ->viewVars(['url' => $rr, 'fullname' => $fullname])                  
                                    ->send();
			
				
					$result['code'] = 200;
					$result['message'] = "Mail sent";
					
					echo json_encode($result);
					
			}else{
				
					$result['code'] = 404;
					$result['message'] = "Mail not sent";
					
					echo json_encode($result);
					
			}
	}
	 
	 /**
	 * User User contractor basic
	 *
	 * @return user contractor basic profile
	 */
	 public function userContractorBasic(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    $this->loadModel('BusinessUserNetworks');
				
	    if($this->request->is('get')){
			
			$finalUserProfile = [];
			
		    if($_REQUEST['user_id']!=''){


		    	$logged_in_user=$_REQUEST['user_id'];
		    	$UserId=$_REQUEST['logged_in_user'];


		    	//Check user has connection or not
	            $this->loadModel('userConnections');
	            $connectionLists = $this->userConnections->find('all',
                                                      ['conditions'=>
                                                        [
                                                          'OR'=>
                                                            [
                                                              ['userConnections.connection_by'=>$logged_in_user,
                                                              'userConnections.connection_to'=>$UserId
                                                              ],
                                                              ['userConnections.connection_by'=>$UserId,
                                                              'userConnections.connection_to'=>$logged_in_user
                                                              ]
                                                            ]
                                                        ]
                                                      ])->first();

	        if(!empty($connectionLists)){
	        	if($UserId == $connectionLists->connection_by){
	        		$result['connection_sent']=1;
	        		$result['connection_received']=0;
	        	}else{
	        		$result['connection_sent']=0;
	        		$result['connection_received']=1;
	        	}
	        	$result['connection_id']=$connectionLists->id;
            	$result['connection_status']=$connectionLists->status;

          	}else{
          		$result['connection_id']=0;
          		$result['connection_sent']=0;
            	$result['connection_status']=0;
	        	$result['connection_received']=0;
          	}

				
				$userTable = $this->loadModel('Users');
				 
					$userProfile  = $userTable->find('all',
													['conditions'=>['Users.id'=>$_REQUEST['user_id']]]
													)
												   ->contain(['ContractorBasics'=>['Countries','States'],'Countries','States'
															  ])->first();
				
				//$this->Contractor->contractorProfileCompleteness($_REQUEST['user_id']);die;
				//$this->Contractor->entrepreneurProfileCompleteness($_REQUEST['user_id']);die;
				
				if(!empty($userProfile)){
					 
					$result['code'] = 200;
					//$result['name'] = ($userProfile->first_name!='' && $userProfile->last_name!='')?$userProfile->first_name.' '.$userProfile->last_name:' ';
					
					$result['quickbloxid'] =  ($userProfile->quickbloxid!='')?$userProfile->quickbloxid:' ';
					
					/*$first_name = ($userProfile->first_name!='')?$userProfile->first_name:' ';
					$last_name = ($userProfile->last_name!='')?$userProfile->last_name:' ';
					
					$result['name'] = $first_name.' '.$last_name;*/
					
				//getting the image of the contractor
				
					$image  = $this->Contractor->contractorImage($userProfile->id);
					$result['profile_image'] = $image;
					
				//geting the rating of a user
				
					$contractorRating = $this->Contractor->contractorRating($userProfile->id);
					$result['rating'] = ($contractorRating['rating']!='')?$contractorRating['rating']:' ';
					
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($_REQUEST['user_id']);
					
					$result['isFollowing'] = $this->Contractor->isUserFollowing($_REQUEST['logged_in_user'],$_REQUEST['user_id']);

				// getting user active business card id	
					$businessCardsTable = TableRegistry::get('BusinessCards');
					$businessCardDetail= $businessCardsTable->find('all',['conditions'=>['BusinessCards.user_id'=>$userProfile->id,'status'=>1]])->first();

					$businessNetworkData ='';
					
					if($businessCardDetail){
						$result['card_id']= $businessCardDetail->id;

						$businessNetworkData = $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to'=>$businessCardDetail->user_id,'user_id'=>$UserId]])->first();

					}else{
						$result['card_id']= "";

					}	

					

					if($businessNetworkData){
						$result['connection_type_id'] = $businessNetworkData['connection_type_id'];
					}else{
						$result['connection_type_id'] = "";
					}	
					
				if(!empty($userProfile['contractor_basic'])){
					
						$basicInfo['biodata'] = ($userProfile['contractor_basic']->bio!='')?$userProfile['contractor_basic']->bio:' ';
						
						//$basicInfo['name'] =  ($userProfile['contractor_basic']->first_name!='' && $userProfile['contractor_basic']->last_name!='')?$userProfile['contractor_basic']->first_name.' '.$userProfile['contractor_basic']->last_name:' ';
						
						
						$first_name = ($userProfile['contractor_basic']->first_name!='')?$userProfile['contractor_basic']->first_name:' ';
						$last_name = ($userProfile['contractor_basic']->last_name!='')?$userProfile['contractor_basic']->last_name:' ';
						
						$basicInfo['name'] = $first_name.' '.$last_name;
						
						$result['name'] = $first_name.' '.$last_name;


						$basicInfo['email'] =  ($userProfile['contractor_basic']->email!='')?$userProfile['contractor_basic']->email:' ';
						$basicInfo['dob'] = ($userProfile['contractor_basic']->date_of_birth!='')?$userProfile['contractor_basic']->date_of_birth:' ';
						$basicInfo['phone'] = ($userProfile['contractor_basic']->phoneno!='')?$userProfile['contractor_basic']->phoneno:' ';
						
						
						if($userProfile['contractor_basic']->state_id!=0 && $userProfile['contractor_basic']->state_id!=''){
						   $basicInfo['city_id'] = $userProfile['contractor_basic']->state_id;
						}else{
							$basicInfo['city_id'] = '0';
						}
						
						if($userProfile['contractor_basic']->country_id!=0 && $userProfile['contractor_basic']->country_id!=''){
						   $basicInfo['country_id'] = $userProfile['contractor_basic']->country_id;
						}else{
							$basicInfo['country_id'] = '0';
						}
						
						if(isset($userProfile['contractor_basic']['state']->name) && ($userProfile['contractor_basic']['state']->name!='')){
							$basicInfo['city'] = $userProfile['contractor_basic']['state']->name;
						}else{
							$basicInfo['city'] = ' ';
						}
						
						if(isset($userProfile['contractor_basic']['country']->name) && ($userProfile['contractor_basic']['country']->name!='')){
							$basicInfo['country'] = $userProfile['contractor_basic']['country']->name;
						}else{
							$basicInfo['country'] = ' ';
						}
						
						
						
						/*$basicInfo['city_id'] = (isset($userProfile['state']->id)&&($userProfile['state']->id!=''))?$userProfile['state']->id:' ';
						$basicInfo['city'] = (isset($userProfile['state']->name)&&($userProfile['state']->name!=''))?$userProfile['state']->name:' ';
						$basicInfo['country_id'] = (isset($userProfile['country']->id)&&($userProfile['country']->id!=''))?$userProfile['country']->id:' ';
						$basicInfo['country'] = (isset($userProfile['country']->name)&&($userProfile['country']->name!=''))?$userProfile['country']->name:' ';
						*/
						//pr($basicInfo);die;
						$result['perhour_rate'] = ($userProfile['contractor_basic']->price!='')?$userProfile['contractor_basic']->price:' ';
						$result['basic_information'] = $basicInfo;
						
				}else{
						$first_name = ($userProfile->first_name!='')?$userProfile->first_name:' ';
						$last_name = ($userProfile->last_name!='')?$userProfile->last_name:' ';
					
						$result['name'] = $first_name.' '.$last_name;

						$basicInfo['biodata'] = ' ';
						//$basicInfo['name'] =  ($userProfile->first_name!='' && $userProfile->last_name!='')?$userProfile->first_name.' '.$userProfile->last_name:' ';
						
						$first_name = ($userProfile->first_name!='')?$userProfile->first_name:' ';
						$last_name = ($userProfile->last_name!='')?$userProfile->last_name:' ';
						
						$basicInfo['name'] = $first_name.' '.$last_name;
						
						
						$basicInfo['email'] =  ($userProfile->email!='')?$userProfile->email:' ';
						$basicInfo['dob'] = ($userProfile->date_of_birth!='')?$userProfile->date_of_birth:' ';
						$basicInfo['phone'] = ($userProfile->phoneno!='')?$userProfile->phoneno:' ';
						$basicInfo['city_id'] = (isset($userProfile['state']->id)&&($userProfile['state']->id!=''))?$userProfile['state']->id:' ';
						$basicInfo['city'] = (isset($userProfile['state']->name)&&($userProfile['state']->name!=''))?$userProfile['state']->name:' ';
						$basicInfo['country_id'] = (isset($userProfile['country']->id)&&($userProfile['country']->id!=''))?$userProfile['country']->id:' ';
						$basicInfo['country'] = (isset($userProfile['country']->name)&&($userProfile['country']->name!=''))?$userProfile['country']->name:' ';
						
						$result['perhour_rate'] = ' ';
						$result['basic_information'] = $basicInfo;
						
				}
					
					echo json_encode($result);
					
				}else{
					  
					$result['code'] = 404;
					$result['message'] = "Profile Not Found";
					
					echo json_encode($result);
					
				}
			 
			}	
		}
	}
	
	/**
	 * User User contractor professional
	 *
	 * @return user contractor professional profile
	 */
	public function userContractorProffesional(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
	    if($this->request->is('get')){
			
			$finalUserProfile = [];
			
		    if($_REQUEST['user_id']!=''){
					
				$userTable = $this->loadModel('Users');
					
					$userProfile = $userTable->find('all',
														['conditions'=>['Users.id'=>$_REQUEST['user_id']]]
														)
													   ->contain(['ContractorBasics','ContractorProfessionals'=>['Experiences','PrefferStartups',
																  'ContractorTypes']])->first();
				
				if(!empty($userProfile)){
					
					$result['code'] = 200;
					
					$result['quickbloxid'] =  ($userProfile->quickbloxid!='')?$userProfile->quickbloxid:' ';
					
					$result['name'] = ($userProfile->first_name!='' && $userProfile->last_name!='')?$userProfile->first_name.' '.$userProfile->last_name:' ';
					
				//geting the rating of a user
					$contractorRating = $this->Contractor->contractorRating($userProfile->id);
					$result['rating'] = ($contractorRating['rating']!='')?$contractorRating['rating']:' ';
					
					
				//getting the image of the contractor
					$image  = $this->Contractor->contractorImage($userProfile->id);
					$result['profile_image'] = $image;
					 
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($_REQUEST['user_id']);
					
					$result['isFollowing'] = $this->Contractor->isUserFollowing($_REQUEST['logged_in_user'],$_REQUEST['user_id']);
					
					if(!empty($userProfile['contractor_basic'])){
						$result['perhour_rate'] = ($userProfile['contractor_basic']->price!='')?$userProfile['contractor_basic']->price:' ';
					}else{
						$result['perhour_rate'] = ' ';
					}
					
					if(!empty($userProfile['contractor_professional'])){
						 
						if($userProfile['contractor_professional']['experience']!=''):
							$basicInfo['experience_id'] = ($userProfile['contractor_professional']['experience']->id!='')?$userProfile['contractor_professional']['experience']->id:' ';
						else:
							$basicInfo['experience_id'] = ' ';
						endif;
						
						if($userProfile['contractor_professional']['experience']!=''):
							$basicInfo['experience'] = ($userProfile['contractor_professional']['experience']->name!='')?$userProfile['contractor_professional']['experience']->name:' ';
						else:
							$basicInfo['experience'] = ' ';
						endif;
						 
						
						//getting keywords
						
						if($userProfile['contractor_professional']->keywords!=''):
							
							$userKeywords = $this->Contractor->contractorKeywords($userProfile['contractor_professional']->keywords);
							
							if(!empty($userKeywords)):
							
								foreach($userKeywords as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalKeywords[] = $keys;
								}
								$basicInfo['keywords'] = $finalKeywords;
							endif;
						else:
								$basicInfo['keywords'] = [];
						endif;
						
						//getting qualifications
						
						if($userProfile['contractor_professional']->qualifications!=''):
							
							$userQualifications = $this->Contractor->contractorQualifications($userProfile['contractor_professional']->qualifications);
							
							if(!empty($userQualifications)):
								//$basicInfo['qualifications'] = implode(',',$userQualifications);
								
								foreach($userQualifications as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalQualifications[] = $keys;
								}
								$basicInfo['qualifications'] = $finalQualifications;
								
							endif;
						else:
								$basicInfo['qualifications'] = [];
						endif;
						
						//getting certifications
						
						if($userProfile['contractor_professional']->certifications!=''):
							
							$userCertifications = $this->Contractor->contractorCertifications($userProfile['contractor_professional']->certifications);
							
							if(!empty($userCertifications)):
								//$basicInfo['certifications'] = implode(',',$userCertifications);
								
								foreach($userCertifications as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalCertifications[] = $keys;
								}
								$basicInfo['certifications'] = $finalCertifications;
								
							endif;
						else:
								$basicInfo['certifications'] = [];
						endif;
						
						//getting certifications
						
						if($userProfile['contractor_professional']->skills!=''):
							
							$userSkills = $this->Contractor->contractorSkills($userProfile['contractor_professional']->skills);
							
							if(!empty($userSkills)):
								//$basicInfo['skills'] = implode(',',$userSkills);
								
								foreach($userSkills as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalSkills[] = $keys;
								}
								$basicInfo['skills'] = $finalSkills;
							endif;
						else:
								$basicInfo['skills'] = [];
						endif;
						 
						$basicInfo['industry_focus'] = ($userProfile['contractor_professional']->industry_focus!='')?$userProfile['contractor_professional']->industry_focus:' ';
						
						//contractor_type info
						
						if($userProfile['contractor_professional']['contractor_type']!=''):
							$basicInfo['contractor_type'] = ($userProfile['contractor_professional']['contractor_type']->name!='')?$userProfile['contractor_professional']['contractor_type']->name:' ';
						else:
							$basicInfo['contractor_type'] = ' ';
						endif;
						
						if($userProfile['contractor_professional']->contributor_type!=''):
							$basicInfo['contractor_type_id'] = ($userProfile['contractor_professional']->contributor_type!='')?$userProfile['contractor_professional']->contributor_type:' ';
						else:
							$basicInfo['contractor_type_id'] = ' ';
						endif;
						
						//preffer_startup info
						
						/*if($userProfile['contractor_professional']['preffer_startup']!=''):
							$basicInfo['preferred_startup'] = ($userProfile['contractor_professional']['preffer_startup']->name!='')?$userProfile['contractor_professional']['preffer_startup']->name:' ';
						else:
							$basicInfo['preferred_startup'] = ' ';
						endif;*/


						//getting keywords
						
						if($userProfile['contractor_professional']->startup_stage!=''):
							
							$userPreferKeywords = $this->Contractor->contractorPreferKeywords($userProfile['contractor_professional']->startup_stage);
							//pr($userPreferKeywords); die;
							if(!empty($userPreferKeywords)):
							
								foreach($userPreferKeywords as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalPreferKeywords[] = $keys;
								}
								$basicInfo['preferred_startup'] = $finalPreferKeywords;
							endif;
						else:
								$basicInfo['preferred_startup'] = [];
						endif;


						
						/*if($userProfile['contractor_professional']->startup_stage!=''):
							$basicInfo['preferred_startup_id'] = ($userProfile['contractor_professional']->startup_stage!='')?$userProfile['contractor_professional']->startup_stage:' ';
						else:
							$basicInfo['preferred_startup_id'] = ' ';
						endif;*/
						 
						$basicInfo['accredited_investor'] = $userProfile['contractor_professional']->accredited_investor;
						
						
						$result['professional_information'] = $basicInfo;
					}else{
						$result['professional_information'] = (object)[];
					}
					 
					 
					echo json_encode($result);
					 
				}else{
					  
					$result['code'] = 404;
					$result['message'] = "Profile Not Found";
					
					echo json_encode($result);
					
				}
			 
			}	
		}
	}
	
	 /**
	 * User User Entrepreneur basic
	 *
	 * @return user Entrepreneur basic profile
	 */
	public function userEntrepreneurBasic(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
	    if($this->request->is('get')){
			
			$finalUserProfile = [];
			
		    if($_REQUEST['user_id']!=''){
				
				$userTable = $this->loadModel('Users');
				 
					$userProfile  = $userTable->find('all',
													['conditions'=>['Users.id'=>$_REQUEST['user_id']]]
													)->contain(['EntrepreneurBasics'=>['Countries','States'],'Countries','States'
															  ])->first();
				//pr($userProfile);die;
				if(!empty($userProfile)){
					
					$result['code'] = 200;
					
					$result['quickbloxid'] =  ($userProfile->quickbloxid!='')?$userProfile->quickbloxid:' ';
					
					if(isset($userProfile['entrepreneur_basic']->first_name) && ($userProfile['entrepreneur_basic']->first_name!='') && (isset($userProfile['entrepreneur_basic']->last_name) && $userProfile['entrepreneur_basic']->last_name!='')){
						$result['name'] =  $userProfile['entrepreneur_basic']->first_name.' '.$userProfile['entrepreneur_basic']->last_name;	
					}else{
						$result['name'] =  $userProfile->first_name.' '.$userProfile->last_name;
					}
					
				//getting the image of the contractor
					$image  = $this->Contractor->entrepreneurImage($userProfile->id);
					$result['profile_image'] = $image;
					
				//geting the rating of a user
					$contractorRating = $this->Contractor->entrepreneurRating($userProfile->id);
					$result['rating'] = ($contractorRating['rating']!='')?$contractorRating['rating']:' ';
					
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($_REQUEST['user_id']);
					  
					$result['isFollowing'] = $this->Contractor->isUserFollowing($_REQUEST['logged_in_user'],$_REQUEST['user_id']);
				  
				if(!empty($userProfile['entrepreneur_basic'])){
					
						$basicInfo['biodata'] = ($userProfile['entrepreneur_basic']->bio!='')?$userProfile['entrepreneur_basic']->bio:' ';
						//$basicInfo['name'] =  ($userProfile['entrepreneur_basic']->first_name!='' && $userProfile['entrepreneur_basic']->last_name!='')?$userProfile['entrepreneur_basic']->first_name.' '.$userProfile['entrepreneur_basic']->last_name:' ';
						
						if(isset($basicInfo['name']) && ($basicInfo['name']!='')){
							$basicInfo['name'] =  $basicInfo['name'];
						}else{
							$basicInfo['name'] =  $result['name'];
						}
						
						
						$basicInfo['email'] =  ($userProfile['entrepreneur_basic']->email!='')?$userProfile['entrepreneur_basic']->email:' ';
						$basicInfo['dob'] = ($userProfile['entrepreneur_basic']->date_of_birth!='')?$userProfile['entrepreneur_basic']->date_of_birth:' ';
						$basicInfo['phone'] = ($userProfile['entrepreneur_basic']->phoneno!='')?$userProfile['entrepreneur_basic']->phoneno:' ';
						
						
						if($userProfile['entrepreneur_basic']->state_id!=0 && $userProfile['entrepreneur_basic']->state_id!=''){
						   $basicInfo['city_id'] = $userProfile['entrepreneur_basic']->state_id;
						}else{
							$basicInfo['city_id'] = '0';
						}
						
						if($userProfile['entrepreneur_basic']->country_id!=0 && $userProfile['entrepreneur_basic']->country_id!=''){
						   $basicInfo['country_id'] = $userProfile['entrepreneur_basic']->country_id;
						}else{
							$basicInfo['country_id'] = '0';
						}
						
						if(isset($userProfile['entrepreneur_basic']['state']->name) && ($userProfile['entrepreneur_basic']['state']->name!='')){
							$basicInfo['city'] = $userProfile['entrepreneur_basic']['state']->name;
						}else{
							$basicInfo['city'] = ' ';
						}
						
						if(isset($userProfile['entrepreneur_basic']['country']->name) && ($userProfile['entrepreneur_basic']['country']->name!='')){
							$basicInfo['country'] = $userProfile['entrepreneur_basic']['country']->name;
						}else{
							$basicInfo['country'] = ' ';
						}

						/*$basicInfo['city_id'] = ($userProfile['state']->id!='')?$userProfile['state']->id:' ';
						$basicInfo['city'] = ($userProfile['state']->name!='')?$userProfile['state']->name:' ';
						$basicInfo['country_id'] = ($userProfile['country']->id!='')?$userProfile['country']->id:' ';
						$basicInfo['country'] = ($userProfile['country']->name!='')?$userProfile['country']->name:' ';*/
						
						
						$basicInfo['interest'] = ($userProfile['entrepreneur_basic']->my_interests!='')?$userProfile['entrepreneur_basic']->my_interests:' ';
						
						$result['basic_information'] = $basicInfo;
					 
					
				}else{
						
						$basicInfo['biodata'] = ' ';
						$basicInfo['name'] =  ($userProfile->first_name!='' && $userProfile->last_name!='')?$userProfile->first_name.' '.$userProfile->last_name:' ';
						$basicInfo['email'] =  ($userProfile->email!='')?$userProfile->email:' ';
						$basicInfo['dob'] = ($userProfile->date_of_birth!='')?$userProfile->date_of_birth:' ';
						$basicInfo['phone'] = ($userProfile->phoneno!='')?$userProfile->phoneno:' ';
						$basicInfo['city_id'] = (isset($userProfile['state']->id)&&($userProfile['state']->id!=''))?$userProfile['state']->id:' ';
						$basicInfo['city'] = (isset($userProfile['state']->name)&&($userProfile['state']->name!=''))?$userProfile['state']->name:' ';
						$basicInfo['country_id'] = (isset($userProfile['country']->id)&&($userProfile['country']->id!=''))?$userProfile['country']->id:' ';
						$basicInfo['country'] = (isset($userProfile['country']->name)&&($userProfile['country']->name!=''))?$userProfile['country']->name:' ';
						$basicInfo['interest'] = ' ';
						
						$result['basic_information'] = $basicInfo;

						
				}
					
					echo json_encode($result);
					
				}else{
					
					$result['code'] = 404;
					$result['message'] = "Profile Not Found";
					
					echo json_encode($result);
					
				}
			 
			}
		}
	}
	
	
	 /**
	 * User User Entrepreneur basic
	 *
	 * @return user Entrepreneur basic profile
	 */
	public function userEntrepreneurProfessional(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
	    if($this->request->is('get')){
			
			$finalUserProfile = [];
			
		    if($_REQUEST['user_id']!=''){
				
				$userTable = $this->loadModel('Users');
				
				$userProfile  = $userTable->find('all',
													['conditions'=>['Users.id'=>$_REQUEST['user_id']]]
													)
												   ->contain(['EntrepreneurBasics','EntrepreneurProfessionals','Countries','States'
															  ])->first();
				
				if(!empty($userProfile)){
					
					$result['code'] = 200;
					
					//$result['name'] =  ($userProfile->first_name!='' && $userProfile->last_name!='')?$userProfile->first_name.' '.$userProfile->last_name:' ';
					
					$result['quickbloxid'] =  ($userProfile->quickbloxid!='')?$userProfile->quickbloxid:' ';
					
					if(isset($userProfile['entrepreneur_basic']->first_name) && ($userProfile['entrepreneur_basic']->first_name!='') && (isset($userProfile['entrepreneur_basic']->last_name) && $userProfile['entrepreneur_basic']->last_name!='')){
						$result['name'] =  $userProfile['entrepreneur_basic']->first_name.' '.$userProfile['entrepreneur_basic']->last_name;	
					}else{
						$result['name'] =  $userProfile->first_name.' '.$userProfile->last_name;
					}
					
				//getting the image of the contractor
					$image  = $this->Contractor->entrepreneurImage($userProfile->id);
					$result['profile_image'] = $image;
					
				//geting the rating of a user
					$contractorRating = $this->Contractor->entrepreneurRating($userProfile->id);
					$result['rating'] = ($contractorRating['rating']!='')?$contractorRating['rating']:' ';
					
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($_REQUEST['user_id']);
					
					$result['isFollowing'] = $this->Contractor->isUserFollowing($_REQUEST['logged_in_user'],$_REQUEST['user_id']);
					
				if(!empty($userProfile['entrepreneur_professional'])){
					 
						
						//$basicInfo['experience'] = ($userProfile['entrepreneur_professional']->experience!='')?$userProfile['entrepreneur_professional']->experience:' ';
						  
						 $basicInfo['compnay_name'] = ($userProfile['entrepreneur_professional']->company_name!='')?$userProfile['entrepreneur_professional']->company_name:' ';
						 
						 $basicInfo['website_link'] = ($userProfile['entrepreneur_professional']->website_link!='')?$userProfile['entrepreneur_professional']->website_link:' ';
						 
						 $basicInfo['description'] = ($userProfile['entrepreneur_professional']->description!='')?$userProfile['entrepreneur_professional']->description:' ';
						 
						//getting keywords
						
						if($userProfile['entrepreneur_professional']->keywords!=''):
							
							$userKeywords = $this->Contractor->contractorKeywords($userProfile['entrepreneur_professional']->keywords);
							
							if(!empty($userKeywords)):
							
								foreach($userKeywords as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalKeywords[] = $keys;
								}
								$basicInfo['keywords'] = $finalKeywords;
							endif;
							else:
								$basicInfo['keywords'] = [];
							endif;
						
						//getting qualifications
						
						if($userProfile['entrepreneur_professional']->qualifications!=''):
							
							$userQualifications = $this->Contractor->contractorQualifications($userProfile['entrepreneur_professional']->qualifications);
							
							if(!empty($userQualifications)):
								//$basicInfo['qualifications'] = implode(',',$userQualifications);
								
								foreach($userQualifications as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalQualifications[] = $keys;
								}
								$basicInfo['qualifications'] = $finalQualifications;
								
							endif;
						else:
								$basicInfo['qualifications'] = [];
							endif;
						
						 
						
						//getting certifications
						
						if($userProfile['entrepreneur_professional']->skills!=''):
							
							$userSkills = $this->Contractor->contractorSkills($userProfile['entrepreneur_professional']->skills);
							
							if(!empty($userSkills)):
								//$basicInfo['skills'] = implode(',',$userSkills);
								
								foreach($userSkills as $key=>$value){
									$keys['id'] = ($key!='')?$key:' ';
									$keys['name'] = ($value!=' ')?$value:' ';
									
									$finalSkills[] = $keys;
								}
								$basicInfo['skills'] = $finalSkills;
							endif;
							else:
								$basicInfo['skills'] = [];
							endif;
						  
						$basicInfo['industry_focus'] = ($userProfile['entrepreneur_professional']->industry_focus!='')?$userProfile['entrepreneur_professional']->industry_focus:' ';
						 
						
					//preffer_startup info
						
						/*if($userProfile['entrepreneur_professional']['preffer_startup']!=''):
							$basicInfo['preferred_startup'] = ($userProfile['entrepreneur_professional']['preffer_startup']->name!='')?$userProfile['entrepreneur_professional']['preffer_startup']->name:' ';
						else:
							$basicInfo['preferred_startup'] = ' ';
						endif;
						
						if($userProfile['entrepreneur_professional']->startup_stage!=''):
							$basicInfo['preferred_startup_id'] = ($userProfile['entrepreneur_professional']->startup_stage!='')?$userProfile['entrepreneur_professional']->startup_stage:' ';
						else:
							$basicInfo['preferred_startup_id'] = ' ';
						endif;*/
						 
						$result['professional_information'] = $basicInfo;
						 
				}else{
						$result['professional_information'] = (object)[];
					}
					
					echo json_encode($result);
					
				}else{
					
					$result['code'] = 404;
					$result['message'] = "Profile Not Found";
					
					echo json_encode($result);
					
				}
			 
			}
		}
	}
	
	 /**
	 * User skills, keywords etc  
	 *
	 * @return  skills, keywords etc  
	 */
	public function SQKCCPE(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('Keywords');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['keywords'] = $finalKeywords;
			
		else:
			$result['keywords'] = [];
		endif;
		
		//experiences
		
		 $ExperiencesTable = $this->loadModel('Experiences');
		
		$Experiences = $ExperiencesTable->find('all')->toArray();
		
		if(!empty($Experiences)):
			
			foreach($Experiences as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalExperiences[] = $keys;
				}
			$result['experiences'] = $finalExperiences;
			
		else:
			$result['experiences'] = [];
		endif;
		
		//skills
		
		 $SkillsTable = $this->loadModel('Skills');
		
		$Skills = $SkillsTable->find('all')->toArray();
		
		if(!empty($Skills)):
			
			foreach($Skills as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalSkills[] = $keys;
				}
			$result['skills'] = $finalSkills;
			
		else:
			$result['skills'] = [];
		endif;

		//qualifications
		
		 $QualificationsTable = $this->loadModel('Qualifications');
		
		$Qualifications = $QualificationsTable->find('all')->toArray();
		
		if(!empty($Qualifications)):
			
			foreach($Qualifications as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalQualifications[] = $keys;
				}
			$result['qualifications'] = $finalQualifications;
			
		else:
			$result['qualifications'] = [];
		endif;
		
		
		//prefferStartups
		
		 $PrefferStartupsTable = $this->loadModel('PrefferStartups');
		
		$PrefferStartups = $PrefferStartupsTable->find('all')->toArray();
		
		if(!empty($PrefferStartups)):
			
			foreach($PrefferStartups as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalPrefferStartups[] = $keys;
				}
			$result['prefferStartups'] = $finalPrefferStartups;
			
		else:
			$result['prefferStartups'] = [];
		endif;
		
		//contractorTypes
		
		 $ContractorTypesTable = $this->loadModel('ContractorTypes');
		
		$ContractorTypes = $ContractorTypesTable->find('all')->toArray();
		
		if(!empty($ContractorTypes)):
			
			foreach($ContractorTypes as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalContractorTypes[] = $keys;
				}
			$result['contractorTypes'] = $finalContractorTypes;
			
		else:
			$result['contractorTypes'] = [];
		endif;
		
		//certifications
		
		 $CertificationsTable = $this->loadModel('Certifications');
		
		$Certifications = $CertificationsTable->find('all')->toArray();
		
		if(!empty($Certifications)):
			
			foreach($Certifications as $Experience){
				 
					$keys['id'] = ($Experience->id!='')?$Experience->id:' ';
					$keys['name'] = ($Experience->name!=' ')?$Experience->name:' ';
					
					$finalCertifications[] = $keys;
				}
			$result['certifications'] = $finalCertifications;
			
		else:
			$result['certifications'] = [];
		endif;
	
		$result['code'] = 200;
		echo json_encode($result);				   
	}
	
	 /**
	 * updating contractor basic profile
	 *
	 * @return  updating contractor basic profile  
	 */
	public function editContractorBasic(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		//$validator = new Validator();


		$contractorBasicsTable = TableRegistry::get('ContractorBasics');
		$UsersTable = TableRegistry::get('Users');
			
		//getting the old data of contractor basic
		//if($this->request->is('post')){	
			/*$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;*/	
		$contractorBasicsIds = $contractorBasicsTable->find('all',
														   ['conditions'=>
																['ContractorBasics.user_id'=>$this->request->data['user_id']]
														   ]
														   )
														->select(['id','image'])->first();
			
		if(!empty($contractorBasicsIds)){
			
			$contractorBasicsIds = $contractorBasicsIds->toArray();
			$OldImage = $contractorBasicsIds['image'];
			
			if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
				 
				$data = [];
				$data = $this->request->data['image'];
				$data['module_type'] = 'profile_pic';
				$upload = $this->Upload->UploadApi($data);
					
					if($upload=='0'){
						
						$this->request->data['image'] = 'invalidFile.invalidExt';
						
					}else{
						
						$this->request->data['image'] = $upload;
						
						if(!empty($OldImage)){
						   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
						}
					}
					
			}else{
				
				if(!empty($OldImage)){
					$this->request->data['image'] = $OldImage;
				}else{
					$this->request->data['image'] = '';
				}
				
			}
			
			$contractorBasic = $contractorBasicsTable->get($contractorBasicsIds['id']); 
			
			if($this->request->is(['patch','post','put'])){
				
				$contractorBasicData = $contractorBasicsTable->patchEntity($contractorBasic, $this->request->data);
				
				if($contractorBasicData->errors()){
					
				//here we are getting the errors while validating the data
				
					$errors = $contractorBasicData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					$contractorBasicsTable->save($contractorBasicData);
					
					$image  = $this->Contractor->contractorImage($this->request->data['user_id']);


					$query = $UsersTable->query();
                    $query->update()
                        ->set(['state'=>$this->request->data['state_id'],
                           'country'=>$this->request->data['country_id'],
                           'first_name' =>$this->request->data['first_name'],
                           'last_name' =>$this->request->data['last_name'],
                           'phoneno' =>$this->request->data['phoneno'],
                           'date_of_birth' => $this->request->data['date_of_birth']
                           ])
                        ->where(['id' => $this->request->data['user_id']])
                        ->execute();

					//Save user Feeds
                    $this->Feeds->saveProfileFeeds($this->request->data['user_id'],'feeds_profile');
										
					$result['code'] = 200;
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($this->request->data['user_id']);
					$result['image'] = $image;
					$result['message'] = 'Successfully Updated';
				}
				
			}
			
		}else{
			
				if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
				 
					$data = [];
					$data = $this->request->data['image'];
					$data['module_type'] = 'profile_pic';
					$upload = $this->Upload->UploadApi($data);
						
						if($upload=='0'){
							
							$this->request->data['image'] = 'invalidFile.invalidExt';
							
						}else{
							
							$this->request->data['image'] = $upload;
							
						}
						
				}else{
						$this->request->data['image'] = '';
						
				}
				
				$contractorBasicData = $contractorBasicsTable->newEntity($this->request->data);
				 
				if($contractorBasicData->errors()){
					
				//here we are getting the errors while validating the data
				
					$errors = $contractorBasicData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					$contractorBasicsTable->save($contractorBasicData);


					$query = $UsersTable->query();
                    $query->update()
                        ->set(['state'=>$this->request->data['state_id'],
                           'country'=>$this->request->data['country_id'],
                           'first_name' =>$this->request->data['first_name'],
                           'last_name' =>$this->request->data['last_name'],
                           'phoneno' =>$this->request->data['phoneno'],
                           'date_of_birth' => $this->request->data['date_of_birth']
                           ])
                        ->where(['id' => $this->request->data['user_id']])
                        ->execute();
					
					$image  = $this->Contractor->contractorImage($this->request->data['user_id']);

					//Save user Feeds
                    $this->Feeds->saveProfileFeeds($this->request->data['user_id'],'feeds_profile');

					$result['code'] = 200;
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($_REQUEST['user_id']);
					$result['image'] = $image;
					$result['message'] = 'Successfully Updated..';
				}
		}
		
		echo json_encode($result);	
		//}			   
	}
	

	 
	 /**
	 * updating contractor Proffesional profile
	 *
	 * @return  updating contractor Proffesional profile  
	 */
	public function editContractorProffesional(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$validator = new Validator();
				
				$contractorProffesionalsTable = TableRegistry::get('ContractorProfessionals');
				$contractorBasicsTable = TableRegistry::get('ContractorBasics');
				
		//getting the old data of contractor basic
				
				$contractorProffesionalsIds = $contractorProffesionalsTable->find('all',
																   ['conditions'=>
																		['ContractorProfessionals.user_id'=>$this->request->data['user_id']]
																   ]
																   )
																->select(['id'])->first();
																
				$contractorBasicsIds = $contractorBasicsTable->find('all',
																   ['conditions'=>
																		['ContractorBasics.user_id'=>$this->request->data['user_id']]
																   ]
																   )
																->select(['id','image'])->first();
				
				//setting OnlycontractorBasicData data
				
				if(!empty($this->request->data['image'])):
					$OnlycontractorBasicData['image'] = $this->request->data['image'];
				endif;
				
				$OnlycontractorBasicData['rate'] = $this->request->data['rate'];
				$OnlycontractorBasicData['first_name'] = $this->request->data['first_name'];
				$OnlycontractorBasicData['last_name'] = $this->request->data['last_name'];
				
				//setting only proffessional data
				
				$OnlycontractorProffessionalData['user_id'] = $this->request->data['user_id'];
				$OnlycontractorProffessionalData['experience_id'] = $this->request->data['experience_id'];
				$OnlycontractorProffessionalData['keywords'] = $this->request->data['keywords'];
				$OnlycontractorProffessionalData['qualifications'] = $this->request->data['qualifications'];
				$OnlycontractorProffessionalData['certifications'] = $this->request->data['certifications'];
				$OnlycontractorProffessionalData['skills'] = $this->request->data['skills'];
				$OnlycontractorProffessionalData['industry_focus'] = $this->request->data['industry_focus'];
				$OnlycontractorProffessionalData['startup_stage'] = $this->request->data['startup_stage'];
				$OnlycontractorProffessionalData['contributor_type'] = $this->request->data['contributor_type'];
				$OnlycontractorProffessionalData['accredited_investor'] = $this->request->data['accredited_investor'];
				
		if(!empty($contractorProffesionalsIds)):
			
			$contractorProffesional = $contractorProffesionalsTable->get($contractorProffesionalsIds['id']); 
			
			$contractorProfessioanlData = $contractorProffesionalsTable->patchEntity($contractorProffesional,$OnlycontractorProffessionalData);
				
				if($contractorProfessioanlData->errors()){
					
				//here we are getting the errors while validating the data
				
					$errors = $contractorProfessioanlData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					if($contractorProffesionalsTable->save($contractorProfessioanlData)){
						
						if(!empty($contractorBasicsIds)):
							$contractorBasicsIds = $contractorBasicsIds->toArray();
							$OldImage = $contractorBasicsIds['image'];
						else:
							$OldImage = '';
						endif;
						
						if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
							
							$data = [];
							$data = $OnlycontractorBasicData['image'];
							$data['module_type'] = 'profile_pic';
							$upload = $this->Upload->UploadApi($data);
						
							if($upload=='0'){
								
								$OnlycontractorBasicData['image'] = $OldImage;
								
							}else{
								
								$OnlycontractorBasicData['image'] = $upload;
								
								if(!empty($OldImage)&&($OldImage !='')){
								   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
								}
							}
						
						}else{
							
							if(!empty($OldImage)&&($OldImage !='')){
								$OnlycontractorBasicData['image'] = $OldImage;
							}else{
								$OnlycontractorBasicData['image'] = '';
							}
							
						}
						
					//update contractor basic table
					
						$query = $contractorBasicsTable->query();
                            $query->update()
                                  ->set(['image'=>$OnlycontractorBasicData['image'],
                                         'price'=>$OnlycontractorBasicData['rate'],
										 'first_name'=>$OnlycontractorBasicData['first_name'],
										 'last_name'=>$OnlycontractorBasicData['last_name']
                                         ])
                                  ->where(['user_id' => $this->request->data['user_id']])
                                  ->execute();
					}
					
					
					
					if(isset($OnlycontractorBasicData['image'])&&($OnlycontractorBasicData['image']!='')):
						$imageUrl = "/img/profile_pic/".$OnlycontractorBasicData['image'];
					else:
						$imageUrl = "/img/default/userdummy.png";
					endif;
					
					//Save user Feeds
                    $this->Feeds->saveProfileFeeds($this->request->data['user_id'],'feeds_profile');

					$result['code'] = 200;
					$result['image'] = $imageUrl;
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
			
		else:
			 
				$contractorProfessioanlData = $contractorProffesionalsTable->newEntity($OnlycontractorProffessionalData);
				//pr($contractorProfessioanlData);die;
				if($contractorProfessioanlData->errors()){
					
				//here we are getting the errors while validating the data
					
					$errors = $contractorProfessioanlData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					if($contractorProffesionalsTable->save($contractorProfessioanlData)){
						
						if(!empty($contractorBasicsIds)):
							$contractorBasicsIds = $contractorBasicsIds->toArray();
							$OldImage = $contractorBasicsIds['image'];
						else:
							$OldImage = '';
						endif;
						
						if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
							
							$data = [];
							$data = $OnlycontractorBasicData['image'];
							$data['module_type'] = 'profile_pic';
							$upload = $this->Upload->UploadApi($data);
						
							if($upload=='0'){
								
								$OnlycontractorBasicData['image'] = $OldImage;
								
							}else{
								
								$OnlycontractorBasicData['image'] = $upload;
								
								if(!empty($OldImage)&&($OldImage !='')){
								   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
								}
							}
						
						}else{
							
							if(!empty($OldImage)&&($OldImage !='')){
								$OnlycontractorBasicData['image'] = $OldImage;
							}else{
								$OnlycontractorBasicData['image'] = '';
							}
							
						}
						
					//update contractor basic table
					
						$query = $contractorBasicsTable->query();
                            $query->update()
                                  ->set(['image'=>$OnlycontractorBasicData['image'],
                                         'price'=>$OnlycontractorBasicData['rate'],
										 'first_name'=>$OnlycontractorBasicData['first_name'],
										 'last_name'=>$OnlycontractorBasicData['last_name']
                                         ])
                                  ->where(['user_id' => $this->request->data['user_id']])
                                  ->execute();
					}
					
					if(isset($OnlycontractorBasicData['image'])&&($OnlycontractorBasicData['image']!='')):
						$imageUrl = "/img/profile_pic/".$OnlycontractorBasicData['image'];
					else:
						$imageUrl = "/img/default/userdummy.png";
					endif;
					//Save user Feeds
                    $this->Feeds->saveProfileFeeds($this->request->data['user_id'],'feeds_profile');

					$result['code'] = 200;
					$result['image'] = $imageUrl;
					$result['profile_completeness'] = $this->Contractor->contractorProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
			  
		endif;
			  
		echo json_encode($result);				   
	}
	/**
	 * updating contractor basic profile
	 *
	 * @return  updating contractor basic profile  
	 */
	public function editEntrepreneurBasic(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$validator = new Validator();
			
			$entrepreneurBasicsTable = TableRegistry::get('EntrepreneurBasics');
			
		//getting the old data of contractor basic
				
				$entrepreneurBasicsIds = $entrepreneurBasicsTable->find('all',
																   ['conditions'=>
																		['EntrepreneurBasics.user_id'=>$this->request->data['user_id']]
																   ]
																   )
																->select(['id','image'])->first();
			
		if(!empty($entrepreneurBasicsIds)){
			
			$entrepreneurBasicsIds = $entrepreneurBasicsIds->toArray();
			$OldImage = $entrepreneurBasicsIds['image'];
			
			if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
				 
				$data = [];
				$data = $this->request->data['image'];
				$data['module_type'] = 'profile_pic';
				$upload = $this->Upload->UploadApi($data);
					
					if($upload=='0'){
						
						$this->request->data['image'] = 'invalidFile.invalidExt';
						
					}else{
						
						$this->request->data['image'] = $upload;
						
						if(!empty($OldImage)){
						   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
						}
					}
					
			}else{
				
				if(!empty($OldImage)){
					$this->request->data['image'] = $OldImage;
				}else{
					$this->request->data['image'] = '';
				}
				
			}
			
			$entrepreneurBasic = $entrepreneurBasicsTable->get($entrepreneurBasicsIds['id']); 
			
			if($this->request->is(['patch','post','put'])){
				
				$entrepreneurBasicData = $entrepreneurBasicsTable->patchEntity($entrepreneurBasic, $this->request->data);
				
				if($entrepreneurBasicData->errors()){
					
				//here we are getting the errors while validating the data
				
					$errors = $entrepreneurBasicData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					$entrepreneurBasicsTable->save($entrepreneurBasicData);
					
					$result['code'] = 200;
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
				
			}
			
		}else{
			
				if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
				 
					$data = [];
					$data = $this->request->data['image'];
					$data['module_type'] = 'profile_pic';
					$upload = $this->Upload->UploadApi($data);
						
						if($upload=='0'){
							
							$this->request->data['image'] = 'invalidFile.invalidExt';
							
						}else{
							
							$this->request->data['image'] = $upload;
							
						}
						
				}else{
						$this->request->data['image'] = '';
						
				}
				
				$entrepreneurBasicData = $entrepreneurBasicsTable->newEntity($this->request->data);
				
				if($entrepreneurBasicData->errors()){
				
				//here we are getting the errors while validating the data
				
					$errors = $entrepreneurBasicData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					$entrepreneurBasicsTable->save($entrepreneurBasicData);
					
					$result['code'] = 200;
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
		}
		
		echo json_encode($result);				   
	}


	 /**
	 * updating Entrepreneur Proffesional profile
	 *
	 * @return  updating Entrepreneur Proffesional profile  
	 */
	public function editEntrepreneurProffesional(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$validator = new Validator();
				
				$contractorProffesionalsTable = TableRegistry::get('EntrepreneurProfessionals');
				$contractorBasicsTable = TableRegistry::get('EntrepreneurBasics');
				
		//getting the old data of contractor basic
				
				$contractorProffesionalsIds = $contractorProffesionalsTable->find('all',
																   ['conditions'=>
																		['EntrepreneurProfessionals.user_id'=>$this->request->data['user_id']]
																   ]
																   )
																->select(['id'])->first();
																
				$contractorBasicsIds = $contractorBasicsTable->find('all',
																   ['conditions'=>
																		['EntrepreneurBasics.user_id'=>$this->request->data['user_id']]
																   ]
																   )
																->select(['id','image'])->first();
				
				//setting OnlycontractorBasicData data
				
				if(!empty($this->request->data['image'])):
					$OnlycontractorBasicData['image'] = $this->request->data['image'];
				endif;
				
				$OnlycontractorBasicData['first_name'] = $this->request->data['first_name'];
				$OnlycontractorBasicData['last_name'] = $this->request->data['last_name'];
				
				//setting only proffessional data
				
				$OnlycontractorProffessionalData['user_id'] = $this->request->data['user_id'];
				$OnlycontractorProffessionalData['company_name'] = $this->request->data['company_name'];
				$OnlycontractorProffessionalData['website_link'] = $this->request->data['website_link'];
				$OnlycontractorProffessionalData['description'] = $this->request->data['description'];
				$OnlycontractorProffessionalData['keywords'] = $this->request->data['keywords'];
				$OnlycontractorProffessionalData['qualifications'] = $this->request->data['qualifications'];
				$OnlycontractorProffessionalData['skills'] = $this->request->data['skills'];
				$OnlycontractorProffessionalData['industry_focus'] = $this->request->data['industry_focus'];
				
		if(!empty($contractorProffesionalsIds)):
			
			$contractorProffesional = $contractorProffesionalsTable->get($contractorProffesionalsIds['id']); 
			
			$contractorProfessioanlData = $contractorProffesionalsTable->patchEntity($contractorProffesional,$OnlycontractorProffessionalData);
				
				if($contractorProfessioanlData->errors()){
					
				//here we are getting the errors while validating the data
				
					$errors = $contractorProfessioanlData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					if($contractorProffesionalsTable->save($contractorProfessioanlData)){
						
						if(!empty($contractorBasicsIds)):
							$contractorBasicsIds = $contractorBasicsIds->toArray();
							$OldImage = $contractorBasicsIds['image'];
						else:
							$OldImage = '';
						endif;
						
						if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
							
							$data = [];
							$data = $OnlycontractorBasicData['image'];
							$data['module_type'] = 'profile_pic';
							$upload = $this->Upload->UploadApi($data);
						
							if($upload=='0'){
								
								$OnlycontractorBasicData['image'] = $OldImage;
								
							}else{
								
								$OnlycontractorBasicData['image'] = $upload;
								
								if(!empty($OldImage)&&($OldImage !='')){
								   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
								}
							}
						
						}else{
							
							if(!empty($OldImage)&&($OldImage !='')){
								$OnlycontractorBasicData['image'] = $OldImage;
							}else{
								$OnlycontractorBasicData['image'] = '';
							}
							
						}
						
					//update contractor basic table
					
						$query = $contractorBasicsTable->query();
                            $query->update()
                                  ->set(['image'=>$OnlycontractorBasicData['image'],
                                         'first_name'=>$OnlycontractorBasicData['first_name'],
										 'last_name'=>$OnlycontractorBasicData['last_name']
                                         ])
                                  ->where(['user_id' => $this->request->data['user_id']])
                                  ->execute();
					}
					
					if(isset($OnlycontractorBasicData['image'])&&($OnlycontractorBasicData['image']!='')):
						$imageUrl = "/img/profile_pic/".$OnlycontractorBasicData['image'];
					else:
						$imageUrl = "/img/default/userdummy.png";
					endif;
					
					$result['code'] = 200;
					$result['image'] = $imageUrl;
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
			
		else:
				
				$contractorProfessioanlData = $contractorProffesionalsTable->newEntity($OnlycontractorProffessionalData);
				
				if($contractorProfessioanlData->errors()){
				
				//here we are getting the errors while validating the data
					
					$errors = $contractorProfessioanlData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					
				}else{
					
					if($contractorProffesionalsTable->save($contractorProfessioanlData)){
						
						if(!empty($contractorBasicsIds)):
							$contractorBasicsIds = $contractorBasicsIds->toArray();
							$OldImage = $contractorBasicsIds['image'];
						else:
							$OldImage = '';
						endif;
						
						if(!empty($this->request->data['image']) && ($this->request->data['image']['error'] == 0)){
							
							$data = [];
							$data = $OnlycontractorBasicData['image'];
							$data['module_type'] = 'profile_pic';
							$upload = $this->Upload->UploadApi($data);
						
							if($upload=='0'){
								
								$OnlycontractorBasicData['image'] = $OldImage;
								
							}else{
								
								$OnlycontractorBasicData['image'] = $upload;
								
								if(!empty($OldImage)&&($OldImage !='')){
								   unlink(WWW_ROOT . 'img/profile_pic/' .$OldImage);
								}
							}
						
						}else{
							
							if(!empty($OldImage)&&($OldImage !='')){
								$OnlycontractorBasicData['image'] = $OldImage;
							}else{
								$OnlycontractorBasicData['image'] = '';
							}
							
						}
						
					//update contractor basic table
					 
						$query = $contractorBasicsTable->query();
                            $query->update()
                                  ->set(['image'=>$OnlycontractorBasicData['image'],
                                         'first_name'=>$OnlycontractorBasicData['first_name'],
										 'last_name'=>$OnlycontractorBasicData['last_name']
                                         ])
                                  ->where(['user_id' => $this->request->data['user_id']])
                                  ->execute();
					}
					
					if(isset($OnlycontractorBasicData['image'])&&($OnlycontractorBasicData['image']!='')):
						$imageUrl = "/img/profile_pic/".$OnlycontractorBasicData['image'];
					else:
						$imageUrl = "/img/default/userdummy.png";
					endif;
					
					$result['code'] = 200;
					$result['image'] = $imageUrl;
					$result['profile_completeness'] = $this->Contractor->entrepreneurProfileCompleteness($this->request->data['user_id']);
					$result['message'] = 'Successfully Updated';
				}
			  
		endif;
		
		echo json_encode($result);				   
	}



 /**
	 * updating Entrepreneur Proffesional profile
	 *
	 * @return  updating Entrepreneur Proffesional profile  
	 */
	public function userStartup(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$validator = new Validator();
				
				$startupsTable = TableRegistry::get('Startups');
				//$startupsTeamsTable = TableRegistry::get('Startup_teams');
				$this->loadModel('StartupTeams');
				$this->loadModel('Startups');
				$this->loadModel('StartupListProfiles');
				$this->loadModel('StartupListEntrepreneurProfiles');
				 
				$user_id = $_REQUEST['user_id'];
				$user_type = $_REQUEST['user_type'];
				
		//getting the old data of contractor basic
					
				if($user_type=='ENTREPRENEUR'):
					
				    $entrepreneurAlreadyIds = $this->StartupListEntrepreneurProfiles->find('all',
													['conditions'=>
														 ['StartupListEntrepreneurProfiles.user_id'=>$user_id]
													]
													)
												 ->select(['startup_id'])
												 ->first();
					
					if(!empty($entrepreneurAlreadyIds)&&($entrepreneurAlreadyIds->toArray()['startup_id']!='')):
						$entrepreneurAlreadyIds = explode(',',$entrepreneurAlreadyIds->toArray()['startup_id']);
					else:
						$entrepreneurAlreadyIds = [];
					endif;
						 
						 $conditions = ['Startups.user_id'=>$user_id];
						 
						 /*if(!empty($entrepreneurAlreadyIds)){
							 array_push($conditions,['Startups.id NOT IN' => $entrepreneurAlreadyIds]);
						 }*/
						 
						$startupsList = $startupsTable->find('all',
													['conditions'=> $conditions
													]
													)
												 ->select(['id','name','description'])
												 ->toArray();
						 
						if(!empty($startupsList)):
							
							foreach($startupsList as $singleStartup):
								 $startUp['id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
								 $startUp['name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
								 $startUp['description'] = ($singleStartup->description!='')?$singleStartup->description:' ';
								 
								 if(in_array($singleStartup->id,$entrepreneurAlreadyIds)):
									$startUp['isSelected'] = 'true';
								 else:
									$startUp['isSelected'] = 'false';
								 endif;
								  
								 $finalStartUp[] = $startUp;
							endforeach;
							
							$result['code'] = '200';
							$result['startup'] = $finalStartUp;
						
						else:
							 $finalStartUp = [];
							 
							 $result['code'] = '404';
							 $result['message'] = 'No startups available';
							
						endif;
				
				
				else:
					
					$contractorAlreadyIds = $this->StartupListProfiles->find('all',
													['conditions'=>
														 ['StartupListProfiles.user_id'=>$user_id]
													]
													)
												 ->select(['startup_id'])
												 ->first();
						 
					if(!empty($contractorAlreadyIds)):
						$contractorAlreadyIds = explode(',',$contractorAlreadyIds->toArray()['startup_id']);
					else:
						$contractorAlreadyIds = [];
					endif;
					
					$conditions = ['StartupTeams.user_id'=>$user_id];
					
					/*if(!empty($contractorAlreadyIds)){
						array_push($conditions,['StartupTeams.startup_id NOT IN' => $contractorAlreadyIds]);
					}*/
					 
					$startupsList = $this->StartupTeams->find('all',['conditions'=>$conditions])
														->contain(['Startups'])
														->toArray();
						
					if(!empty($startupsList)):
						
						foreach($startupsList as $singleStartup):
						
							 $startUp['id'] = ($singleStartup->startup_id!='')?$singleStartup->startup_id:' ';
							 $startUp['name'] = (isset($singleStartup['startup']->name)&&($singleStartup['startup']->name!=''))?$singleStartup['startup']->name:' ';
							 $startUp['description'] = (isset($singleStartup['startup']->description)&&($singleStartup['startup']->description!=''))?$singleStartup['startup']->description:' ';
							 
							 if(in_array($singleStartup->startup_id,$contractorAlreadyIds)):
									$startUp['isSelected'] = 'true';
								 else:
									$startUp['isSelected'] = 'false';
								 endif;
								 
							 $finalStartUp[] = $startUp;
						endforeach;
						
						$result['code'] = '200';
						$result['startup'] = $finalStartUp;
				
					else:
						 $finalStartUp = [];
						 
						 $result['code'] = '404';
						 $result['message'] = 'No startups available';
						
					endif;
				
					//pr($data);die;
					
				endif;
				
				
				
		echo json_encode($result);				   
	}
	/*
	 *
	 *method for updating the profile settings
	 *
	 */
	
	
	public function profileSettings(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$settingsTable = TableRegistry::get('Settings');
		
		$query = $settingsTable->query();
		
		if($_REQUEST['public_profile']!=''){
			
			$public_profile = ($_REQUEST['public_profile']=='true')?'1':'0';
		 
			$exists = $settingsTable->exists(['user_id' => $_REQUEST['user_id']]); 
			if(!$exists){
				
				$settingToken = $settingsTable->newEntity();
				$settingToken->user_id= $_REQUEST['user_id'];
				$settingToken->public_profile= $public_profile;
				
				if($settingsTable->save($settingToken)){
					
					$result['code']=200;
					$result['message']='successfully updated';
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']='not updated';
					echo json_encode($result);
				}
				
			}else{
				
				if($query->update()
				->set(['public_profile'=>$public_profile
					   ])
				->where(['user_id' => $_REQUEST['user_id']])
				->execute()){
					
					$result['code']=200;
					$result['message']='successfully updated';
					echo json_encode($result);
					
				}else{
					$result['code']=404;
					$result['message']='not updated';
					echo json_encode($result);
				}
				
			}
			 
		}


		if($_REQUEST['notification']!=''){
			
			$notification = ($_REQUEST['notification']=='true')?'1':'0';
		 
			$exists = $settingsTable->exists(['user_id' => $_REQUEST['user_id']]); 
			if(!$exists){
				
				$settingToken = $settingsTable->newEntity();
				$settingToken->user_id= $_REQUEST['user_id'];
				$settingToken->notification= $notification;
				
				if($settingsTable->save($settingToken)){
					
					$result['code']=200;
					$result['message']='successfully updated';
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']='not updated';
					echo json_encode($result);
				}
				
			}else{
				
				if($query->update()
				->set(['notification'=>$notification
					   ])
				->where(['user_id' => $_REQUEST['user_id']])
				->execute()){
					
					$result['code']=200;
					$result['message']='successfully updated';
					echo json_encode($result);
					
				}else{
					$result['code']=404;
					$result['message']='not updated';
					echo json_encode($result);
				}
				
			}
			 
		}
				  
	}
								  
	
	public function addStartupList(){
             
            $this->loadModel('StartupListProfiles');
			$this->loadModel('StartupListEntrepreneurProfiles');
               
			   $this->viewBuilder()->layout(false);
				$this->render(false);
		
                    if($this->request->is('Post')){
						
						//check the type of user
							
							if($this->request->data['user_type']=='CONTRACTOR'){
								
								$exists = $this->StartupListProfiles->exists(['user_id' => $this->request->data['user_id']]);
							
								if(!$exists){
									
									$user = $this->StartupListProfiles->newEntity($this->request->data);
		
									if($this->StartupListProfiles->save($user)){ 
										$result['code']=200;
										$result['message']='successfully saved';
										echo json_encode($result);
									} else {
										$result['code']=404;
										$result['message']='not saved';
										echo json_encode($result);
									}
		
								}else{
									
									$startupListProfilesTable = TableRegistry::get('StartupListProfiles');
				
									$query = $startupListProfilesTable->query();
									
									if($query->update()
											->set(['startup_id'=>$this->request->data['startup_id']
												   ])
											->where(['user_id' => $this->request->data['user_id']])
											->execute()){
												
												$result['code']=200;
												$result['message']='successfully updated';
												echo json_encode($result);
												
											}else{
												$result['code']=404;
												$result['message']='not updated';
												echo json_encode($result);
											}
									
								}
								
							}else{
								
								$exists = $this->StartupListEntrepreneurProfiles->exists(['user_id' => $this->request->data['user_id']]);
							
								if(!$exists){
									
									$user = $this->StartupListEntrepreneurProfiles->newEntity($this->request->data);
									
									if($this->StartupListEntrepreneurProfiles->save($user)){ 
										$result['code']=200;
										$result['message']='successfully saved';
										echo json_encode($result);
									} else {
										$result['code']=404;
										$result['message']='not saved';
										echo json_encode($result);
									}
		
								}else{
									
									$StartupListEntrepreneurProfilesTable = TableRegistry::get('StartupListEntrepreneurProfiles');
				
									$query = $StartupListEntrepreneurProfilesTable->query();
									
									if($query->update()
											->set(['startup_id'=>$this->request->data['startup_id']
												   ])
											->where(['user_id' => $this->request->data['user_id']])
											->execute()){
												
												$result['code']=200;
												$result['message']='successfully updated';
												echo json_encode($result);
												
											}else{
												$result['code']=404;
												$result['message']='not updated';
												echo json_encode($result);
											}
									
								}
								
								
							}
							
							
                         
                    }
 
		}
		
		/**
		* get user selected detail for entrepreneur and contractor user
		*
		* @return  user selected detail for entrepreneur and contractor user
		*/
	public function userSelectedStartup(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
				
				$this->loadModel('Startups');
				$this->loadModel('StartupListProfiles');
				$this->loadModel('StartupListEntrepreneurProfiles');
				 
				$user_id = $_REQUEST['user_id'];
				$user_type = $_REQUEST['user_type'];
				
		//getting the old data of contractor basic
				
				if($user_type=='CONTRACTOR'):
						
						$startupsList = $this->StartupListProfiles->find('all',
													['conditions'=>
														 ['StartupListProfiles.user_id'=>$user_id]
													]
													)
												 ->select(['startup_id'])
												 ->first();
						 
						if(!empty($startupsList)):
							
							$startupsList = $startupsList->toArray();
							
							if(!empty($startupsList['startup_id'])){ 
							 
								$startupsLists = $this->Startups->find('all',
													['conditions'=>
														 ['Startups.id IN'=>explode(',',$startupsList['startup_id'])]
													]
													)
												 ->select(['id','name','description'])->toArray();
								
								if(!empty($startupsLists)){
									
									foreach($startupsLists as $singleStartup): 
										$startUp['id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
										$startUp['name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
										$startUp['description'] = ($singleStartup->description!='')?$singleStartup->description:' ';
										
										$finalStartUp[] = $startUp;
									endforeach;
									
									$result['code'] = '200';
									$result['startup'] = $finalStartUp;
								
								}else{
									$result['code'] = '404';
									$result['message'] = 'No Startup found';
								}
								 
							}else{
								$result['code'] = '404';
								$result['message'] = 'No Startup found';
							}
							
							
						else:
							 $finalStartUp = [];
							 
							 $result['code'] = '404';
							 $result['message'] = 'No startups available';
							
						endif;
				
				
				else:
					 
					$startupsList = $this->StartupListEntrepreneurProfiles->find('all',
													['conditions'=>
														 ['StartupListEntrepreneurProfiles.user_id'=>$user_id]
													]
													)
												 ->select(['startup_id'])
												 ->first();
						 
						if(!empty($startupsList)):
							
							$startupsList = $startupsList->toArray();
							
							if(!empty($startupsList['startup_id'])){ 
							 
								$startupsLists = $this->Startups->find('all',
													['conditions'=>
														 ['Startups.id IN'=>explode(',',$startupsList['startup_id'])]
													]
													)
												 ->select(['id','name','description'])->toArray();
								
								if(!empty($startupsLists)){
									
									foreach($startupsLists as $singleStartup): 
										$startUp['id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
										$startUp['name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
										$startUp['description'] = ($singleStartup->description!='')?$singleStartup->description:' ';
										
										$finalStartUp[] = $startUp;
									endforeach;
									
									$result['code'] = '200';
									$result['startup'] = $finalStartUp;
								
								}else{
									$result['code'] = '404';
									$result['message'] = 'No Startup found';
								}
								 
							}else{
								$result['code'] = '404';
								$result['message'] = 'No Startup found';
							}
							
						
						else:
							 $finalStartUp = [];
							 
							 $result['code'] = '404';
							 $result['message'] = 'No startups available';
							
						endif;
				 
				endif;
				 
		echo json_encode($result);				   
	}

	
	
	 /**
	 * User keywords etc  
	 *
	 * @return   keywords   
	 */
	public function keywords(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('Keywords');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['keywords'] = $finalKeywords;
			
		else:
			$result['keywords'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}


	public function campaignTargetKeywords(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('CampaignTargetKeywords');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['keywords'] = $finalKeywords;
			
		else:
			$result['keywords'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}

	public function campaignKeywords(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('KeywordCampaigns');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['keywords'] = $finalKeywords;
			
		else:
			$result['keywords'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}

	public function forumKeywords(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('KeywordForums');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['keywords'] = $finalKeywords;
			
		else:
			$result['keywords'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}

	/**
	 * User keywords etc  
	 *
	 * @return   keywords   
	 */
	public function startupKeywords(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('KeywordStartups');
		
		$keywords = $keywordsTable->find('all')->toArray();
		
		if(!empty($keywords)):
			
			foreach($keywords as $keyword){
				 
					$keys['id'] = ($keyword->id!='')?$keyword->id:' ';
					$keys['name'] = ($keyword->name!=' ')?$keyword->name:' ';
					
					$finalKeywords[] = $keys;
				}
			$result['startup_keywords'] = $finalKeywords;
			
		else:
			$result['startup_keywords'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}
	 
	/*
	 *
	 *method for updating the profile settings
	 *
	 */
	public function addStartup(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = TableRegistry::get('Startups');
		  
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				 
				$startup = $startupsTable->newEntity();
				
				$startup->user_id = $this->request->data['user_id'];
				$startup->name = $this->request->data['name'];
				$startup->description = $this->request->data['description'];
				$startup->keywords = $this->request->data['keywords'];
				$startup->support_required = $this->request->data['support_required'];
				$saveResult= $startupsTable->save($startup) ;
				if($saveResult){
					$lastInsertId =$saveResult->id;
					//Save user Feeds
                    $this->Feeds->saveStartupFeeds($this->request->data['user_id'],'feeds_startup_added',$lastInsertId);
					$result['code']=200;
					$result['message']='successfully saved';
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']='not saved';
					echo json_encode($result);
				}
				
			}
		 		  
	}

	
	/**
	* campaigns list recomended, my campaigns, following, commited 
	*
	* @return   campaigns list recomended, my campaigns, following, commited    
	*/
	public function campaignsList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ContractorProfessionalsTable = $this->loadModel('ContractorProfessionals');
		$CampaignsTable = $this->loadModel('Campaigns');
		$CampaignFollowersTable = $this->loadModel('CampaignFollowers');
		$CampaignDonationsTable = $this->loadModel('CampaignDonations');
			
			//$current_date_time = date('Y-m-d H:i:s');
			$current_date_time =date('Y-m-d H:i:s', strtotime(' -1 day'));
			
			$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Campaigns.modified' => 'DESC'
							]
						];
			
			$user_id = $_REQUEST['user_id'];
			
			switch($_REQUEST['campaign_type']):
				
				case '0':
					
					//getting the recomended campaigns
					
						$keywords = $ContractorProfessionalsTable->find('all',
												['conditions'=>['ContractorProfessionals.user_id'=>$_REQUEST['user_id']]])
												->select(['keywords'])
												->first();
							
						if(!empty($keywords)&&$keywords->toArray()['keywords']!=''):
							
							$conditions['OR'] = [];
							$keywords = $keywords->toArray();
							
							foreach(explode(',',$keywords['keywords']) as $single_keyword):
								 
								 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,Campaigns.keywords)"]);
								 
							endforeach;
						 
						//getting the campaigns list
							
							array_push($conditions,['Campaigns.user_id !='=>$user_id]);
							
							array_push($conditions,['Campaigns.comp_due_date >='=>$current_date_time]);
							 
							
							$query = $this->Campaigns->find('all')
													->where($conditions)
													->contain(['Startups'
															  ]);
							$result['TotalItems'] = $query->count();
							
							$campaigns = $this->Paginator->paginate(
																	$this->Campaigns->find('all')
													->where($conditions)
													->contain(['Startups'
															  ])
													, $config);
							
							if(!empty($campaigns)){
								
								foreach($campaigns as $singleCampaign){
									
									$keys['campaign_id'] = ($singleCampaign->id!='')?$singleCampaign->id:' ';
									$keys['campaign_name'] = ($singleCampaign->campaigns_name!=' ')?$singleCampaign->campaigns_name:' ';
									$keys['startup_name'] = (isset($singleCampaign['startup']->name)&&($singleCampaign['startup']->name!=' '))?$singleCampaign['startup']->name:' ';
									$keys['startup_id'] = (isset($singleCampaign['startup']->id)&&($singleCampaign['startup']->id!=' '))?$singleCampaign['startup']->id:' ';
									$keys['target_amount'] = ($singleCampaign->target_amount!=' ')?$singleCampaign->target_amount:' ';
									$keys['fund_raised'] = ($singleCampaign->fund_raised_so_far!=' ')?$singleCampaign->fund_raised_so_far:' ';
									$keys['description'] = ($singleCampaign->summary!=' ')?$singleCampaign->summary:' ';
									$keys['due_date'] = ($singleCampaign->due_date!=' ')?$singleCampaign->due_date:' ';
									
									$finalCampaigns[] = $keys;
								}
								
								if(!empty($finalCampaigns)):
									$result['campaigns'] = $finalCampaigns;
								else:
									$result['campaigns'] = [];
								endif;
								 
							}else{
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
								
							}
							
						else:
							$result['TotalItems'] = '0';
							$result['campaigns'] = [];
						endif;
						
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
				
				
				case '1':
					
					//getting the following campaigns
						
							$followedCampaigns = $this->CampaignFollowers->find('all',
																				['conditions'=>['user_id'=>$_REQUEST['user_id']]]
																		 );
							 
						if(!empty($followedCampaigns)):
							
							$userCampaigns = $followedCampaigns->toArray();
							
							if(!empty($userCampaigns)):
									
									foreach($userCampaigns as $singleCampaign):
								if($singleCampaign->campaign_id!=''):
									$finalCampaignIDs[] = $singleCampaign->campaign_id;
								endif;
							endforeach;
							
							/*$campaigns = $this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs]])
																		->contain(['Startups'])->toArray();*/
							
							$query = $this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs,
																				  'Campaigns.comp_due_date >='=>$current_date_time]])
																		->contain(['Startups']);
							$result['TotalItems'] = $query->count();
							
							$campaigns = $this->Paginator->paginate($this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs,'Campaigns.comp_due_date >='=>$current_date_time]])->contain(['Startups']), $config);

							
							if(!empty($campaigns)){
							
								foreach($campaigns as $singleCampaign){
									
									$keys['campaign_id'] = ($singleCampaign->id!='')?$singleCampaign->id:' ';
									$keys['campaign_name'] = ($singleCampaign->campaigns_name!=' ')?$singleCampaign->campaigns_name:' ';
									$keys['startup_name'] = (isset($singleCampaign['startup']->name)&&($singleCampaign['startup']->name!=' '))?$singleCampaign['startup']->name:' ';
									$keys['startup_id'] = (isset($singleCampaign['startup']->id)&&($singleCampaign['startup']->id!=' '))?$singleCampaign['startup']->id:' ';
									$keys['target_amount'] = ($singleCampaign->target_amount!=' ')?$singleCampaign->target_amount:' ';
									$keys['fund_raised'] = ($singleCampaign->fund_raised_so_far!=' ')?$singleCampaign->fund_raised_so_far:' ';
									$keys['description'] = ($singleCampaign->summary!=' ')?$singleCampaign->summary:' ';
									$keys['due_date'] = ($singleCampaign->due_date!=' ')?$singleCampaign->due_date:' ';
									
									$finalCampaigns[] = $keys;
								}
								
								if(!empty($finalCampaigns)):
									$result['campaigns'] = $finalCampaigns;
								else:
									$result['campaigns'] = [];
								endif;
								 
							}else{
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
								
							}
							
							else:
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
								
							endif;
							 
						else:
							$result['TotalItems'] = '0';
							$result['campaigns'] = [];
						endif;
						
						
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
				
				case '2':
							
					//getting the commited campaigns
						
						$donatedCampaigns = $this->CampaignDonations->find('all',
																				['conditions'=>['user_id'=>$_REQUEST['user_id']]]
																		 );
							 
						if(!empty($donatedCampaigns)):
							
							$userCampaigns = $donatedCampaigns->toArray();
							
							if(!empty($userCampaigns)):
								
								foreach($userCampaigns as $singleCampaign):
								if($singleCampaign->campaign_id!=''):
									$finalCampaignIDs[] = $singleCampaign->campaign_id;
								endif;
							endforeach;
							/*$campaigns = $this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs]])
																->contain(['Startups'])->toArray();*/
							
							$query = $this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs,'Campaigns.comp_due_date >='=>$current_date_time]])->contain(['Startups']);

							$result['TotalItems'] = $query->count();
							
							$campaigns = $this->Paginator->paginate($this->Campaigns->find('all',['conditions'=>['Campaigns.id IN'=>$finalCampaignIDs,'Campaigns.comp_due_date >='=>$current_date_time]])->contain(['Startups']),$config);

							if(!empty($campaigns)){
								
								foreach($campaigns as $singleCampaign){
									
									$keys['campaign_id'] = ($singleCampaign->id!='')?$singleCampaign->id:' ';
									$keys['campaign_name'] = ($singleCampaign->campaigns_name!=' ')?$singleCampaign->campaigns_name:' ';
									$keys['startup_name'] = (isset($singleCampaign['startup']->name)&&($singleCampaign['startup']->name!=' '))?$singleCampaign['startup']->name:' ';
									$keys['startup_id'] = (isset($singleCampaign['startup']->id)&&($singleCampaign['startup']->id!=' '))?$singleCampaign['startup']->id:' ';
									$keys['target_amount'] = ($singleCampaign->target_amount!=' ')?$singleCampaign->target_amount:' ';
									$keys['fund_raised'] = ($singleCampaign->fund_raised_so_far!=' ')?$singleCampaign->fund_raised_so_far:' ';
									$keys['description'] = ($singleCampaign->summary!=' ')?$singleCampaign->summary:' ';
									$keys['due_date'] = ($singleCampaign->due_date!=' ')?$singleCampaign->due_date:' ';
									
									$finalCampaigns[] = $keys;
								}
								
								if(!empty($finalCampaigns)):
									$result['campaigns'] = $finalCampaigns;
								else:
									$result['campaigns'] = [];
								endif;
								 
							}else{
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
								
							}
							
							else:
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
							endif;
							
							
							
						else:
							$result['TotalItems'] = '0';
							$result['campaigns'] = [];
						endif;
							
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
				
					CASE '3':
							
						//getting my campaigns
						
							/*$campaigns = $this->Campaigns->find('all',
																['conditions'=>['Campaigns.user_id'=>$_REQUEST['user_id']]])
																->contain(['Startups'])
																->toArray();*/
							$query = $this->Campaigns->find('all',
																		['conditions'=>['Campaigns.user_id'=>$_REQUEST['user_id']]])
																		->contain(['Startups']);
							$result['TotalItems'] = $query->count();
							
							$campaigns = $this->Paginator->paginate(
																	$this->Campaigns->find('all',
																		['conditions'=>['Campaigns.user_id'=>$_REQUEST['user_id']]])
																		->contain(['Startups'])
																	,$config);
							
							if(!empty($campaigns)){
								 
								foreach($campaigns as $singleCampaign){
									 
									$keys['campaign_id'] = ($singleCampaign->id!='')?$singleCampaign->id:' ';
									$keys['campaign_name'] = ($singleCampaign->campaigns_name!=' ')?$singleCampaign->campaigns_name:' ';
									$keys['startup_name'] = (isset($singleCampaign['startup']->name)&&($singleCampaign['startup']->name!=' '))?$singleCampaign['startup']->name:' ';
									$keys['startup_id'] = (isset($singleCampaign['startup']->id)&&($singleCampaign['startup']->id!=' '))?$singleCampaign['startup']->id:' ';
									$keys['target_amount'] = ($singleCampaign->target_amount!=' ')?$singleCampaign->target_amount:' ';
									$keys['fund_raised'] = ($singleCampaign->fund_raised_so_far!=' ')?$singleCampaign->fund_raised_so_far:' ';
									$keys['description'] = ($singleCampaign->summary!=' ')?$singleCampaign->summary:' ';
									$keys['due_date'] = ($singleCampaign->due_date!=' ')?$singleCampaign->due_date:' ';
									
									$finalCampaigns[] = $keys;
								}
								
								if(!empty($finalCampaigns)):
									$result['campaigns'] = $finalCampaigns;
								else:
									$result['campaigns'] = [];
								endif;
								
								 
							}else{
								$result['TotalItems'] = '0';
								$result['campaigns'] = [];
								
							}
							
							$result['code'] = 200;
							echo json_encode($result);
							
					break;
					
				default:
							$result['code'] = 404;
							$result['TotalItems'] = '0';
							$result['campaigns'] = [];
							echo json_encode($result);
				
			endswitch;
		   
	}



	/**
	 * time periods etc  
	 *
	 * @return time periods   
	 */
	public function timePeriods(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$DonationTimeperiodsTable = $this->loadModel('DonationTimeperiods');
		
		$DonationTimeperiods = $DonationTimeperiodsTable->find('all')->toArray();
		
		if(!empty($DonationTimeperiods)):
			
			foreach($DonationTimeperiods as $singleDonationTimeperiod){
				 
					$keys['id'] = ($singleDonationTimeperiod->id!='')?$singleDonationTimeperiod->id:' ';
					
					if($singleDonationTimeperiod->timeperiod!=' '):
						$key['timeperiod'] = $singleDonationTimeperiod->timeperiod;
					else:
						$key['timeperiod'] = "";
					endif;
					
					if($singleDonationTimeperiod->type!=' '):
						$key['type'] = $singleDonationTimeperiod->type;
					else:
						$key['type'] = "";
					endif;
					
					$name = $key['timeperiod'].' '.$key['type'];
					
					$keys['name'] = $name;
					
					$finalKeywords[] = $keys;
				}
				
			$result['DonationTimeperiods'] = $finalKeywords;
		
		else:
		
			$result['DonationTimeperiods'] = [];
		
		endif;
		
		$result['code'] = 200;
		echo json_encode($result);				   
	}
	
	/*
	 *
	 *method for committing a campaign
	 *
	 */
	public function commitCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		
		$commitCampaignTable = TableRegistry::get('CampaignDonations');
			$this->loadModel('Campaigns');
			
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$commitCampaign = $commitCampaignTable->newEntity();
				
				$commitCampaign->user_id = $this->request->data['user_id'];
				$commitCampaign->campaign_id = $this->request->data['campaign_id'];
				$commitCampaign->amount = $this->request->data['target_amount'];
				$commitCampaign->time_period = $this->request->data['time_period'];
				
				if($this->request->data['contribution_public']=='true'):
					$commitCampaign->status = '1';
				else:
					$commitCampaign->status = '0';
				endif;
				
				if($commitCampaignTable->save($commitCampaign)){
					 
					//Save Feeds
                	$this->Feeds->saveCampaignFeeds($this->request->data['user_id'],'feeds_campaign_commited',$this->request->data['campaign_id']);

					 $amount = ($this->request->data['target_amount']!='')?$this->request->data['target_amount']:'0';
					 
					 $query = $this->Campaigns->query();
						
					$epr = 'fund_raised_so_far = fund_raised_so_far + '.$amount;
						
					 $query->update()
						  ->set(
								$query->newExpr($epr)
								)
						  ->where([
								   'id' => $this->request->data['campaign_id']])
						  ->execute();
						    
					$result['code']=200;
					$result['message']='successfully committed';
					echo json_encode($result);
					
			//sending push notification to the user who has been getting followed
					$ccN =$this->Contractor->contractorName($this->request->data['user_id']); 
					$message = trim($ccN)." has committed $".$amount." to your campaign".$this->Contractor->campaignName($this->request->data['campaign_id']);
					
					$campaign_owner = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$this->request->data['campaign_id']]])
															->select(['user_id','campaigns_name'])
															->first();
					
					if(!empty($campaign_owner)&&($campaign_owner['user_id']!='')){
						
						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$campaign_owner['user_id']]])
											->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							
							$blankArray=[];
							foreach($tokens as $single_token):
								
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                    			array_push($blankArray,$single_token['access_token']);
							endforeach;
							
						endif;
						 
						if(!empty($finalAndroidTokens)):
							
							$values = ['campaign_id'=>$this->request->data['campaign_id'],
									   'campaign_name'=>$campaign_owner['campaigns_name']];
							
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Commit_Campaign');
							
							//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($this->request->data['campaign_id'])]);
							//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Commit_Campaign'," has committed $".$amount." to your campaign <strong>".$this->Contractor->campaignName($this->request->data['campaign_id'])."</strong>",$link,json_encode($values));
						
						endif;
						if(!empty($finalIosTokens)):
							
							$values = ['campaign_id'=>$this->request->data['campaign_id'],
									   'campaign_name'=>$campaign_owner['campaigns_name']];
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Commit_Campaign');
							
							//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($this->request->data['campaign_id'])]);
							//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Commit_Campaign'," has committed $".$amount." to your campaign <strong>".$this->Contractor->campaignName($this->request->data['campaign_id'])."</strong>",$link,json_encode($values));
							
						endif;
						
						//saving the notification
								
						$values = ['campaign_id'=>$this->request->data['campaign_id'],
									   'campaign_name'=>$campaign_owner['campaigns_name']];
						
						$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($this->request->data['campaign_id'])]);
						
						$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Commit_Campaign'," has committed $".$amount." to your campaign <strong>".$this->Contractor->campaignName($this->request->data['campaign_id'])."</strong>",$link,json_encode($values));
								
					}
					 
				}else{
					$result['code']=404;
					$result['message']='not committed';
					echo json_encode($result);
				}
				
			}
			
	}
	
   /*
	*
	*method for  adding a campaign
	*
	*/
	public function addCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$CampaignTable = TableRegistry::get('Campaigns');
			
			if($this->request->is('post')){
				/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				
				if(!empty($this->request->data['campaign_image']) && ($this->request->data['campaign_image']['error'] == 0)){
				 
					$data = [];
					$data = $this->request->data['campaign_image']; 
					$upload = $this->Multiupload->campaignImageApi($data);
						
						if($upload=='1' || $upload=='0'){
							
							$imageErrors = 'Campaign Image is Invalid';
							$this->request->data['campaign_image'] = '';
							
						}else{
							
							$this->request->data['campaign_image'] = $upload;
							
						}
						
				}else{
						$this->request->data['campaign_image'] = '';
				}
				
				if(!empty($this->request->data['docs'])):
					$files = $this->Multiupload->MultiuploadApi($this->request->data['docs']);
				else:
					$files = '';
				endif;
				
				if(!empty($files['errors'])):
					$errors = $files['errors'];
				elseif(!empty($files['imgArray'])):
					$errors = [];
					$imgArray = $files['imgArray'];
					
					$finalFilesArray = [];
					if(!empty($imgArray)):
						foreach($imgArray as $key=>$singleFile){
							
							$finalFiles['file_type'] = pathinfo($singleFile['name'], PATHINFO_EXTENSION);
							$finalFiles['name'] = $singleFile['name'];
							
							$finalFilesArray[] = $finalFiles;
						}
						 
						$this->request->data['file_path'] = json_encode($finalFilesArray);
						
					else:
						 
						$this->request->data['file_path'] = json_encode($finalFilesArray);
						
					endif;
					
				endif;
				 
				unset($this->request->data['docs']);

				// Custom date format for due date compare
				$time = strtotime($this->request->data['due_date']);
            	$newformat = date('Y-m-d',$time);
            	//$this->request->data['comp_due_date']=$newformat; die;

				//echo 'here starts my debugging';
				 //pr($this->request->data['file_path']);die('---');
				$campaignTableData = $CampaignTable->newEntity($this->request->data);
				$campaignTableData->comp_due_date=$newformat;
				if($campaignTableData->errors() || !empty($errors) || isset($imageErrors) ){
					
				//here we are getting the errors while validating the data
					
					if($campaignTableData->errors()){
						$errors = $campaignTableData->errors();
					
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
					}
					
					if(!empty($errors)){
						foreach($errors as $errorKey=>$errorMessage){ 
								$finalErrors[$errorKey] = $errorMessage;
							}
					}
					
					if(isset($imageErrors) && ($imageErrors!='')){
						 
						$finalErrors['campaign_image'] = $imageErrors;
						
					} 
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
					
				}else{
				  //$campaignTableData->campaign_keywords=$this->request->data['campaign_keywords'];	
				 //pr($campaignTableData); die;	 
					$saveResult= $CampaignTable->save($campaignTableData);
					
					//$image  = $this->Contractor->contractorImage($this->request->data['user_id']);
					
					//Save Feeds
                    $this->Feeds->saveCampaignFeeds($this->request->data['user_id'],'feeds_campaign_added',$saveResult->id);

					$result['code'] = 200;
					$result['message'] = 'Successfully added';
					echo json_encode($result);
					
				}
				
			}
		 		  
	}
	public function addCampaignCopy(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$CampaignTable = TableRegistry::get('Campaigns');
			
			if($this->request->is('post')){
				 
				if(!empty($this->request->data['campaign_image']) && ($this->request->data['campaign_image']['error'] == 0)){
				 
					$data = [];
					$data = $this->request->data['campaign_image']; 
					$upload = $this->Multiupload->campaignImageApi($data);
						
						if($upload=='1' || $upload=='0'){
							
							$imageErrors = 'Campaign Image is Invalid';
							$this->request->data['campaign_image'] = '';
							
						}else{
							
							$this->request->data['campaign_image'] = $upload;
							
						}
						
				}else{
						$this->request->data['campaign_image'] = '';
				}
				
				if(!empty($this->request->data['docs'])):
					$files = $this->Multiupload->MultiuploadApi($this->request->data['docs']);
				else:
					$files = '';
				endif;
				
				if(!empty($files['errors'])):
					$errors = $files['errors'];
				elseif(!empty($files['imgArray'])):
					$errors = [];
					$imgArray = $files['imgArray'];
					
					$finalFilesArray = [];
					if(!empty($imgArray)):
						foreach($imgArray as $key=>$singleFile){
							
							$finalFiles['file_type'] = pathinfo($singleFile['name'], PATHINFO_EXTENSION);
							$finalFiles['name'] = $singleFile['name'];
							
							$finalFilesArray[] = $finalFiles;
						}
						 
						$this->request->data['file_path'] = json_encode($finalFilesArray);
						
					else:
						 
						$this->request->data['file_path'] = json_encode($finalFilesArray);
						
					endif;
					
				endif;
				 
				unset($this->request->data['docs']);
				echo 'here starts my debugging';
				 pr($this->request->data['file_path']);die('---');
				$campaignTableData = $CampaignTable->newEntity($this->request->data);
				
				if($campaignTableData->errors() || !empty($errors) || isset($imageErrors) ){
					
				//here we are getting the errors while validating the data
					
					if($campaignTableData->errors()){
						$errors = $campaignTableData->errors();
					
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
					}
					
					if(!empty($errors)){
						foreach($errors as $errorKey=>$errorMessage){ 
								$finalErrors[$errorKey] = $errorMessage;
							}
					}
					
					if(isset($imageErrors) && ($imageErrors!='')){
						 
						$finalErrors['campaign_image'] = $imageErrors;
						
					} 
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
					
				}else{
					 
					$CampaignTable->save($campaignTableData);
					
					//$image  = $this->Contractor->contractorImage($this->request->data['user_id']);
					
					$result['code'] = 200;
					$result['message'] = 'Successfully Updated';
					echo json_encode($result);
					
				}
				
			}
		 		  
	}
	/*
	*
	*method for  adding a campaign
	*
	*/
	public function editCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$CampaignTable = TableRegistry::get('Campaigns');
			
			if($this->request->is('post')){
				
				if(!empty($this->request->data['campaign_image']) && ($this->request->data['campaign_image']['error'] == 0)){
				 
					$data = [];
					$data = $this->request->data['campaign_image']; 
					  $upload = $this->Multiupload->campaignImageApi($data);  
						
						$this->request->data['campaign_image'] = $upload;
						
						/*if($upload=='1' || $upload=='0'){
							
							$imageErrors = 'Campaign Image is Invalid';
							$this->request->data['campaign_image'] = '';
							
						}else{
							
							$this->request->data['campaign_image'] = $upload;
							
						}*/
						
				}else{
						$this->request->data['campaign_image'] = '';
				}
				
				if(!empty($this->request->data['docs'])):
					$files = $this->Multiupload->MultiuploadApi($this->request->data['docs']);
				else:
					$files = '';
				endif;
			    
				if(!empty($files['errors'])):
					$errors = $files['errors'];
				
				elseif(!empty($files['imgArray'])):
					
					$errors = [];
					$imgArray = $files['imgArray'];
					
					$finalFilesArray = [];
					if(!empty($imgArray)):
						foreach($imgArray as $key=>$singleFile){
							
							$finalFiles['file_type'] = pathinfo($singleFile['name'], PATHINFO_EXTENSION);
							$finalFiles['name'] = $singleFile['name'];
							
							$finalFilesArray[] = $finalFiles;
						}
						$this->request->data['file_path'] = json_encode($finalFilesArray);
						
					else:
						
						$this->request->data['file_path'] = '';
						
					endif;
					
				endif;
				
			//unset docs[] index from the posted data
			
				unset($this->request->data['docs']);
			
			//getting the old data of campaign
			
				$CampaignTableGet = $CampaignTable->get($this->request->data['id']);
				
			//if new image not uploaded than unset its index
				 
				if($this->request->data['campaign_image']==''):
					
					unset($this->request->data['campaign_image']);
					
				elseif($CampaignTableGet->campaign_image!='' && file_exists('img/campaign/'.$CampaignTableGet->campaign_image)):
					 
					unlink('img/campaign/'.$CampaignTableGet->campaign_image);
					
				endif;
			 
			//if deleted files list is present then remove it from the DB and unlink them also
				
				if(isset($this->request->data['deleted_files'])&&($this->request->data['deleted_files']!='')):
					   $deletedFilesArray = explode(',',$this->request->data['deleted_files']);
					    
					   foreach($deletedFilesArray as $singleDeleteImage){
							if($singleDeleteImage!='' && file_exists('img/campaign/'.$singleDeleteImage)){
								unlink('img/campaign/'.$singleDeleteImage);
							}
					   }
					   
					   $oldDocsArray = json_decode($CampaignTableGet->file_path);
					   
						if(!empty($oldDocsArray)):
							 $i=0;
							 foreach($oldDocsArray as $singleDoc){
								  if(in_array($singleDoc->name,$deletedFilesArray)){
									  unset($oldDocsArray[$i]);
								  }
								  $i++;
							 }
						endif;
				
				else:
					
					//$oldDocsArray = json_decode($CampaignTableGet->file_path);
					//pr($oldDocsArray);die('===========');
					
					$x = $CampaignTableGet->file_path;
					$oldDocsArray = json_decode($x);  
					
				endif;
				 //pr($oldDocsArray);
				if(!empty($oldDocsArray)){
					
					if(isset($this->request->data['file_path'])&&($this->request->data['file_path']!='')){
						$decodedNewDocs = json_decode($this->request->data['file_path']);
						 
						$finalDocsArray = array_merge($oldDocsArray,$decodedNewDocs);
						
						$this->request->data['file_path'] = json_encode($finalDocsArray);
					}else{
						
						if(!empty($oldDocsArray)):
							foreach($oldDocsArray as $singleOld){
								$oldDocsArrayLatest[] = (array)$singleOld;
							}
							
							$this->request->data['file_path'] = json_encode($oldDocsArrayLatest);
						else:
							$this->request->data['file_path'] = '';
						endif;
						
					}
					
				}else{
					
					if(isset($this->request->data['file_path'])&&($this->request->data['file_path']!='')){
						$this->request->data['file_path'] = $this->request->data['file_path'];
					}else{
						$this->request->data['file_path'] = '';
					}
					 
				}

				// Custom date format for due date compare
				$time = strtotime($this->request->data['due_date']);
            	$newformat = date('Y-m-d',$time);
            	//$this->request->data['comp_due_date']=$newformat;
			    
				$campaignTableData = $CampaignTable->patchEntity($CampaignTableGet,$this->request->data);
				$campaignTableData->comp_due_date=$newformat;

				if($campaignTableData->errors() || !empty($errors) || isset($imageErrors) ){
					
				//here we are getting the errors while validating the data
					
					if($campaignTableData->errors()){
						$errors = $campaignTableData->errors();
					
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
					}
					
					if(!empty($errors)){
						foreach($errors as $errorKey=>$errorMessage){ 
								$finalErrors[$errorKey] = $errorMessage;
							}
					}
					
					if(isset($imageErrors) && ($imageErrors!='')){
						 
						$finalErrors['campaign_image'] = $imageErrors;
						
					} 
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
					
				}else{
					 
					if($CampaignTable->save($campaignTableData)){
						$result['code'] = 200;
						$result['message'] = 'Successfully Updated';
						echo json_encode($result);
					}else{
						$result['code'] = 404;
						$result['message'] = 'Not Updated';
						echo json_encode($result);
					}
					
					//$image  = $this->Contractor->contractorImage($this->request->data['user_id']);
					
					
					
				}
				
			}
		 		  
	}
	
	/*
	 *
	 *single campaign list
	 *
	 */
	 
	public function singleCampaignDetail(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ContractorProfessionalsTable = $this->loadModel('ContractorProfessionals');
		$CampaignsTable = $this->loadModel('Campaigns');
		$CampaignFollowersTable = $this->loadModel('CampaignFollowers');
		$CampaignDonationsTable = $this->loadModel('CampaignDonations');
			  	
			//getting the commited campaigns
				
				if($_REQUEST['user_id']!='' && $_REQUEST['campaign_id']!=''):
						
						$campaignDetails = $this->Campaigns->find('all',
																['conditions'=>['Campaigns.id'=>$_REQUEST['campaign_id']]]
														 )
						->contain(['Startups'])->first();
						
						if(!empty($campaignDetails)):
							  
									$keys['campaign_id'] = ($campaignDetails->id!='')?$campaignDetails->id:' ';
									$keys['campaigns_name'] = ($campaignDetails->campaigns_name!=' ')?$campaignDetails->campaigns_name:' ';
									$keys['startup_id'] = (isset($campaignDetails['startup']->id)&&($campaignDetails['startup']->id!=' '))?$campaignDetails['startup']->id:' ';
									$keys['startup_name'] = (isset($campaignDetails['startup']->name)&&($campaignDetails['startup']->name!=' '))?$campaignDetails['startup']->name:' ';
									$keys['due_date'] = (isset($campaignDetails->due_date))?$campaignDetails->due_date:' ';
									$keys['target_amount'] = (isset($campaignDetails->target_amount))?$campaignDetails->target_amount:' ';
									$keys['fund_raised_so_far'] = ($campaignDetails->fund_raised_so_far!=' ')?$campaignDetails->fund_raised_so_far:' ';
									$keys['summary'] = ($campaignDetails->summary!=' ')?$campaignDetails->summary:' ';
									$keys['campaign_image'] = ($campaignDetails->campaign_image!=' ')?'img/campaign/'.$campaignDetails->campaign_image:' ';
									 
									 if($campaignDetails->keywords!=''):
									
										$userKeywords = $this->Contractor->campaignTargetKeywords($campaignDetails->keywords);
										 
										if(!empty($userKeywords)):
										
											foreach($userKeywords as $key=>$value){
												$key1['id'] = ($key!='')?$key:' ';
												$key1['name'] = ($value!=' ')?$value:' ';
												 
												$finalKeywords[] = $key1;
												 
											}
											 
											$keys['keywords'] = $finalKeywords;
										endif;
									else:
											$keys['keywords'] = [];
									endif;


									if($campaignDetails->campaign_keywords!=''):
									
										$camKeywords = $this->Contractor->campaignKeywords($campaignDetails->campaign_keywords);
										 
										if(!empty($camKeywords)):
										
											foreach($camKeywords as $key=>$value){
												$key1['id'] = ($key!='')?$key:' ';
												$key1['name'] = ($value!=' ')?$value:' ';
												 
												$finalCampKeywords[] = $key1;
												 
											}
											 
											$keys['campaign_keywords'] = $finalCampKeywords;
										endif;
									else:
											$keys['campaign_keywords'] = [];
									endif;
						
									if($campaignDetails->file_path!=''):
										
										$filesArray = json_decode($campaignDetails->file_path);
										
										if(!empty($filesArray)):
											 
											foreach($filesArray as $singleFile):
												
												if($singleFile->file_type=='mp3'
												   || $singleFile->file_type=='aiff'
												   || $singleFile->file_type=='mpeg-4'
												   || $singleFile->file_type=='wav'
												   || $singleFile->file_type=='aac'
												   || $singleFile->file_type=='m4a'):
													
													$single_file['file'] = 'img/campaign/'.$singleFile->name;
													
													$files['mp3'][] = $single_file;
													
												elseif($singleFile->file_type=='mp4'
												   || $singleFile->file_type=='mov'
												   || $singleFile->file_type=='m4v'):
													
													$single_file['file'] = 'img/campaign/'.$singleFile->name;
													
													$files['mp4'][] = $single_file;
													
													//$files['mp4'][] = 'img/campaign/'.$singleFile->name;
													
												else:
													
													$single_file['file'] = 'img/campaign/'.$singleFile->name;
													
													$files['docs'][] = $single_file;
													
													//$files['docs'][] = 'img/campaign/'.$singleFile->name;
													
												endif;
												 
												
											endforeach;
											 
												if(!isset($files['docs'])):
											        $files['docs'] = [];
												endif;
										
												if(!isset($files['mp3'])):
													$files['mp3'] = [];
												endif;
										
												if(!isset($files['mp4'])):
													$files['mp4'] = [];
												endif;
											 
										else:
												
												$files['mp3'] = [];
												$files['mp4'] = [];
												$files['docs'] = [];
												
										endif;
										
									else:
										
										$files['mp3'] = [];
										$files['mp4'] = [];
										$files['docs'] = [];
										
									endif;
									 
									$keys['documents_list'] = $files['docs'];
									$keys['audios_list'] = $files['mp3'];
									$keys['videos_list'] = $files['mp4'];
									$keys['is_follwed_by_user'] = $this->Contractor->isFollowing($_REQUEST['user_id'],$_REQUEST['campaign_id']);
									$keys['is_commited_by_user'] = $this->Contractor->isCommit($_REQUEST['user_id'],$_REQUEST['campaign_id']);
							 
									$result['code'] = 200;
									$result['campaigndetail'] = $keys;
						else:
									$result['code'] = 404;
									$result['campaigndetail'] = [];
						endif;
				 
				else:
									$result['code'] = 404;
									$result['campaigndetail'] = [];
				endif;
				
				echo json_encode($result);
				 
				  
	}

	/*
	 *
	 *method for uncommitting a campaign
	 *
	 */
	public function uncommitCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	 	$this->loadModel('UserTokens');
		
	 	$commitCampaignTable = TableRegistry::get('CampaignDonations');
			$this->loadModel('Campaigns');
			
			if($_REQUEST['user_id']!=''&&$_REQUEST['campaign_id']!=''){
				
				
				$campaignDetail = $commitCampaignTable->find('all',['conditions'=>['user_id'=>$_REQUEST['user_id'], 'campaign_id'=>$_REQUEST['campaign_id']]])
														->select(['amount'])
														->first();
														
														
				if(!empty($campaignDetail)&&($campaignDetail['amount']!='')):
					$amount = (float)$campaignDetail['amount'];
				else:
					$amount = '0';
				endif;
				 
				if($commitCampaignTable->deleteAll(['user_id' => $_REQUEST['user_id'],
									 'campaign_id'=>$_REQUEST['campaign_id']])){
					
				// $epr = 'fund_raised_so_far = fund_raised_so_far - '.$amount;
					
					$fun_so_far = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$_REQUEST['campaign_id']]])
									->select(['fund_raised_so_far'])
									->first();
					
					$fund_raised_so_far = $fun_so_far['fund_raised_so_far'];
					
					
					$final_raised = $fund_raised_so_far - $amount;
					
					$query = $this->Campaigns->query();

					if($query->update()
							->set(['fund_raised_so_far'=>$final_raised
								   ])
							->where(['id' => $_REQUEST['campaign_id']])
							->execute()){
						
						$result['code']=200;
						$result['message']='successfully uncommited';
						echo json_encode($result);
						
					}
					
					
					
					
			//sending push notification to the user who has been getting followed
					$ccN =$this->Contractor->contractorName($_REQUEST['user_id']);
					$message = trim($ccN)." has uncommitted from your campaign ".$this->Contractor->campaignName($_REQUEST['campaign_id']);
					
					$campaign_owner = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$_REQUEST['campaign_id']]])
															->select(['user_id','campaigns_name'])
															->first();
                                                            
					if(!empty($campaign_owner)&&($campaign_owner['user_id']!='')){
					
					$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$campaign_owner['user_id']]])
											->select(['access_token','device_type']);
					$finalAndroidTokens = [];
					$finalIosTokens = [];
					if($userToken->toArray()):
						
						$tokens = $userToken->toArray();

						$blankArray=[];
							foreach($tokens as $single_token):
								
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                    			array_push($blankArray,$single_token['access_token']);
							endforeach;
						
						/*foreach($tokens as $single_token):
							
							if($single_token['device_type']=='android'):
								$finalAndroidTokens[] = $single_token['access_token'];
							else:
								//$finalIosTokens[] = $single_token['access_token'];
								$length = strlen($single_token['access_token']);
	                      			if($length >60){
	                        			$finalIosTokens[] = $single_token['access_token'];
	                        		}
							endif;   
							
						endforeach;*/
						
					endif;
					
					 $values = ['campaign_id'=>$_REQUEST['campaign_id'],
							   'campaign_name'=>$campaign_owner['campaigns_name']]; 
					
					if(!empty($finalAndroidTokens)):
						$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Uncommit_Campaign');
						
						//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						//$this->Contractor->saveNotification($_REQUEST['user_id'],$campaign_owner['user_id'],'Uncommit_Campaign'," has uncommitted from your campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id'])."</strong>",$link,json_encode($values));
					
					endif;
					if(!empty($finalIosTokens)):
						$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Uncommit_Campaign');
						
						//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						//$this->Contractor->saveNotification($_REQUEST['user_id'],$campaign_owner['user_id'],'Uncommit_Campaign'," has uncommitted from your campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id'])."</strong>",$link,json_encode($values));
					
					endif;
					
					//saving the notification
								
						$values = ['campaign_id'=>$_REQUEST['campaign_id'],
							   'campaign_name'=>$campaign_owner['campaigns_name']];
						
						$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						
						$this->Contractor->saveNotification($_REQUEST['user_id'],$campaign_owner['user_id'],'Uncommit_Campaign'," has uncommitted from your campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id'])."</strong>",$link,json_encode($values));
						
					}
					
				}else{
					$result['code']=404;
					$result['message']='can"t uncommit';
					echo json_encode($result);
				}
				
			}else{
				$result['code']=404;
					$result['message']='can"t uncommit';
					echo json_encode($result);
		 		  
			}
	}
	
	/*
	 *
	 *method for follow a campaign
	 *
	 */
	public function followCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		$this->loadModel('Campaigns');
		$this->loadModel('CampaignFollowers');
		$followCampaignTable = TableRegistry::get('CampaignFollowers');
			
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				 
				$followCampaign = $followCampaignTable->newEntity();
				 
				$followCampaign->user_id = $this->request->data['user_id'];
				$followCampaign->campaign_id = $this->request->data['campaign_id'];
				
				if($this->request->data['status']=='true'):
					 
					if($followCampaignTable->save($followCampaign)){
						
						//Save Feeds
                    	$this->Feeds->saveCampaignFeeds($this->request->data['user_id'],'feeds_campaign_following',$this->request->data['campaign_id']);

						$result['code']=200;
						$result['message']='successfully followed';
						echo json_encode($result);
						
					//sending push notification to the user who has been getting followed
						$ccN = $this->Contractor->contractorName($this->request->data['user_id']);
						$message = trim($ccN)." has started following your campaign: ".$this->Contractor->campaignName($this->request->data['campaign_id']);
						
						$campaign_owner = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$this->request->data['campaign_id']]])
															->select(['user_id'])
															->first();
						
						if(!empty($campaign_owner)&&($campaign_owner['user_id']!='')){
						
								$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$campaign_owner['user_id']]])
														->select(['access_token','device_type']);
								$finalAndroidTokens = [];
								$finalIosTokens = [];
								
								if($userToken->toArray()):
									
									$tokens = $userToken->toArray();

									$blankArray=[];
									foreach($tokens as $single_token):
										
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                    			array_push($blankArray,$single_token['access_token']);
									endforeach;
									
									/*foreach($tokens as $single_token):
										
										if($single_token['access_token']!=''):
										
											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
											endif;
											
										endif;
										
									endforeach;*/
									
								endif;
								
								$values = [];
								if(!empty($finalAndroidTokens)):
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Follow_Campaign');
									
									//$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
									
									//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Follow_Campaign',' has started following your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).' </strong>.',$link,json_encode((object)$values));
									
								endif;
								if(!empty($finalIosTokens)):
									
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Follow_Campaign');
									
									//$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
									
									//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Follow_Campaign',' has started following your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).' </strong>.',$link,json_encode((object)$values));
									
								endif;
								
								//saving the notification
								
								$values = [];
								$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
								
								$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Follow_Campaign',' has started following your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).' </strong>.',$link,json_encode((object)$values));
								
						}
						
						
					}else{
						
						$result['code']=404;
						$result['message']='can"t follow';
						echo json_encode($result);
						
					}
				
				else:
					  
					/*if($followCampaignTable->deleteAll(['user_id' => $this->request->data['user_id'],
														'campaign_id'=>$this->request->data['campaign_id']])){*/
				 
						$campFollowInfo = $this->CampaignFollowers->find('all',['user_id' => $this->request->data['user_id'],'campaign_id'=>$this->request->data['campaign_id']])
						->first();
						 
					if(!empty($campFollowInfo)){
						
						$entity = $this->CampaignFollowers->get($campFollowInfo['id']);
						 
						
						$rsl= $this->CampaignFollowers->deleteAll(['user_id' => $this->request->data['user_id'],'campaign_id'=>$this->request->data['campaign_id']]);
						
						//if($this->CampaignFollowers->delete($entity)){
						if($rsl){
						//sending push notification to the user who has been getting followed
						$ccN = $this->Contractor->contractorName($this->request->data['user_id']);
						$message = trim($ccN)." has un-followed your campaign ".$this->Contractor->campaignName($this->request->data['campaign_id']);
						
						$campaign_owner = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$this->request->data['campaign_id']]])
															->select(['user_id'])
															->first();
						
								if(!empty($campaign_owner)&&($campaign_owner['user_id']!='')){
								
								$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$campaign_owner['user_id']]])
														->select(['access_token','device_type']);
								$finalAndroidTokens = [];
								$finalIosTokens = [];
								if($userToken->toArray()):
									
									$tokens = $userToken->toArray();

									$blankArray=[];
									foreach($tokens as $single_token):
										
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                    			array_push($blankArray,$single_token['access_token']);
									endforeach;
									
									/*foreach($tokens as $single_token):
										
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
										endif;
										
									endforeach;*/
									
								endif; 
								$values = [];
								
								if(!empty($finalAndroidTokens)):
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'UnFollow_Campaign');
									
									//$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
									
									//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'UnFollow_Campaign',' has un-followed your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).'</strong>',$link,json_encode((object)$values));
									
								endif;
								if(!empty($finalIosTokens)):
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'UnFollow_Campaign');
									
									//$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
									
									//$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'UnFollow_Campaign',' has un-followed your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).'</strong>',$link,json_encode((object)$values));
									
								endif;
									
									//saving the notification
								
								$values = [];
								$link= Router::url(['controller' => 'Campaigns', 'action' => 'view',base64_encode($this->request->data['campaign_id'])]);
								
								$this->Contractor->saveNotification($this->request->data['user_id'],$campaign_owner['user_id'],'Follow_Campaign',' has started following your campaign <strong>'.$this->Contractor->campaignName($this->request->data['campaign_id']).' </strong>.',$link,json_encode((object)$values));
								
								
								}
								
								
								$result['code']=200;
								$result['message']='successfully unfollowed';
								echo json_encode($result);
								
							}else{
								$result['code']=404;
								$result['message']='can"t unfollow';
								echo json_encode($result);
							}
						
					}else{
						
						$result['code']=404;
						$result['message']='can"t unfollow';
						echo json_encode($result);
						
					}
					
				endif;
				
			}
		 		  
	}


	/*
	 *
	 *single campaign list
	 *
	 */
	 
	public function campaignContributorsList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		 
		$CampaignsTable = $this->loadModel('Campaigns'); 
		$CampaignDonationsTable = $this->loadModel('CampaignDonations');
		$CampaignDonationsTable = $this->loadModel('Users');
		
			//getting the commited contractors list
				
				if($_REQUEST['campaign_id']!=''):
				
					$campaignContractorDetails = $this->CampaignDonations->find('all',
															['conditions'=>['CampaignDonations.campaign_id'=>$_REQUEST['campaign_id']]]
													 )->select(['user_id','amount','status']);
					
					if($campaignContractorDetails->toArray()):
						
						$userIDs = $campaignContractorDetails->toArray();
								
								foreach($userIDs as $userID):
								
									if($userID->user_id !=''):
										$AllUserIDs[] = $userID->user_id;
										
										$donationsDetails['amount'] = $userID->amount;
										$donationsDetails['status'] = $userID->status;
										
										$finalDonationlist[$userID->user_id] = $donationsDetails;
										
									endif;
								endforeach;
								 
								if(!empty($AllUserIDs)):
									
									$userDetails = $this->Users->find('all',
															['conditions'=>['Users.id IN'=>$AllUserIDs]]
													 )->contain(['ContractorBasics']);
									
									if($userDetails->toArray()):
										
										$AllUserDetailsList = $userDetails->toArray();
										
										foreach($AllUserDetailsList as $singleUser):
											 
											if(!empty($singleUser['contractor_basic'])){
													  
														$first_name = ($singleUser['contractor_basic']->first_name!='')?$singleUser['contractor_basic']->first_name:' ';
														$last_name = ($singleUser['contractor_basic']->last_name!='')?$singleUser['contractor_basic']->last_name:' ';
														
														$basicInfo['contractor_name'] = $first_name.' '.$last_name;
														
														$basicInfo['contractor_id'] = ($singleUser['contractor_basic']->user_id!='')?$singleUser['contractor_basic']->user_id:' ';
														
														$image  = $this->Contractor->contractorImage($singleUser['contractor_basic']->user_id);
														$basicInfo['contractor_image'] = $image;
														
														$basicInfo['contractor_contribution'] = (isset($finalDonationlist[$singleUser->id]['amount'])&&($finalDonationlist[$singleUser->id]['amount']!=''))?$finalDonationlist[$singleUser->id]['amount']:' ';
														
														$basicInfo['status'] = (isset($finalDonationlist[$singleUser->id]['status']))?$finalDonationlist[$singleUser->id]['status']:' ';
														
														  
												}else{
														 
														$first_name = ($singleUser->first_name!='')?$singleUser->first_name:' ';
														$last_name = ($singleUser->last_name!='')?$singleUser->last_name:' ';
														
														$basicInfo['contractor_name'] = $first_name.' '.$last_name;
														
														$basicInfo['contractor_id'] = ($singleUser->id!='')?$singleUser->id:' ';
														
														$image  = $this->Contractor->contractorImage($singleUser->user_id);
														$basicInfo['contractor_image'] = $image;
														
														$basicInfo['contractor_contribution'] = (isset($finalDonationlist[$singleUser->id]['amount'])&&($finalDonationlist[$singleUser->id]['amount']!=''))?$finalDonationlist[$singleUser->id]['amount']:' ';
														
														$basicInfo['status'] = (isset($finalDonationlist[$singleUser->id]['status']))?$finalDonationlist[$singleUser->id]['status']:' ';
														
														
												}
												
												$finalContributorList[] = $basicInfo;
												
										endforeach;
										
										if(!empty($finalContributorList)):
										$result['code'] = 200;
											$result['campaignContributorsList'] = $finalContributorList;
										else:
										$result['code'] = 404;
											$result['campaignContributorsList'] = [];
										endif;
										
									else:
									$result['code'] = 404;
										$result['campaignContributorsList'] = [];
									endif;
									
								else:
									$result['code'] = 404;
									$result['campaignContributorsList'] = [];
								endif;
								
								
					else:
								$result['code'] = 404;
								$result['campaignContributorsList'] = [];
					endif;
				 
				else:
									$result['code'] = 404;
									$result['campaignContributorsList'] = [];
				endif;
				
				echo json_encode($result);
				
	}
	
	 
	 /**
	* startups list 0-->"Current Startups", 1-->"Completed Startups", 2-->"Search Startups", 3-->"My Startups"
	*
	* @return   startups list 0-->"Current Startups", 1-->"Completed Startups", 2-->"Search Startups", 3-->"My Startups"  
	*/
	public function startupsList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			
			$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Startups.id' => 'asc'
							]
						];
			
			$user_id = $_REQUEST['user_id'];
			$startup_type = $_REQUEST['startup_type'];
			
			$search_text = (isset($_REQUEST['search_text'])&&($_REQUEST['search_text']!=''))?$_REQUEST['search_text']:'';
			
			$result['TotalItems'] = '0';
			
			switch($startup_type):
			
			//Getting current startups
				
				case '0':
					
					//getting the curent startups of a user
						
						$teamStartupIDs = $StartupTeamsTable->find('all',
												['conditions'=>['StartupTeams.user_id'=>$user_id,
																'StartupTeams.approved'=>'1']])
												->select(['id','startup_id']);
						
						if($teamStartupIDs->toArray()):
							
							$startupsIDsArray = $teamStartupIDs->toArray();
							
							foreach($startupsIDsArray as $singleStartupsIDsObject):
								if($singleStartupsIDsObject->startup_id!=''):
									$finalIDs[] = $singleStartupsIDsObject->startup_id;
								    $finalTeamIds[] = $singleStartupsIDsObject->id;
								endif;
							endforeach;
							
							if(!empty($finalIDs)):
								
						//getting the campaigns list
							
							$query = $this->Startups->find('all')
													->where(['id IN'=>$finalIDs]);
									
							$result['TotalItems'] = $query->count();
							
							$Startups = $this->Paginator->paginate(
																	$this->Startups->find('all')
																	->where(['Startups.id IN'=>$finalIDs])
																	, $config);
							
							if(!empty($Startups)){
									$vv=0;
									foreach($Startups as $singleStartup){

										$keys['startup_team_id']=$finalTeamIds[$vv];
										
										$keys['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
										$keys['entrepreneur_id'] = ($singleStartup->user_id!=' ')?$singleStartup->user_id:' ';
										$keys['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
										$keys['startup_name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
										$keys['startup_desc'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
										
										if($_REQUEST['user_id']==$singleStartup->user_id):
											$keys['is_entrepreneur'] = 'true';
											$keys['is_contractor'] = 'false';
										else:
											$keys['is_entrepreneur'] = 'false';
											$keys['is_contractor'] = 'true';
										endif;
										
										$finalStartups[] = $keys;
										$vv++;
									}
									
									if(!empty($finalStartups)):
										$result['startups'] = $finalStartups;
									else:
										$result['startups'] = [];
									endif;
									
							   }else{
										$result['startups'] = [];
							   }
								
							else:
								$result['startups'] = [];
							endif;
							 
						else:
								$result['startups'] = [];
						endif;
						
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
					
				case '1':
					
					//getting the completed startups of a user i.e removed or sudpended
						$teamStartupIDs = $this->Paginator->paginate( $StartupTeamsTable->find('all',
												['conditions'=>['StartupTeams.user_id'=>$user_id,
																'OR'=>[
																	 ['StartupTeams.approved'=>'2'],
																	 ['StartupTeams.approved'=>'3']
																	 ]
																]
												 ])->contain(['Startups'=>['Users','EntrepreneurBasics']]), $config);
						
						
						$result['TotalItems'] = $teamStartupIDs->count();

						if(!empty($teamStartupIDs)){
								foreach($teamStartupIDs as $singleStartup){
										$keys['startup_team_id']=$singleStartup->id;
										$keys['startup_id'] = $singleStartup->startup_id;
										$keys['entrepreneur_id'] = $singleStartup->user_id;
										$keys['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
										$keys['startup_name'] = $singleStartup->startup->name;
										$keys['startup_desc'] = $singleStartup->startup->description;
										
										if($_REQUEST['user_id']==$singleStartup->user_id):
											$keys['is_entrepreneur'] = 'false';
											$keys['is_contractor'] = 'true';
										else:
											
											$keys['is_entrepreneur'] = 'true';
											$keys['is_contractor'] = 'false';
										endif;
										
										$finalStartups[] = $keys;
									}
									
									if(!empty($finalStartups)):
										$result['startups'] = $finalStartups;
									else:
										$result['startups'] = [];
									endif;

						}else{
								$result['startups'] = [];
						}
	
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
					
				case '2':
					
					//------------------------------------
					
					if($search_text==''):
						
							 //getting search startups list
						
									$conditions = [];
									
								//user should not be entrepreneur of a start up
								
									array_push($conditions,["Startups.user_id !="=>$user_id]);
									
									$contractorKeywords = $this->ContractorProfessionals->find('all')
															->where(['user_id'=>$user_id])
															->select(['keywords'])
															->first();
									
									if(!empty($contractorKeywords)&&($contractorKeywords->keywords!='')):
										
										$conditions['OR'] = [];
										$contractorKeywords = $contractorKeywords->toArray();
										
										foreach(explode(',',$contractorKeywords['keywords']) as $single_keyword):
											 
											 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,Startups.keywords)"]);
											 
										endforeach;
										
										$query = $this->Startups->find('all')
																->where($conditions);
																				
										$result['TotalItems'] = $query->count();
									
										$Startups = $this->Paginator->paginate(
																				$this->Startups->find('all')
																				->where($conditions)
																				, $config);
										
										if(!empty($Startups)){
												
												foreach($Startups as $singleStartup){
													
													$keys['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
													$keys['entrepreneur_id'] = ($singleStartup->user_id!=' ')?$singleStartup->user_id:' ';
													$keys['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
													$keys['startup_name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
													$keys['startup_desc'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
													
													if($_REQUEST['user_id']==$singleStartup->user_id):
														$keys['is_entrepreneur'] = 'true';
														$keys['is_contractor'] = 'false';
													else:
														$keys['is_entrepreneur'] = 'false';
														$keys['is_contractor'] = 'true';
													endif;
													
													$finalStartups[] = $keys;
												}
												
												if(!empty($finalStartups)):
													$result['startups'] = $finalStartups;
												else:
													$result['startups'] = [];
												endif;
												
										   }else{
													$result['startups'] = [];
										   }
										
									else:
											
											$result['startups'] = [];
											echo json_encode($result);
									
									endif;
									 
								$result['code'] = 200;
								echo json_encode($result);
						 
						else:
							
								$config = 	[
											'limit' => 10,
											'page'=>$page_no,
											'order' => [
												'Startups.id' => 'asc'
											]
										];
								
								$connection = ConnectionManager::get('default');
								 
								$qq = "SELECT SU.id FROM keywords as KY INNER JOIN startups as SU ON FIND_IN_SET(KY.id, SU.keywords) where KY.name like  '%".$_REQUEST['search_text']."%' GROUP BY SU.id 
											UNION
											SELECT SU.id FROM startups as SU where SU.name like '%".$_REQUEST['search_text']."%'
											UNION
											SELECT SU.id FROM entrepreneur_basics as EB INNER JOIN startups as SU ON SU.user_id=EB.user_id where EB.first_name like  '%".$_REQUEST['search_text']."%' OR EB.last_name like  '%".$_REQUEST['search_text']."%'";
								
								$sql = $connection->execute ($qq);
								$startup_ids = $sql->fetchAll('assoc');
								
								if(!empty($startup_ids)):
									
									foreach($startup_ids as $SingleUser):
										if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
											$startupIDs[] = $SingleUser['id'];
										}
									endforeach;
								
								//fetching the startups and listing the result
									  
									if(!empty($startupIDs)):
										
										$query = $this->Startups->find('all')
																->where(['Startups.id IN'=>$startupIDs]);
																				
										$result['TotalItems'] = $query->count();
										
										$Startups = $this->Paginator->paginate(
																				$this->Startups->find('all')
																				->where(['Startups.id IN'=>$startupIDs])
																				, $config);
										
										if(!empty($Startups)){
												
												foreach($Startups as $singleStartup){
													
													$keys['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
													$keys['entrepreneur_id'] = ($singleStartup->user_id!=' ')?$singleStartup->user_id:' ';
													$keys['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
													$keys['startup_name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
													$keys['startup_desc'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
													
													if($_REQUEST['user_id']==$singleStartup->user_id):
														$keys['is_entrepreneur'] = 'true';
														$keys['is_contractor'] = 'false';
													else:
														$keys['is_entrepreneur'] = 'false';
														$keys['is_contractor'] = 'true';
													endif;
													
													$finalStartups[] = $keys;
												}
												
												if(!empty($finalStartups)):
													$result['startups'] = $finalStartups;
												else:
													$result['startups'] = [];
												endif;
												
										   }else{
													$result['startups'] = [];
										   }
										
									else:
											
											$result['startups'] = [];
											echo json_encode($result);
									
									endif;
									 
								$result['code'] = 200;
								echo json_encode($result);	
									 
								 
							endif;
								
						endif;
					
					
					//-------------------------------------
					 
					break;
				
					CASE '3':
						 
						 //getting my startups list
							
							$query = $this->Startups->find('all')
													->where(['user_id'=>$user_id]);
							
							$result['TotalItems'] = $query->count();
							
							$Startups = $this->Paginator->paginate(
																	$this->Startups->find('all')
																	->where(['Startups.user_id'=>$user_id])
																	, $config);
							
							if(!empty($Startups)){
									
									foreach($Startups as $singleStartup){
										
										$keys['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
										$keys['entrepreneur_id'] = ($singleStartup->user_id!=' ')?$singleStartup->user_id:' ';
										$keys['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
										$keys['startup_name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
										$keys['startup_desc'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
										
										if($_REQUEST['user_id']==$singleStartup->user_id):
											$keys['is_entrepreneur'] = 'true';
											$keys['is_contractor'] = 'false';
										else:
											$keys['is_entrepreneur'] = 'false';
											$keys['is_contractor'] = 'true';
										endif;
										
										$finalStartups[] = $keys;
									}
									
									if(!empty($finalStartups)):
										$result['startups'] = $finalStartups;
									else:
										$result['startups'] = [];
									endif;
									
							   }else{
										$result['startups'] = [];
							   }
							 
						$result['code'] = 200;
						echo json_encode($result);
							
					break;
					
				default:
							$result['code'] = 404;
							$result['TotalItems'] = '0';
							$result['startups'] = [];
							echo json_encode($result);
				
			endswitch;
		   
	}
	
	/**
	* single startup detail "Overview"
	*
	* @return single startup detail "Overview"
	*/
	public function startupOverview(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			
			$user_id = $_REQUEST['user_id'];
			$startup_id = $_REQUEST['startup_id'];

			$this->loadModel('Funds');
			$isFunded= $this->Funds->find('all',['conditions'=>["FIND_IN_SET($startup_id,Funds.portfolios_id)"]])->contain(['Users'])->first();
			
			if(!empty($isFunded)){
				$result['funded_by']= $isFunded->title;
				$result['fund_creator']=$isFunded->user->first_name.' '.$isFunded->user->last_name;
			}else{
				$result['funded_by']='';
				$result['fund_creator']='';
			}

			$this->loadModel('StartupProfiles');
            $isStartupProfileFile= $this->StartupProfiles->find('all',['conditions'=>['startup_id'=>$startup_id]])->first();
            
            if(!empty($isStartupProfileFile)){
				$result['startup_profile_file']= "/img/startup_profile_docs/".$isStartupProfileFile->file_path;
			}else{
				$result['startup_profile_file']='';
			}


			$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
											->contain(['StartupRoadmaps'])
											->first();
			 
			if(!empty($singleStartup)):
				
				$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
				$result['startup_name'] = ($singleStartup->name!='')?$singleStartup->name:' ';
				$result['startup_desc'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
				$result['entrepreneur_id'] = ($singleStartup->user_id!=' ')?$singleStartup->user_id:' ';
				$result['entrepreneur_name'] = $this->Contractor->entrepreneurName($singleStartup->user_id);
				$result['roadmap_grapic'] = ($singleStartup->roadmap_graphic!=' ')?'img/roadmap/'.$singleStartup->roadmap_graphic:' ';
				$result['support_required'] = ($singleStartup->support_required!=' ')?$singleStartup->support_required:' ';
				$result['next_step'] = ($singleStartup->next_step!=' ')?$singleStartup->next_step:' ';;
				
				$allRoadMaps = $this->Contractor->startupRoadmaps();
				
				if(!empty($allRoadMaps)):
				
					if(!empty($singleStartup['startup_roadmaps'])){
						foreach($singleStartup['startup_roadmaps'] as $singleRoadmap):
							if($singleRoadmap->current_roadmap!=''):
								$startupRoadmapsIDSFilepath[$singleRoadmap->current_roadmap] = $singleRoadmap['file_path'];
							endif;
						endforeach;
						
						if(!empty($startupRoadmapsIDSFilepath)):
							
							foreach($allRoadMaps as $key=>$singleRdMap){
								
								if(array_key_exists($key,$startupRoadmapsIDSFilepath)):
									$finalRoadMapArray['deliverable_id'] = $key;
									$finalRoadMapArray['deliverable_name'] = $singleRdMap;
									$finalRoadMapArray['deliverable_link'] = 'img/roadmap/'.$startupRoadmapsIDSFilepath[$key];
								else:
									$finalRoadMapArray['deliverable_id'] = $key;
									$finalRoadMapArray['deliverable_name'] = $singleRdMap;
									$finalRoadMapArray['deliverable_link'] = '';
								endif;
								
								$lastFinal[] = $finalRoadMapArray;
								
							}
							
							$result['roadmap_deliverable_list'] = $lastFinal;
							
						else:
						
						endif;
						
					}else{
							
							foreach($allRoadMaps as $key=>$singleRdMap){
								
									$finalRoadMapArray['deliverable_id'] = $key;
									$finalRoadMapArray['deliverable_name'] = $singleRdMap;
									$finalRoadMapArray['deliverable_link'] = '';
								
								$lastFinal[] = $finalRoadMapArray;
								
							}
							
							$result['roadmap_deliverable_list'] = $lastFinal;
							
					}
					
				else:
					$result['roadmap_deliverable_list'] = [];
				endif;
				
				if($singleStartup->keywords!=''):
							
						//$userKeywords = $this->Contractor->contractorKeywords($singleStartup->keywords);
					    $userKeywords = $this->Contractor->starupKeywordsList($singleStartup->keywords);
						
						if(!empty($userKeywords)):
						
							foreach($userKeywords as $key=>$value){
								$keys['id'] = ($key!='')?$key:' ';
								$keys['name'] = ($value!=' ')?$value:' ';
								
								$finalKeywords[] = $keys;
							}
							$result['keywords'] = $finalKeywords;
						else:
							$result['keywords'] = $finalKeywords;
						endif;
						
				else:
						$result['keywords'] = [];
				endif;
					
					$result['code'] = 200;
					echo json_encode($result);
						
			else:
				$result['code'] = 404;
				$result['message'] = 'detail not found';
				echo json_encode($result);
			endif;
		   
	}
	
	/**
	* single startup detail "Team"
	*
	* @return single startup detail "Overview"
	*/
	public function startupTeam(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');

		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			
			$user_id = $_REQUEST['user_id'];
			$startup_id = $_REQUEST['startup_id'];


			$result['loggedin_role_id'] = $this->Contractor->teamMemberName($startup_id,$user_id);
			
			$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
											->contain(['StartupTeams'=>['conditions'=>['OR'=>[
																								['StartupTeams.approved'=>'1'],
																								['StartupTeams.approved'=>'2']
																							  ]
																					   ],
																		'Users','ContractorRoles']])
											->first();
			
			if(!empty($singleStartup)):
				
				$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
			    
				
				if(!empty($singleStartup['startup_teams'])){
					//pr($singleStartup['startup_teams']);
					//
					foreach($singleStartup['startup_teams'] as $singleTeam):
						  
						  $teamMember['team_memberid'] = ($singleTeam->user_id!='')?$singleTeam->user_id:' ';
						  $teamMember['startup_team_id'] =$singleTeam->id;
						 
						if(isset($singleTeam['contractor_role']->id)&&($singleTeam['contractor_role']->id=='1')):
						 
							$user = $this->Contractor->userEntrepreneurBasic($singleTeam->user_id);
							 
							if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
								
								if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
					
									$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
									$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
									
									$teamMember['member_name'] = $first_name.' '.$last_name;
									
								elseif(!empty($user)):
									
									$first_name = ($user->first_name!='')?$user->first_name:' ';
									$last_name = ($user->last_name!='')?$user->last_name:' ';
									
									$teamMember['member_name'] = $first_name.' '.$last_name;					
								endif;
								
								$teamMember['is_profile_public'] =  (isset($user['entrepreneur_basic']['user_id']))? $this->Contractor->ProfileStatus($user['entrepreneur_basic']['user_id']):'1';
								$teamMember['member_role'] = (isset($singleTeam['contractor_role']->name))?$singleTeam['contractor_role']->name:' ';
								$teamMember['member_bio'] = (isset($user['entrepreneur_basic']['bio']))?$user['entrepreneur_basic']['bio']:' ';
								$teamMember['member_email'] = (isset($user['entrepreneur_basic']['email']))?$user['entrepreneur_basic']['email']:' ';
								$teamMember['member_status'] = ($singleTeam['approved']!=' ')?$singleTeam['approved']:' ';
								$teamMember['quickbloxid'] =  ($user['quickbloxid']!='')?$user['quickbloxid']:' ';
								
							}else{
								
								$first_name = ($user->first_name!='')?$user->first_name:' ';
								$last_name = ($user->last_name!='')?$user->last_name:' ';
								
								$teamMember['member_name'] = $first_name.' '.$last_name;
								$teamMember['is_profile_public'] =  (isset($user['entrepreneur_basic']['user_id']))? $this->Contractor->ProfileStatus($user['entrepreneur_basic']['user_id']):'1';
								$teamMember['member_role'] = (isset($singleTeam['contractor_role']->name))?$singleTeam['contractor_role']->name:' ';
								$teamMember['member_bio'] = (isset($singleTeam['entrepreneur_basic']['bio']))?$singleTeam['entrepreneur_basic']['bio']:' ';
								$teamMember['member_email'] = (isset($singleTeam['entrepreneur_basic']['email']))?$singleTeam['entrepreneur_basic']['email']:' ';
								$teamMember['member_status'] = ($singleTeam['approved']!=' ')?$singleTeam['approved']:' ';
								$teamMember['quickbloxid'] =  ($user['quickbloxid']!='')?$user['quickbloxid']:' ';
							}	
								
						else:
							
							$user = $this->Contractor->userContractorBasic($singleTeam->user_id);
							
							if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
								
								if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
					
									$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
									$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
									
									$teamMember['member_name'] = $first_name.' '.$last_name;
									
								elseif(!empty($user)):
									
									$first_name = ($user->first_name!='')?$user->first_name:' ';
									$last_name = ($user->last_name!='')?$user->last_name:' ';
									
									$teamMember['member_name'] = $first_name.' '.$last_name;					
								endif;
								
								$teamMember['is_profile_public'] =  (isset($user['contractor_basic']['user_id']))? $this->Contractor->ProfileStatus($user['contractor_basic']['user_id']):'1';
								$teamMember['member_role'] = (isset($singleTeam['contractor_role']->name))?$singleTeam['contractor_role']->name:' ';
								$teamMember['member_bio'] = (isset($user['contractor_basic']['bio']))?$user['contractor_basic']['bio']:' ';
								$teamMember['member_email'] = (isset($user['contractor_basic']['email']))?$user['contractor_basic']['email']:' ';
								$teamMember['member_status'] = ($singleTeam['approved']!=' ')?$singleTeam['approved']:' ';
								$teamMember['quickbloxid'] =  ($user['quickbloxid']!='')?$user['quickbloxid']:' ';
							}elseif(!empty($user)){
								
								$first_name = ($user['first_name']!='')?$user['first_name']:' ';
								$last_name = ($user['last_name']!='')?$user['last_name']:' ';
								
								$teamMember['member_name'] = $first_name.' '.$last_name;
								$teamMember['is_profile_public'] =  (isset($user['contractor_basic']['user_id']))? $this->Contractor->ProfileStatus($user['contractor_basic']['user_id']):'1';
								$teamMember['member_role'] = (isset($singleTeam['contractor_role']->name))?$singleTeam['contractor_role']->name:' ';
								$teamMember['member_bio'] = (isset($singleTeam['contractor_basic']['bio']))?$singleTeam['contractor_basic']['bio']:' ';
								$teamMember['member_email'] = (isset($singleTeam['contractor_basic']['email']))?$singleTeam['contractor_basic']['email']:' ';
								$teamMember['member_status'] = ($singleTeam['approved']!=' ')?$singleTeam['approved']:' ';
								$teamMember['quickbloxid'] =  ($user['quickbloxid']!='')?$user['quickbloxid']:' ';
							}else{
								$teamMember['member_name'] = '';
								$teamMember['member_role'] = '';
								$teamMember['member_bio'] = '';
								$teamMember['member_email'] = '';
								$teamMember['member_status'] = '';
								$teamMember['quickbloxid'] =  '';
							}
							
						
						endif;
						
						
						$finalTeam[] = $teamMember;
						 
					endforeach;
					
					$result['team_member'] = $finalTeam;
					
				}else{
					$result['team_member'] = [];
				}
				 
			//getting entrepreneur detail
				 
				$entrepreneur_detail = $this->Contractor->userEntrepreneurBasic($singleStartup->user_id);
				 
				 if(isset($entrepreneur_detail['entrepreneur_basic'])&&!empty($entrepreneur_detail['entrepreneur_basic'])){
								
						if(!empty($entrepreneur_detail['entrepreneur_basic'])&& isset($entrepreneur_detail['entrepreneur_basic'])):
			
							$E_first_name = ($entrepreneur_detail['entrepreneur_basic']['first_name']!='')?$entrepreneur_detail['entrepreneur_basic']['first_name']:' ';
							$E_last_name = ($entrepreneur_detail['entrepreneur_basic']['last_name']!='')?$entrepreneur_detail['entrepreneur_basic']['last_name']:' ';
							
							$entrepreneur['name'] = $E_first_name.' '.$E_last_name;
							
						elseif(!empty($entrepreneur_detail)):
							
							$E_first_name = ($entrepreneur_detail['first_name']!='')?$entrepreneur_detail['first_name']:' ';
							$E_last_name = ($entrepreneur_detail['last_name']!='')?$entrepreneur_detail['last_name']:' ';
							
							$entrepreneur['name'] = $E_first_name.' '.$E_last_name;					
						endif;
						$entrepreneur['is_profile_public'] =  (isset($entrepreneur_detail['entrepreneur_basic']['user_id']))? $this->Contractor->ProfileStatus($entrepreneur_detail['entrepreneur_basic']['user_id']):'1';
						$entrepreneur['id'] = $entrepreneur_detail['id'];
						$entrepreneur['bio'] = (isset($entrepreneur_detail['entrepreneur_basic']['bio']))?$entrepreneur_detail['entrepreneur_basic']['bio']:' ';
						$entrepreneur['email'] = (isset($entrepreneur_detail['entrepreneur_basic']['email']))?$entrepreneur_detail['entrepreneur_basic']['email']:' ';
						$entrepreneur['quickbloxid'] =  ($entrepreneur_detail['quickbloxid']!='')?$entrepreneur_detail['quickbloxid']:' ';
						
					}else{
						 
						$E_first_name = ($entrepreneur_detail['first_name']!='')?$entrepreneur_detail['first_name']:' ';
						$E_last_name = ($entrepreneur_detail['last_name']!='')?$entrepreneur_detail['last_name']:' ';
						
						$entrepreneur['is_profile_public'] =  (isset($entrepreneur_detail['entrepreneur_basic']['user_id']))? $this->Contractor->ProfileStatus($entrepreneur_detail['entrepreneur_basic']['user_id']):'1';
						$entrepreneur['name'] = $E_first_name.' '.$E_last_name;
						$entrepreneur['id'] = $entrepreneur_detail['id'];
						$entrepreneur['bio'] = (isset($entrepreneur_detail['entrepreneur_basic']['bio']))?$entrepreneur_detail['entrepreneur_basic']['bio']:' ';
						$entrepreneur['email'] = (isset($entrepreneur_detail['email']))?$entrepreneur_detail['email']:' ';
						$entrepreneur['quickbloxid'] =  ($entrepreneur_detail['quickbloxid']!='')?$entrepreneur_detail['quickbloxid']:' ';
					}
					
				$result['entrepreneur'] = $entrepreneur;
				$result['code'] = 200;
				echo json_encode($result);
				
			else:
				$result['code'] = 404;
				$result['entrepreneur'] = [];
				$result['team_member'] = [];
				echo json_encode($result);
			endif;
		   
	}
	
	/**
	* single startup workorders
	*
	* @return single startup detail "Overview"
	*/
	public function startupWorkorders(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$RoadmapsTable = $this->loadModel('Roadmaps');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			 
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$user_id = $this->request->data['user_id'];
				$startup_id = $this->request->data['startup_id'];
				$date = $this->request->data['date'];
				$day = $this->request->data['day'];
				$startupTeamId=$this->request->data['startup_team_id'];
				$contractorId= $this->request->data['contractor_id'];
				$enterpreneurId= $this->request->data['entrepreneur_id'];



                   
				$week_no = date('W', strtotime($date));
				$year = date('Y', strtotime($date));
				
				$from = date("Y-m-d", strtotime("{$year}-W{$week_no}-1")); //Returns the date of monday in week
				$to = date("Y-m-d", strtotime("{$year}-W{$week_no}-7"));   //Returns the date of sunday in week
				
				/*$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
											->contain(['StartupTeams'=>['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																					   'StartupTeams.user_id'=>$user_id]
																		]
													   ,'startupWorkOrders'=>['conditions'=>['startupWorkOrders.startup_id'=>$startup_id,
																							'startupWorkOrders.user_id'=>$user_id,
																							'startupWorkOrders.work_date >='=>$from,
																							'startupWorkOrders.work_date <='=>$to
																							]
																		]
													   ])
											->first();*/
				
				//pr($singleStartup);die;
				
				while($from <= $to){
					
					$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])->contain(['StartupTeams'=>
												['conditions'=>['StartupTeams.startup_id'=>$startup_id,
                                                              'StartupTeams.user_id'=>$user_id]
                                                            ],
									'StartupWorkOrders'=>
												['conditions'=>['StartupWorkOrders.startup_id'=>$startup_id,
																'StartupWorkOrders.startup_team_id'=>$startupTeamId,
																'StartupWorkOrders.user_id'=>$user_id,
																'StartupWorkOrders.work_date'=>$from
															   ]
												]
									])->first();
					//pr($singleStartup); die;
					if(!empty($singleStartup)):

						$count = count($singleStartup['startup_teams']);
                        $count=$count-1;
						
						$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
						$result['teammember_id'] = ($singleStartup->user_id!='')?$singleStartup->user_id:' ';

						$result['startup_team_id'] = $startupTeamId;
						$result['week_no'] = $week_no.'_'.$year;

						$result['entrepreneur_id'] = $singleStartup->user_id;

						$result['contractor_id'] = (isset($singleStartup['startup_teams'][$count]['user_id']))?$singleStartup['startup_teams'][$count]['user_id']:' ';


						$result['Allocated_hours'] = (isset($singleStartup['startup_teams'][$count]['work_units_allocated']))?$singleStartup['startup_teams'][$count]['work_units_allocated']:' ';
						$result['Approved_hours'] = (isset($singleStartup['startup_teams'][$count]['work_units_approved']))?$singleStartup['startup_teams'][$count]['work_units_approved']:' ';
						
						if(!empty($singleStartup['startup_work_orders'])){
								 
								$singleDateWorkOrderArray = [];
								
								foreach($singleStartup['startup_work_orders'] as $singleWorkOrder):
									
									$singleDeliverable['work_orderid'] = ($singleWorkOrder->id!='')?$singleWorkOrder->id:' ';
									
									$roadmap = $this->Contractor->RoadmapDetails($singleWorkOrder->roadmap_id);
									
									$singleDeliverable['deliverable_id'] = $singleWorkOrder->roadmap_id;
									$singleDeliverable['deliverable_name'] = $roadmap;
									$singleDeliverable['work_units'] = ($singleWorkOrder->work_units!='')?$singleWorkOrder->work_units:'0';;
									
									$singleDateWorkOrderArray[] = $singleDeliverable;
								 
								endforeach;
								 
								$singleDateObject['date'] = $from;
								$singleDateObject['deliverables']  = $singleDateWorkOrderArray;
							     
						}else{
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
							
						}
						
					else:
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
						 
					endif;
					
					$FinalObject[] = $singleDateObject;
					
					$from = date('Y-m-d', strtotime('+1 day', strtotime($from)));
				}
				
			//getting the deliverables of the contractor for a particular startup team
				
				if(!empty($singleStartup)){
				
						if(!empty($singleStartup['startup_teams'])){
							$roadmap_id = $singleStartup['startup_teams'][$count]['roadmap_id'];
						}else{
							$roadmap_id = '';
						}
						
						if(isset($roadmap_id)&&($roadmap_id!='')){
							$roadmapArray = explode(',',$roadmap_id);
							
							$roadmapResult = $this->Roadmaps->find('all',['conditions'=>['Roadmaps.id IN'=>$roadmapArray]]);
							
							if($roadmapResult->toArray()){
								$roadmapResult = $roadmapResult->toArray();
								foreach($roadmapResult as $singleRoadmapResult):
									
									$rdMaps['deliverable_id'] = ($singleRoadmapResult['id']!='')?$singleRoadmapResult['id']:'';
									$rdMaps['deliverable_name'] = ($singleRoadmapResult['name']!='')?$singleRoadmapResult['name']:'';
									
									$finalrdMaps[] = $rdMaps;
									
								endforeach;
								
								$result['Maindeliverables'] = $finalrdMaps;
								
							}else{
								$result['Maindeliverables'] = [];
							}
						}else{
							$result['Maindeliverables'] = [];
						}
				}else{
					$result['Maindeliverables'] = [];
				}



				// Get submited date of workorder
	            $weekNo= $week_no.'_'.$year;
	            $this->loadModel('StartupWorkOrders');

	            $worderSubmisionDate= $this->StartupWorkOrders->find('all', ['conditions' => ['StartupWorkOrders.startup_id' => $startup_id,'StartupWorkOrders.startup_team_id'=>$startupTeamId,'StartupWorkOrders.week_no ' => $weekNo]])->order('StartupWorkOrders.id ASC')->first();

	            if(!empty($worderSubmisionDate)){
	               $todayDate=date('Y-m-d');
	               $subDate= date_format($worderSubmisionDate->created,"Y-m-d");

	               $date1=date_create($subDate);
	               $date2=date_create($todayDate);
	               //$date1=date_create("2013-03-16");
	               //$date2=date_create("2013-03-16");
	               $diff=date_diff($date1,$date2);
	               $submittedDays= $diff->format("%a");
	               if($submittedDays <16){
	                  $daysLeft= 1;
	               }else{
	                  $daysLeft= 0;
	               }
	            }else{
	              $daysLeft= 0;
	              $submittedDays=0;
	            }   
	           $this->set('daysLeft',$daysLeft);


	            //// Save rating for work order
	            $weekNo= $week_no.'_'.$year;
	            $this->loadModel('WorkorderRatings');

	            //Get entrepreneur comment
	            $workorderRatingListEntrewpreneur = $this->WorkorderRatings->find('all', ['conditions' => ['WorkorderRatings.startup_id' => $startup_id,'WorkorderRatings.startup_team_id'=>$startupTeamId,'WorkorderRatings.week_no' => $weekNo,'WorkorderRatings.given_by' => $enterpreneurId]])->first();
	            if(!empty($workorderRatingListEntrewpreneur)){
	            	$result['entrepreneur_comment']=$workorderRatingListEntrewpreneur->description;
	            	$result['entrepreneur_rating_star']=$workorderRatingListEntrewpreneur->rating_star;
	            }else{
	            	$result['entrepreneur_comment']='';
	            	$result['entrepreneur_rating_star']=0;
	            }

	            //Get contgractor comment
	            $workorderRatingList = $this->WorkorderRatings->find('all', ['conditions' => ['WorkorderRatings.startup_id' => $startup_id,'WorkorderRatings.startup_team_id'=>$startupTeamId,'WorkorderRatings.week_no' => $weekNo,'WorkorderRatings.given_by' => $contractorId]])->first();
	            if(!empty($workorderRatingList)){
	            	$result['contractor_comment']=$workorderRatingList->description;
	            }else{
	            	$result['contractor_comment']='';
	            }
	            $result['passed_days']=$submittedDays;
	            $result['is_editable']=$daysLeft;

				
				$result['consumedHours'] = $this->Contractor->memberConsumedHours($startup_id,$user_id,$startupTeamId);
				$result['weekly_update'] = $FinalObject;
				$result['code'] = 200;
				echo json_encode($result);
			}
			 
	}


	/**
	* entrepreneurStartupWorkorders Method
	*
	*
	***/
	public function entrepreneurStartupWorkorders(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$RoadmapsTable = $this->loadModel('Roadmaps');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			 
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$startup_id = $this->request->data['startup_id'];
				$startupTeamId=$this->request->data['startup_team_id'];
				$contractorId= $this->request->data['contractor_id'];
				$enterpreneurId= $this->request->data['entrepreneur_id'];
				$weekNo= $this->request->data['week_no'];



                $weekNo= explode('_',$weekNo);
				//$week_no = date('W', strtotime($date));
				//$year = date('Y', strtotime($date));

				$week_no = $weekNo[0];
				$year = $weekNo[1];
				
				$from = date("Y-m-d", strtotime("{$year}-W{$week_no}-1")); //Returns the date of monday in week
				$to = date("Y-m-d", strtotime("{$year}-W{$week_no}-7"));   //Returns the date of sunday in week
				
				while($from <= $to){
					
					$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])->contain(['StartupTeams'=>
									['conditions'=>['StartupTeams.startup_id'=>$startup_id,
													'StartupTeams.user_id'=>$contractorId,
													'StartupTeams.id'=>$startupTeamId
												   ]
									],
									'StartupWorkOrders'=>
									['conditions'=>['StartupWorkOrders.startup_id'=>$startup_id,
													'StartupWorkOrders.startup_team_id'=>$startupTeamId,
													'StartupWorkOrders.user_id'=>$contractorId,
													'StartupWorkOrders.work_date'=>$from
												   ]
									]
									])->first();
					//pr($singleStartup); die;
					if(!empty($singleStartup)):

						$count = count($singleStartup['startup_teams']);
                        $count=$count-1;
						
						$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
						$result['teammember_id'] = ($singleStartup->user_id!='')?$singleStartup->user_id:' ';

						$result['startup_team_id'] = $startupTeamId;
						$result['week_no'] = $week_no.'_'.$year;

						$result['entrepreneur_id'] = $singleStartup->user_id;

						$result['contractor_id'] = (isset($singleStartup['startup_teams'][0]['user_id']))?$singleStartup['startup_teams'][0]['user_id']:' ';


						$result['Allocated_hours'] = (isset($singleStartup['startup_teams'][0]['work_units_allocated']))?$singleStartup['startup_teams'][0]['work_units_allocated']:' ';
						$result['Approved_hours'] = (isset($singleStartup['startup_teams'][0]['work_units_approved']))?$singleStartup['startup_teams'][0]['work_units_approved']:' ';
						
						if(!empty($singleStartup['startup_work_orders'])){
								 
								$singleDateWorkOrderArray = [];
								
								foreach($singleStartup['startup_work_orders'] as $singleWorkOrder):
									
									$singleDeliverable['work_orderid'] = ($singleWorkOrder->id!='')?$singleWorkOrder->id:' ';
									
									$roadmap = $this->Contractor->RoadmapDetails($singleWorkOrder->roadmap_id);
									
									$singleDeliverable['deliverable_id'] = $singleWorkOrder->roadmap_id;
									$singleDeliverable['deliverable_name'] = $roadmap;
									$singleDeliverable['work_units'] = ($singleWorkOrder->work_units!='')?$singleWorkOrder->work_units:'0';;
									
									$singleDateWorkOrderArray[] = $singleDeliverable;
								 
								endforeach;
								 
								$singleDateObject['date'] = $from;
								$singleDateObject['deliverables']  = $singleDateWorkOrderArray;
							     
						}else{
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
							
						}
						
					else:
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
						 
					endif;
					
					$FinalObject[] = $singleDateObject;
					
					$from = date('Y-m-d', strtotime('+1 day', strtotime($from)));
				}
				
			//getting the deliverables of the contractor for a particular startup team
				
				if(!empty($singleStartup)){
				
						if(!empty($singleStartup['startup_teams'])){
							$roadmap_id = $singleStartup['startup_teams'][0]['roadmap_id'];
						}else{
							$roadmap_id = '';
						}
						
						if(isset($roadmap_id)&&($roadmap_id!='')){
							$roadmapArray = explode(',',$roadmap_id);
							
							$roadmapResult = $this->Roadmaps->find('all',['conditions'=>['Roadmaps.id IN'=>$roadmapArray]]);
							
							if($roadmapResult->toArray()){
								$roadmapResult = $roadmapResult->toArray();
								foreach($roadmapResult as $singleRoadmapResult):
									
									$rdMaps['deliverable_id'] = ($singleRoadmapResult['id']!='')?$singleRoadmapResult['id']:'';
									$rdMaps['deliverable_name'] = ($singleRoadmapResult['name']!='')?$singleRoadmapResult['name']:'';
									
									$finalrdMaps[] = $rdMaps;
									
								endforeach;
								
								$result['Maindeliverables'] = $finalrdMaps;
								
							}else{
								$result['Maindeliverables'] = [];
							}
						}else{
							$result['Maindeliverables'] = [];
						}
				}else{
					$result['Maindeliverables'] = [];
				}



				// Get submited date of workorder
	            $weekNo= $week_no.'_'.$year;
	            $this->loadModel('StartupWorkOrders');

	            $worderSubmisionDate= $this->StartupWorkOrders->find('all', ['conditions' => ['StartupWorkOrders.startup_id' => $startup_id,'StartupWorkOrders.startup_team_id'=>$startupTeamId,'StartupWorkOrders.week_no ' => $weekNo]])->order('StartupWorkOrders.id ASC')->first();

	            if(!empty($worderSubmisionDate)){
	               $todayDate=date('Y-m-d');
	               $subDate= date_format($worderSubmisionDate->created,"Y-m-d");

	               $date1=date_create($subDate);
	               $date2=date_create($todayDate);
	               //$date1=date_create("2013-03-16");
	               //$date2=date_create("2013-03-16");
	               $diff=date_diff($date1,$date2);
	               $submittedDays= $diff->format("%a");
	               if($submittedDays <31){
	                  $daysLeft= 1;
	               }else{
	                  $daysLeft= 0;
	               }
	            }else{
	              $daysLeft= 0;
	              $submittedDays=0;
	            }   
	           $this->set('daysLeft',$daysLeft);


	            //// Save rating for work order
	            $weekNo= $week_no.'_'.$year;
	            $this->loadModel('WorkorderRatings');

	            //Get entrepreneur comment
	            $workorderRatingListEntrewpreneur = $this->WorkorderRatings->find('all', ['conditions' => ['WorkorderRatings.startup_id' => $startup_id,'WorkorderRatings.startup_team_id'=>$startupTeamId,'WorkorderRatings.week_no' => $weekNo,'WorkorderRatings.given_by' => $enterpreneurId]])->first();
	            if(!empty($workorderRatingListEntrewpreneur)){
	            	$result['entrepreneur_comment']=$workorderRatingListEntrewpreneur->description;
	            	$result['entrepreneur_rating_star']=$workorderRatingListEntrewpreneur->rating_star;
	            }else{
	            	$result['entrepreneur_comment']='';
	            	$result['entrepreneur_rating_star']=0;
	            }

	            //Get contgractor comment
	            $workorderRatingList = $this->WorkorderRatings->find('all', ['conditions' => ['WorkorderRatings.startup_id' => $startup_id,'WorkorderRatings.week_no' => $weekNo,'WorkorderRatings.given_by' => $contractorId]])->first();
	            if(!empty($workorderRatingList)){
	            	$result['contractor_comment']=$workorderRatingList->description;
	            }else{
	            	$result['contractor_comment']='';
	            }
	            $result['passed_days']=$submittedDays;
	            $result['is_editable']=$daysLeft;

				
				$result['consumedHours'] = $this->Contractor->memberConsumedHours($startup_id,$contractorId,$startupTeamId);
				$result['weekly_update'] = $FinalObject;
				$result['code'] = 200;
				echo json_encode($result);
			}
			 
	}
	
	/**
	* single startup workorders
	*
	* @return single startup detail "Overview"
	*/
	public function startupSavedWorkorders(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$RoadmapsTable = $this->loadModel('Roadmaps');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			 
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$user_id = $this->request->data['user_id'];
				$startup_id = $this->request->data['startup_id'];
				$date = $this->request->data['date'];
				$day = $this->request->data['day'];
				$startupTeamId=$this->request->data['startup_team_id'];

				/*$user_id = $_GET['user_id'];
				$startup_id = $_GET['startup_id'];
				$date = $_GET['date'];
				$day = $_GET['day'];
				$startupTeamId=$_GET['startup_team_id']; */
				
					/*$this->loadModel('StartupTeams');
	            	///Check is user part of Team ot not 
	                $isPartStartupTeam = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,'StartupTeams.user_id'=>$user_id,'StartupTeams.approved'=>1]])->order(['StartupTeams.id DESC'])->first();
	                
	                if(!empty($isPartStartupTeam))                            
	                { 
	                    $startupTeamId=$isPartStartupTeam->id;
	                }*/
	             
				
				$week_no = date('W', strtotime($date));
				$year = date('Y', strtotime($date));
				
				$from = date("Y-m-d", strtotime("{$year}-W{$week_no}-1")); //Returns the date of monday in week
				$to = date("Y-m-d", strtotime("{$year}-W{$week_no}-7"));   //Returns the date of sunday in week
				
				/*$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
											->contain(['StartupTeams'=>['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																					   'StartupTeams.user_id'=>$user_id]
																		]
													   ,'startupWorkOrders'=>['conditions'=>['startupWorkOrders.startup_id'=>$startup_id,
																							'startupWorkOrders.user_id'=>$user_id,
																							'startupWorkOrders.work_date >='=>$from,
																							'startupWorkOrders.work_date <='=>$to
																							]
																		]
													   ])
											->first();*/
				
				//pr($singleStartup);die;

				//,'StartupWorkOrders.status'=>1,'StartupWorkOrders.is_submited'=>0
				
				while($from <= $to){
					
					$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])->contain(['StartupTeams'=>
									['conditions'=>['StartupTeams.startup_id'=>$startup_id,'StartupTeams.user_id'=>$user_id]
									],
									'StartupWorkOrders'=>
										['conditions'=>['StartupWorkOrders.startup_id'=>$startup_id,
														'StartupWorkOrders.startup_team_id'=>$startupTeamId,
														'StartupWorkOrders.user_id'=>$user_id,
														'StartupWorkOrders.work_date'=>$from
														]
										]
									])->first();
					//pr($singleStartup);
					if(!empty($singleStartup)):
						$count = count($singleStartup['startup_teams']);
                        $count=$count-1;
						$result['startup_team_id'] =$singleStartup['startup_teams'][$count]['id'];
						$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
						$result['teammember_id'] = ($singleStartup->user_id!='')?$singleStartup->user_id:' ';
						$result['Allocated_hours'] = (isset($singleStartup['startup_teams'][$count]['work_units_allocated']))?$singleStartup['startup_teams'][$count]['work_units_allocated']:' ';
						$result['Approved_hours'] = (isset($singleStartup['startup_teams'][$count]['work_units_approved']))?$singleStartup['startup_teams'][$count]['work_units_approved']:' ';
						//pr($singleStartup) ; die;
						if(!empty($singleStartup['startup_work_orders'])){
								
								$singleDateWorkOrderArray = [];
								
								foreach($singleStartup['startup_work_orders'] as $singleWorkOrder):
									
									$singleDeliverable['work_orderid'] = ($singleWorkOrder->id!='')?$singleWorkOrder->id:' ';
									
									$roadmap = $this->Contractor->RoadmapDetails($singleWorkOrder->roadmap_id);
									
									$singleDeliverable['deliverable_id'] = $singleWorkOrder->roadmap_id;
									$singleDeliverable['deliverable_name'] = $roadmap;
									$singleDeliverable['work_units'] = ($singleWorkOrder->work_units!='')?$singleWorkOrder->work_units:'0';;
									
									$singleDateWorkOrderArray[] = $singleDeliverable;
								 
								endforeach;
								 
								$singleDateObject['date'] = $from;
								$singleDateObject['deliverables']  = $singleDateWorkOrderArray;
							     
						}else{
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
							
						}
						
					else:
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
						 
					endif;
					
					$FinalObject[] = $singleDateObject;
					
					$from = date('Y-m-d', strtotime('+1 day', strtotime($from)));
				}
				
			//getting the deliverables of the contractor for a particular startup team
				
				if(!empty($singleStartup)){
				
						if(!empty($singleStartup['startup_teams'])){
							$roadmap_id = $singleStartup['startup_teams'][$count]['roadmap_id'];
						}else{
							$roadmap_id = '';
						}
						
						if(isset($roadmap_id)&&($roadmap_id!='')){
							$roadmapArray = explode(',',$roadmap_id);
							
							$roadmapResult = $this->Roadmaps->find('all',['conditions'=>['Roadmaps.id IN'=>$roadmapArray]]);
							
							if($roadmapResult->toArray()){
								$roadmapResult = $roadmapResult->toArray();
								foreach($roadmapResult as $singleRoadmapResult):
									
									$rdMaps['deliverable_id'] = ($singleRoadmapResult['id']!='')?$singleRoadmapResult['id']:'';
									$rdMaps['deliverable_name'] = ($singleRoadmapResult['name']!='')?$singleRoadmapResult['name']:'';
									
									$finalrdMaps[] = $rdMaps;
									
								endforeach;
								
								$result['Maindeliverables'] = $finalrdMaps;
								
							}else{
								$result['Maindeliverables'] = [];
							}
						}else{
							$result['Maindeliverables'] = [];
						}
				}else{
					$result['Maindeliverables'] = [];
				}
				
				$result['consumedHours'] = $this->Contractor->memberConsumedHours($startup_id,$user_id,$startupTeamId);
				$result['weekly_update'] = $FinalObject;
				$result['code'] = 200;
				echo json_encode($result);
			}
			 
	}
	
	/**
	* update team member status
	*
	* @return single startup detail "Overview"
	*/
	public function teamMemberStatus(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('StartupTeams');
		$this->loadModel('UserTokens');
		$this->loadModel('Startups');
		
		$notificationsTable = TableRegistry::get('UserNotifications');
		
		$loggedin_user_id = $_REQUEST['loggedin_user_id'];
		$user_id = $_REQUEST['user_id'];
		$startup_id = $_REQUEST['startup_id'];
		$status = $_REQUEST['status'];
		$startupTeamId=$_REQUEST['startup_team_id'];


		if(isset($_REQUEST['notification_id'])&&($_REQUEST['notification_id']!='')):
					$notification_id  = $_REQUEST['notification_id'];
		else:
				$notification_id  = '';
		endif;

		
		
		$query = $this->StartupTeams->query();
		
		if($loggedin_user_id==$user_id):
					
					if($status=='1'): //when user accept the startup team request
						
						if($query->update()
							->set(['approved'=>$status
								   ])
							->where(['user_id' => $user_id,
									 'approved' => 0,
									 'startup_id' => $startup_id])
							->execute()):
							  
							  	//Save feeds
                  				$this->Feeds->saveStartupFeeds($user_id,'feeds_startup_member_added',$startup_id);

								  $result['code'] = 200;
								  $result['message'] = 'Request accepted successfully.';
								  echo json_encode($result);
							  
							  //sending push notification to the user who has been getting followed
								  $ccN = $this->Contractor->contractorName($user_id);
								  $message = trim($ccN)." has accepted your proposal for startup ".$this->Contractor->startupName($startup_id);
								  
								  $startup_holder = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
																		  ->select(['user_id'])
																		  ->first();

								  $startup_owner = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																								   'StartupTeams.user_id'=>$user_id]])
																		  ->select(['hired_by'])
																		  ->first();
								 
								  if(!empty($startup_owner)&&($startup_owner['hired_by']!='')){
								  
								  $userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startup_owner['hired_by']]])
													  ->select(['access_token','device_type']);
								  
								  $finalAndroidTokens = [];
								  $finalIosTokens = [];
								  if($userToken->toArray()):
									  
									  $tokens = $userToken->toArray();

									  	$blankArray=[];
										foreach($tokens as $single_token):
											
											if (!in_array($single_token['access_token'], $blankArray)){

												if($single_token['device_type']=='android'):
													$finalAndroidTokens[] = $single_token['access_token'];
												else:
													//$finalIosTokens[] = $single_token['access_token'];
													$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
												endif;   
											}  
			                    			array_push($blankArray,$single_token['access_token']);
										endforeach;
									  
										/*foreach($tokens as $single_token):
											  
											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
											endif;
											  
										endforeach;*/
									  
								  endif;
								  
								  if(!empty($finalAndroidTokens)):
									  
									  $values = [];
									  
									  $this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'TeamMember_accepted');
									  
								//Save user notification
									
									/*if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
									
									$this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_accepted',' has accepted your proposal for startup '.$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
									*/
								  endif;
								 
								 if(!empty($finalIosTokens)):
									  
									  $values = [];
									  
									  $this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'TeamMember_accepted');
									  
								//Save user notification
									/*
									if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
									
									$this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_accepted',' has accepted your proposal for startup '.$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
									*/
								  endif;
								  
								  
								  $values = [];
								  if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
									
								  $this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_accepted',' has accepted your proposal for startup '.$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
								  

								  if(isset($notification_id)&&($notification_id!='')):
									
									$Approved['status'] = '1';
									
									$notificationsTableGet = $notificationsTable->get($notification_id);
									$notificationsTabledata = $notificationsTable->patchEntity($notificationsTableGet,$Approved);
									 
									$notificationsTable->save($notificationsTabledata);
									
								  endif;
							  }
							  
						  endif;
						
					else:
							
							if($query->update()
							->set(['approved'=>$status
								   ])
							->where(['user_id' => $user_id,
									 'approved' => 0,
									 'startup_id' => $startup_id])
							->execute()):
							  
							  
								  $result['code'] = 200;
								  $result['message'] = 'Request rejected.';
								  echo json_encode($result);
							  
							  //sending push notification to the user who has been getting followed
								  $ccN = $this->Contractor->contractorName($user_id);
								  $message = trim($ccN)." has rejected your proposal for startup ".$this->Contractor->startupName($startup_id);
									
								  $startup_owner = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																								   'StartupTeams.user_id'=>$user_id]])
																		  ->select(['hired_by'])
																		  ->first();
								 
								  if(!empty($startup_owner)&&($startup_owner['hired_by']!='')){
								  
								  $userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startup_owner['hired_by']]])
													  ->select(['access_token']);
								  
								  $finalAndroidTokens = [];
									$finalIosTokens = [];
								  if($userToken->toArray()):
									  
									  $tokens = $userToken->toArray();
									  
									    $blankArray=[];
										foreach($tokens as $single_token):
											
											if (!in_array($single_token['access_token'], $blankArray)){

												if($single_token['device_type']=='android'):
													$finalAndroidTokens[] = $single_token['access_token'];
												else:
													//$finalIosTokens[] = $single_token['access_token'];
													$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
												endif;   
											}  
			                    			array_push($blankArray,$single_token['access_token']);
										endforeach;

									    /*foreach($tokens as $single_token):
										  
										    if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
											endif;
										  
									    endforeach;*/
									  
								  endif;
								  
								  if(!empty($finalAndroidTokens)):
									  
									  $values = [];
									 
									  $this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'TeamMember_rejected');
									  
									  
									  //Save user notification
									
									/*if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
									
									$this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_rejected'," has rejected your proposal for startup ".$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
									*/
								  endif;
								  
								  if(!empty($finalIosTokens)):
									  
									  $values = [];
									  
									  $this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'TeamMember_rejected');
									  
									  
							    //Save user notification
									 
									 /*if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
									 
									$this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_rejected'," has rejected your proposal for startup ".$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
									*/
								  endif;
								  
								   $values = [];
								  if($startup_holder['user_id'] == $startup_owner['hired_by']){
										   $link= Router::url(['controller' => 'Startups', 'action' => 'editStartupTeam',base64_encode($startup_id)]);
									 }else{ 
										   $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupTeam',base64_encode($startup_id)]);
									 }
								
								
								$this->Contractor->saveNotification($user_id,$startup_owner['hired_by'],'TeamMember_rejected'," has rejected your proposal for startup ".$this->Contractor->startupName($startup_id),$link,json_encode((object)$values));
								  if(isset($notification_id)&&($notification_id!='')):
									
									$Approved['status'] = '1';
									
									$notificationsTableGet = $notificationsTable->get($notification_id);
									$notificationsTabledata = $notificationsTable->patchEntity($notificationsTableGet,$Approved);
									 
									$notificationsTable->save($notificationsTabledata);
									
								  endif;
								  
							  }
							  
						  endif;
					
					endif;
					 
			elseif(($status=='1')
				&&($loggedin_user_id!=$user_id)):
					 
					if($query->update()
					  ->set(['approved'=>$status
							 ])
					  ->where(['user_id' => $user_id,
					  	       'approved' => 2,
							   'startup_id' => $startup_id])
					  ->execute()):
							
							
							$result['code'] = 200;
							$result['message'] = 'Resumed successfully.';
							echo json_encode($result);
						
						//sending push notification to the user who has been getting followed
							 
							$message = "Your Services to the Startup ".$this->Contractor->startupName($startup_id)." has been Resumed.";
							 
							$startup_owner = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																							 'StartupTeams.user_id'=>$user_id]])
																	->select(['hired_by'])
																	->first();
							 
							if(!empty($startup_owner)&&($startup_owner['hired_by']!='')){
							 
							$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$user_id]])
												->select(['access_token','device_type']);
							
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();
								
								$blankArray=[];
								foreach($tokens as $single_token):
								
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                    			array_push($blankArray,$single_token['access_token']);
								endforeach;



								/*foreach($tokens as $single_token):
									
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endforeach;*/
								
							endif;
							  
							if(!empty($finalAndroidTokens)):
								 
								$values = [];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'TeamMember_resumed');
								
								// $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);
 
								 //$this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'teamuser_resume',"Your Services to the Startup ".$this->Contractor->startupName($startup_id)." has been Resumed.",$link,json_encode((object)$values));
								
							endif;
							if(!empty($finalIosTokens)):
								 
								$values = [];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'TeamMember_resumed');
								
								// $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);

								// $this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'teamuser_resume',"Your Services to the Startup ".$this->Contractor->startupName($startup_id)." has been Resumed.",$link,json_encode((object)$values));
								
							endif;
							
							$values = [];
							$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);

							$this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'teamuser_resume',"Your Services to the Startup ".$this->Contractor->startupName($startup_id)." has been Resumed.",$link,json_encode((object)$values));
							
						}
						
					endif;
			
			
			else:
			
						if($query->update()
						  ->set(['approved'=>$status
								 ])
						  ->where(['id' => $startupTeamId,
						  		   'user_id' => $user_id,
								   'startup_id' => $startup_id])
						  ->execute()){
								
								switch($status){
									
									case 1:
										//$pushMessage = "Your Services to the Startup ".$this->Contractor->startupName($startup_id)." has been Resumed.";
										$ccN =$this->Contractor->contractorName($loggedin_user_id);
										$pushMessage = trim($ccN)." has resumed your services for startup ".$this->Contractor->startupName($startup_id);
										$msg = " has resumed your services for startup <strong>".$this->Contractor->startupName($startup_id)."</strong>";
										$ownmsg = 'You have successfully resumed the services of team member.';
									break;
									case 2:
										//$pushMessage = "Your Services have been suspended for the time being from startup ".$this->Contractor->startupName($startup_id);
										$ccN =$this->Contractor->contractorName($loggedin_user_id);
										$pushMessage = trim($ccN)." has suspended your services for the time being from the startup ".$this->Contractor->startupName($startup_id);
										$msg = " has suspended your services for the time being from the startup <strong>".$this->Contractor->startupName($startup_id)."</strong>";
										$ownmsg = 'You have successfully suspended the services of team member.';
									break;
									case 3:

									//Update workorder Status
						            $this->loadModel('StartupWorkOrders');
						            $query1 = $this->StartupWorkOrders->query();
						            $suucess1 = $query1->update()->set(['show_status'=>1])->where(['user_id'=>$user_id,'startup_team_id' => $startupTeamId])->execute(); 

						            	$ccN =$this->Contractor->contractorName($loggedin_user_id);
										$pushMessage =  trim($ccN)." has removed you from the startup ".$this->Contractor->startupName($startup_id);
										$msg = " has removed you from the startup <strong>".$this->Contractor->startupName($startup_id)."</strong>";
										$ownmsg = 'You have successfully removed the member.';
									break;
								}
						
								$result['code'] = 200;
								$result['message'] = $ownmsg;
								echo json_encode($result);
						
								if(($loggedin_user_id==$user_id)
								   &&($status=='3')):
									
									//sending push notification to the owner of startup team of rejection
									 		
											$message = $this->Contractor->contractorName($user_id)." has rejected your request";
											 
											/*$startup_owner = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
																					->select(['name'])
																					->first();*/
											
											$startup_owner = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,'StartupTeams.user_id'=>$user_id]])->select(['hired_by'])->first();
											
											if(!empty($startup_owner)&&($startup_owner['hired_by']!='')):
											
											$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startup_owner['hired_by']]])
																->select(['access_token']);
											
											$finalTokens = [];
											if($userToken->toArray()):
												
												$tokens = $userToken->toArray();

												$blankArray=[];
												foreach($tokens as $single_token):
												
													if (!in_array($single_token['access_token'], $blankArray)){

														if($single_token['access_token']!=''):
															$finalTokens[] = $single_token['access_token'];
														endif;   
													}  
					                    			array_push($blankArray,$single_token['access_token']);
												endforeach;
												

												

												/*foreach($tokens as $single_token):
													
													if($single_token['access_token']!=''):
														$finalTokens[] = $single_token['access_token'];
													endif;
													
												endforeach;*/
												
											endif;
											 
											if(!empty($finalTokens)):
												
												$values = [];
												
												$this->Push->sendAndroidPushNotification($finalTokens,$message,$values,'TeamMember_accepted');
												
												
											endif;
													
										endif;
									
								else:
										
									//sending push notification to the user who has been getting followed
										
										//$message = "You have been ".$pushMessage.$this->Contractor->startupName($startup_id)." team.";
										
										$message = $pushMessage;
										
										$startup_owner = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id]])
																	->select(['hired_by'])
																	->first();
										 
										$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$user_id]])
															->select(['access_token','device_type']);
										$finalAndroidTokens = [];
										$finalIosTokens = [];
										if($userToken->toArray()):
											
											$tokens = $userToken->toArray();
											$blankArray=[];
											foreach($tokens as $single_token):
											
											if (!in_array($single_token['access_token'], $blankArray)){

												if($single_token['device_type']=='android'):
													$finalAndroidTokens[] = $single_token['access_token'];
												else:
													//$finalIosTokens[] = $single_token['access_token'];
													$length = strlen($single_token['access_token']);
						                      			if($length >60){
						                        			$finalIosTokens[] = $single_token['access_token'];
						                        		}
												endif;   
											}  
			                    			array_push($blankArray,$single_token['access_token']);
											endforeach;
											


											/*foreach($tokens as $single_token):
												
												if($single_token['device_type']=='android'):
													$finalAndroidTokens[] = $single_token['access_token'];
												else:
													//$finalIosTokens[] = $single_token['access_token'];
													$length = strlen($single_token['access_token']);
						                      			if($length >60){
						                        			$finalIosTokens[] = $single_token['access_token'];
						                        		}
												endif;
												
											endforeach;*/
											
										endif;
										 
										if(!empty($finalAndroidTokens)):
											
											$values = [];
											
											$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'TeamMember_status');
											
											//$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);
											//$this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'TeamMember_status',$msg,$link,json_encode((object)$values));
                 
										endif;
										if(!empty($finalIosTokens)):
											
											$values = [];
											
											$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'TeamMember_status');
											
											//$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);
											//$this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'TeamMember_status',$msg,$link,json_encode((object)$values));
                 
										endif;
										
										$values = [];
										$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($startup_id)]);
			
										$this->Contractor->saveNotification($startup_owner['hired_by'],$user_id,'TeamMember_status',$msg,$link,json_encode((object)$values));
							 
								endif;
							
						
						}else{
							
							if($status=='3'):
								$msg = 'Team member not removed';
							else:
								$msg = 'Status not Updated';
							endif;
							
							$result['code'] = 404;
							$result['message'] = $msg;
							echo json_encode($result);
						}		
			
		endif;
	
	}
	
	/**
	* send message
	*
	* @return single startup detail "Overview"
	*/
	public function sendMessage(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		
		
		if($this->request->is('post')){
				 
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$MessagesTable = TableRegistry::get('Messages');
				
				$Messages = $MessagesTable->newEntity();
				
				$Messages->sender_id = $this->request->data['from_team_memberid'];
				$Messages->sender_role_id = $this->request->data['sender_role_id'];
				$Messages->receiver_id = $this->request->data['to_team_memberid'];
				$Messages->subject = $this->request->data['subject'];
				$Messages->comment = $this->request->data['message_text'];
				$Messages->msg_type = $this->request->data['msg_type'];
			     
				if ($MessagesTable->save($Messages)){
					 $result['code'] = 200;
					 $result['message'] = 'Message successfully sent';
					 echo json_encode($result);
					 
					 //sending push notification to the user who has been getting followed
						
						//$message = $this->Contractor->contractorName($this->request->data['from_team_memberid'])." has sent you a message.";
						$message = $this->Contractor->contractorName($this->request->data['from_team_memberid']). " has sent you a message.";
						
						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$this->request->data['to_team_memberid']]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();

							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							
							/*foreach($tokens as $single_token):
							
								if($single_token['device_type']=='android'):
									$finalAndroidTokens[] = $single_token['access_token'];
								else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
								endif;
								
							endforeach*/;
							
						endif;
						$values = [];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Message');
							
							
							//$link= Router::url(['controller' => 'Messages', 'action' => 'index']);

                            //$this->Contractor->saveNotification($this->request->data['from_team_memberid'],$this->request->data['to_team_memberid'],'Message'," has sent you a <strong> message.</strong>",$link,json_encode((object)$values));
                       
					   
						endif;
						if(!empty($finalIosTokens)):
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Message');
							
							
							//$link= Router::url(['controller' => 'Messages', 'action' => 'index']);

                           // $this->Contractor->saveNotification($this->request->data['from_team_memberid'],$this->request->data['to_team_memberid'],'Message'," has sent you a <strong>message.</strong>",$link,json_encode((object)$values));
                       
					   
						endif;
					
					//saving the message
						
						$values = [];

						if($this->request->data['msg_type'] == 'connection'){
							$link= Router::url(['controller' => 'Contractors', 'action' => 'myMessages']);
						}else{
							$link= Router::url(['controller' => 'Messages', 'action' => 'index']);
						}
						$this->Contractor->saveNotification($this->request->data['from_team_memberid'],$this->request->data['to_team_memberid'],'Message'," has sent you a <strong>message.</strong>",$link,json_encode((object)$values));
						
				}else{
					 $result['code'] = 200;
					 $result['message'] = 'Message not sent';
					 echo json_encode($result);
				}
		} 
	}
	
	/**
	* single entrepreneur workorder
	*
	* @return entrepreneur workorder
	*/
	public function entrepreneurWorkorders(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('StartupWorkOrders');
			
			$startup_id = $_REQUEST['startup_id'];
			
			$StartupWorkOrders = $this->StartupWorkOrders->find('all',['conditions'=>['StartupWorkOrders.startup_id'=>$startup_id,
																					  'StartupWorkOrders.status'=>0]])->toArray();
											//->contain(['StartupTeams'=>['Users','ContractorRoles']])
			
			if(!empty($StartupWorkOrders)):
					
					foreach($StartupWorkOrders as $singleWorkorder):
						 
						$teamMember['team_memberid'] = ($singleWorkorder->user_id!='')?$singleWorkorder->user_id:' ';
						$teamMember['work_orderid'] = ($singleWorkorder->id!='')?$singleWorkorder->id:' ';
						$teamMember['date'] = ($singleWorkorder->work_date!='')?date('F d, Y',strtotime($singleWorkorder->work_date)):' ';
						$teamMember['work_units'] = ($singleWorkorder->work_units!='')?$singleWorkorder->work_units:' ';
						
						//$teamMember['member_name'] = ($singleWorkorder->user_id!='')?$singleWorkorder->user_id:' ';
						$teamMember['roadmap_name'] = $this->Contractor->RoadmapDetails($singleWorkorder->roadmap_id);
						
						$role_id = $this->Contractor->teamMemberName($startup_id,$singleWorkorder->user_id);
						 
						if($role_id!=''):
						
								if($role_id=='1'):
									
									$user = $this->Contractor->userEntrepreneurBasic($singleWorkorder->user_id);
									 
									if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
										
										if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
							
											$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
											$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
											
											$teamMember['member_name'] = $first_name.' '.$last_name;
											
										elseif(!empty($user)):
											
											$first_name = ($user->first_name!='')?$user->first_name:' ';
											$last_name = ($user->last_name!='')?$user->last_name:' ';
											
											$teamMember['member_name'] = $first_name.' '.$last_name;					
										endif;
										 
									}else{
										
										$first_name = ($user->first_name!='')?$user->first_name:' ';
										$last_name = ($user->last_name!='')?$user->last_name:' ';
											
										$teamMember['member_name'] = $first_name.' '.$last_name;
										 
									}
								 
								else:
									 
									$user = $this->Contractor->userContractorBasic($singleWorkorder->user_id);
									
									if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
										
										if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
							
											$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
											$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
											
											$teamMember['member_name'] = $first_name.' '.$last_name;
											
										elseif(!empty($user)):
											
											$first_name = ($user->first_name!='')?$user->first_name:' ';
											$last_name = ($user->last_name!='')?$user->last_name:' ';
											
											$teamMember['member_name'] = $first_name.' '.$last_name;					
										endif;
										 
									}else{
										
										$first_name = ($user['first_name']!='')?$user['first_name']:' ';
										$last_name = ($user['last_name']!='')?$user['last_name']:' ';
										
										$teamMember['member_name'] = $first_name.' '.$last_name;
										 
									}
									
								
								endif;
						
						else: 
							$teamMember['member_name'] = ' ';
						endif;
						 
						$finalTeam[] = $teamMember;
					
					endforeach;
				
				$result['workOrders'] = $finalTeam;
				$result['code'] = 200;
				echo json_encode($result);
				
			else:
				
				$result['code'] = 404;
				$result['workOrders'] = [];
				echo json_encode($result);
				
			endif;
		   
	}
	
	/**
	* update workorder status
	*
	* @return update workorder status
	*/
	public function workorderStatus(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('StartupWorkOrders');
		
		$workorder_id = $_REQUEST['workorder_id'];
		$status = $_REQUEST['status'];
		
		$query = $this->StartupWorkOrders->query();
		
		if($status=='1'):
			
				if($query->update()
					  ->set(['status'=>$status
							 ])
					  ->where(['id' => $workorder_id])
					  ->execute()){
					
					$result['code'] = 200;
					$result['message'] = 'Status Updated';
					echo json_encode($result);
					
				}else{
					
					$result['code'] = 404;
					$result['message'] = 'Status Updated';
					echo json_encode($result);
				}																												
				
		else:
			
			$entity = $this->StartupWorkOrders->get($workorder_id);
			if($this->StartupWorkOrders->delete($entity)){
					
					$result['code'] = 200;
					$result['message'] = 'successfully deleted';
					echo json_encode($result);
					
				}else{
					
					$result['code'] = 404;
					$result['message'] = 'Not deleted';
					echo json_encode($result);
					
				}
				
		endif;
		
	}
	
	/*
	 *
	 *method for updating the startup detail
	 *
	 */
	public function updateStartup(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    
		$this->loadModel('UserTokens');
		$startupsTable = TableRegistry::get('Startups');
		  
			if($this->request->is('post')){
				 
				$startupsTableGet = $startupsTable->get($this->request->data['id']);
				
				if(!empty($startupsTableGet)):
					$OldImage = $startupsTableGet->roadmap_graphic;
				else:
					$OldImage = '';
				endif;
				
				 if(!empty($this->request->data['roadmap_graphic'])&&($this->request->data['roadmap_graphic']['error']=='0')){
					
					$file_response = $this->Multiupload->roadmapGraphicUpload($this->request->data['roadmap_graphic']);
					
					if(isset($file_response['errors'])&&$file_response['errors']!=''):
						$this->request->data['roadmap_graphic'] = '';
					else:
						$this->request->data['roadmap_graphic'] = $file_response['imgName'];
						
						if($OldImage!='' && file_exists('img/roadmap/'.$OldImage)){
						   unlink(WWW_ROOT . 'img/roadmap/' .$OldImage);
						}
						
					endif;
				 }else{
					if($OldImage!=''):
						$this->request->data['roadmap_graphic'] = $OldImage;
					else:
						$this->request->data['roadmap_graphic'] = '';
					endif;	 
				 } 
				$startup = $startupsTable->patchEntity($startupsTableGet,$this->request->data);	
				if($startupsTable->save($startup)){
					//Save user Feeds
                    $this->Feeds->saveStartupFeeds($startupsTableGet->user_id,'feeds_startup_updated',$this->request->data['id']);


					$result['code']=200;
					$result['message']='successfully updated';
					echo json_encode($result);									
			//sending push notification to the user who has been getting followed					
					$message = "Startup ".$this->Contractor->startupName($this->request->data['id'])." has been updated";
					$connection = ConnectionManager::get('default');
					$qq = "select UT.user_id,UT.access_token,UT.device_type from startup_teams as ST
					inner join user_tokens UT on ST.user_id=UT.user_id where startup_id=".$this->request->data['id'];
					$sql = $connection->execute ($qq);
					$user_tokens_array = $sql->fetchAll('assoc');
					if(!empty($user_tokens_array)){	 
						 $finalAndroidTokens = [];
						$finalIosTokens = [];
							$tokens = $user_tokens_array;

							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							/*foreach($tokens as $single_token): 
								if($single_token['device_type']=='android'):
									$finalAndroidTokens[] = $single_token['access_token'];
								else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
								endif;
							endforeach;*/	
						if(!empty($finalAndroidTokens)):
							$values = [];
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Startup_update');
					// Save notification
							//$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupOverview',base64_decode($this->request->data['id'])]);	 
						endif;
						if(!empty($finalIosTokens)):
							$values = [];
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Startup_update');
					// Save notification	
							//$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupOverview',base64_decode($this->request->data['id'])]);
						endif;
					}
					//saving the push notifications
					$values = [];
					$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupOverview',base64_decode($this->request->data['id'])]);
					$STQ = "select ST.user_id  from startup_teams as ST  where startup_id=".$this->request->data['id'];
					$STsql = $connection->execute ($STQ);
					$user_IDS_array = $STsql->fetchAll('assoc');
						$ALREADY_SAVED_USER_IDS = [];
						if(!empty($user_IDS_array)):
							foreach($user_IDS_array as $single_user):
								if($single_user['user_id']!=''):
									if(!in_array($single_user['user_id'],$ALREADY_SAVED_USER_IDS)):
										
										$this->Contractor->saveNotification($this->request->data['user_id'],
																			$single_user['user_id'],
																			'Startup_update',
																			"Startup ".$this->Contractor->startupName($this->request->data['id'])." has been updated."
																			,$link
																			,json_encode((object)$values));
										$ALREADY_SAVED_USER_IDS[] = $single_user['user_id'];	
									endif;
								endif;
							endforeach;
						endif;						
				}else{
					$result['code']=404;
					$result['message']='not updated';
					echo json_encode($result);
				}				
			}
	}
	
	
	/*
	 *
	 *method for updating the workorder
	 *
	 */
	public function updateWorkorder(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('StartupWorkOrders');
		  $StartupWorkOrders = TableRegistry::get('StartupWorkOrders');
		  
		  
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$requestArray = $jsonData;

				

				if(isset($requestArray['Approved'])&&!empty($requestArray['Approved'])){
					
					$Approved['user_id'] = $requestArray['Approved']['user_id'];
					$Approved['startup_id'] = $requestArray['Approved']['startup_id'];
					$Approved['roadmap_id'] = $requestArray['Approved']['roadmap_id'];
					$Approved['work_date'] = date('Y-m-d',strtotime($requestArray['Approved']['work_date'])); 
					$Approved['work_units'] = $requestArray['Approved']['workunit'];
					
					$Approved['work_date'] = new Time($Approved['work_date']);
					
					$existingWorkOrder = $this->StartupWorkOrders->find('all',['conditions'=>['StartupWorkOrders.user_id'=>$Approved['user_id'],
																		 'StartupWorkOrders.startup_id'=>$Approved['startup_id'],
																		 'StartupWorkOrders.roadmap_id'=>$Approved['roadmap_id'],
																		 'StartupWorkOrders.work_date'=>$Approved['work_date']
																		 //'StartupWorkOrders.status'=>'1'
																		 ]
														  ]
												   )->first();
					
					if(empty($existingWorkOrder)):
						 
						$Approved['status'] = '1';
						
						$workOrder = $StartupWorkOrders->newEntity($Approved);
						$workOrder = $StartupWorkOrders->patchEntity($workOrder,$Approved);
						if($StartupWorkOrders->save($workOrder)){
							$result['code']=200;
							$result['message']='Workorder updated';
							//echo json_encode($result);
							pr($Approved); 
							echo 'success new apprv';
						}else{
							$result['code']=404;
							$result['message']='Workorder not updated';
							//echo json_encode($result);
						}
						
					else:
						
						$Approved['status'] = '1';
						
						$StartupWorkOrdersGet = $StartupWorkOrders->get($existingWorkOrder->id);
						$workOrder = $StartupWorkOrders->patchEntity($StartupWorkOrdersGet,$Approved);
						
						if($StartupWorkOrders->save($workOrder)){
							$result['code']=200;
							$result['message']='Workorder updated';
							//echo json_encode($result);
						}else{
							$result['code']=404;
							$result['message']='Workorder not updated';
							//echo json_encode($result);
						}
						
					endif;
					
				}
				
				if(isset($requestArray['Pending'])
				   &&!empty($requestArray['Pending'])){
					
					$pending['user_id'] = $requestArray['Pending']['user_id'];
					$pending['startup_id'] = $requestArray['Pending']['startup_id'];
					$pending['roadmap_id'] = $requestArray['Pending']['roadmap_id'];
					$pending['work_date'] = date('Y-m-d',strtotime($requestArray['Pending']['work_date'])); 
					$pending['work_units'] = $requestArray['Pending']['workunit'];
					
					$pending['work_date'] = new Time($pending['work_date']);
					
					$existingWorkOrderPending = $this->StartupWorkOrders->find('all',['conditions'=>['StartupWorkOrders.user_id'=>$pending['user_id'],
																		 'StartupWorkOrders.startup_id'=>$pending['startup_id'],
																		 'StartupWorkOrders.roadmap_id'=>$pending['roadmap_id'],
																		 'StartupWorkOrders.work_date'=>$pending['work_date']
																		 //'StartupWorkOrders.status'=>'0'
																		 ]
														  ]
												   )->first();
					
					if(empty($existingWorkOrderPending)):
						 
						$pending['status'] = '0';
						   
						$workOrderPending = $StartupWorkOrders->newEntity($pending);
						$workOrderPending = $StartupWorkOrders->patchEntity($workOrderPending,$pending);
						 
						if($StartupWorkOrders->save($workOrderPending)){
							$result['code']=200;
							$result['message']='Workorder updated';
							//echo json_encode($result);
						}else{
							$result['code']=404;
							$result['message']='Workorder not updated';
							//echo json_encode($result);
						}
						
					else:
						 
						$pending['status'] = '0';
						
						$StartupWorkOrdersPendingGet = $StartupWorkOrders->get($existingWorkOrderPending->id);
						$workOrderPending = $StartupWorkOrders->patchEntity($StartupWorkOrdersPendingGet,$pending);
						
						if($StartupWorkOrders->save($workOrderPending)){
							$result['code']=200;
							$result['message']='Workorder updated';
							//echo json_encode($result);
						}else{
							$result['code']=404;
							$result['message']='Workorder not updated';
							//echo json_encode($result);
						}
						
					endif;
					
				}
				
				if(!isset($requestArray['Approved'])&&!isset($requestArray['Pending']))
				{
							$result['code']=404;
							$result['message']='Workorder not updated';
							
				}
				echo json_encode($result);
			}
		 		  
	}
	
	
	/**
	 * all deliverables
	 *
	 * @return   deliverables   
	 */
	public function allDeliverables(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$RoadmapsTable = $this->loadModel('Roadmaps');
		
		$Roadmaps = $RoadmapsTable->find('all')->order(['order_no' => 'ASC'])->toArray();
		 
		if(!empty($Roadmaps)):
			
			foreach($Roadmaps as $Roadmap){
				 
					$keys['id'] = ($Roadmap->id!='')?$Roadmap->id:' ';
					$keys['name'] = ($Roadmap->name!=' ')?$Roadmap->name:' ';
					
					$finalRoadmap[] = $keys;
				}
			$result['Deliverables'] = $finalRoadmap;
			$result['code'] = 200;
			echo json_encode($result);	
		else:
			$result['Deliverables'] = [];
			$result['code'] = 404;
			echo json_encode($result);
		endif;
		 
					   
	}
	
	/*
	 *upload roadmap docs
	 *
	 */
	
	public function uploadRoadmapDocs(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		$startupDocsTable = TableRegistry::get('StartupDocs');
		  
			if($this->request->is('post')){
				 
				 if(!empty($this->request->data['file_path'])&&($this->request->data['file_path']['error']=='0')){
					
					$file_response = $this->Multiupload->uploadStratupDocs($this->request->data['file_path']);
					
					if(isset($file_response['errors'])&&$file_response['errors']!=''):
						$this->request->data['file_path'] = '';
					else:
						$this->request->data['file_path'] = $file_response['imgName'];
					endif;
					
				 }else{
						$this->request->data['file_path'] = '';
				 }
				
				$startupDoc = $startupDocsTable->newEntity($this->request->data);
				 
				if($startupDoc->errors()){
					 
				//here we are getting the errors while validating the data
				
					$errors = $startupDoc->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
					
				}else{
					$id=json_decode($this->request->data['startup_id']);
					$startupDocsTable->save($startupDoc);
					
					$result['code'] = 200;
					$result['message'] = 'Document successfully uploaded';
					echo json_encode($result);
					
			//sending push notification to the user who has been getting followed
					
					$message = $this->Contractor->entrepreneurName($this->request->data['user_id'])." has uploaded a document ".$this->request->data['file_path'];
					  
					  $receiver_ids = explode(',',$this->request->data['access']);
					  
						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id IN'=>$receiver_ids,
																				   'UserTokens.user_id !='=>$this->request->data['user_id']]])
											->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							
							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;

							/*foreach($tokens as $single_token):
							
								if($single_token['device_type']=='android'):
									$finalAndroidTokens[] = $single_token['access_token'];
								else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
								endif;
								
							endforeach;*/
							
						endif;
						 
						if(!empty($finalAndroidTokens)):
							
							$values = [];
							
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Upload_doc');
							
							//$link= Router::url(['controller' => 'Startups', 'action' => 'editStartupDocs',$id]);
							
							/*if(!empty($receiver_ids)):
								foreach($receiver_ids as $receiver_id):
									if($receiver_id!=''):
										$this->Contractor->saveNotification($this->request->data['user_id'],$receiver_id,'Upload_doc'," has uploaded a document <strong>".$this->request->data['file_path'].'</strong>',$link,json_encode((object)$values));
									endif;
								endforeach;
							endif;*/
						endif;
					 if(!empty($finalIosTokens)):
							
							$values = [];
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Upload_doc');
							
							//$link= Router::url(['controller' => 'Startups', 'action' => 'editStartupDocs',$id]);
							
							/*if(!empty($receiver_ids)):
								foreach($receiver_ids as $receiver_id):
									if($receiver_id!=''):
										$this->Contractor->saveNotification($this->request->data['user_id'],$receiver_id,'Upload_doc'," has uploaded a document <strong>".$this->request->data['file_path'].'</strong>',$link,json_encode((object)$values));
									endif;
								endforeach;
							endif;*/
						endif;
						
						$values = [];
						$link= Router::url(['controller' => 'Startups', 'action' => 'editStartupDocs',$id]);
								
						if(!empty($receiver_ids)):
							foreach($receiver_ids as $receiver_id):
								if($receiver_id!=''):
									$this->Contractor->saveNotification($this->request->data['user_id'],$receiver_id,'Upload_doc'," has uploaded a document <strong>".$this->request->data['file_path'].'</strong>',$link,json_encode((object)$values));
								endif;
							endforeach;
						endif;
				}
				
			}
		 		  
	}

	/**
	* all deliverables list
	*
	* @return   deliverables list
	*/
	public function deliverablesDocsList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$StartupDocsTable = $this->loadModel('StartupDocs');
		
		$startup_id = $_REQUEST['startup_id'];
		
		$StartupDocs = $this->StartupDocs->find('all',['conditions'=>['StartupDocs.startup_id'=>$startup_id]])
												->contain(['Roadmaps'])
												->toArray();
	 
		if(!empty($StartupDocs)):
			
			foreach($StartupDocs as $StartupDoc){
					
					$keys['id'] = ($StartupDoc->id!='')?$StartupDoc->id:' ';
					$keys['date'] = ($StartupDoc->created!=' ')?date('F d, Y',strtotime($StartupDoc->created)):' ';
					$keys['doc_name'] = ($StartupDoc->name!=' '&&$StartupDoc->name!=null)?$StartupDoc->name:' ';
					$keys['download_link'] = ($StartupDoc->file_path!=' ')?'img/roadmap/'.$StartupDoc->file_path:' ';
					
					$keys['roadmap_name'] = $this->Contractor->RoadmapDetails($StartupDoc->roadmap_id);
					
					$user_role = $this->Contractor->teamMemberName($StartupDoc->startup_id,$StartupDoc->user_id);
						
						if(isset($user_role)&&$user_role!=''):
							
							$user = $this->Contractor->userEntrepreneurBasic($StartupDoc->user_id);
							 
							if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
								
								if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
									
									$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
									$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
									
									$keys['user_name'] = $first_name.' '.$last_name;
									
								elseif(!empty($user)):
									
									$first_name = ($user->first_name!='')?$user->first_name:' ';
									$last_name = ($user->last_name!='')?$user->last_name:' ';
									
									$keys['user_name'] = $first_name.' '.$last_name;					
								endif;
								 
							}else{
								
								$first_name = ($user['first_name']!='')?$user['first_name']:' ';
								$last_name = ($user['last_name']!='')?$user['last_name']:' ';
								
								$keys['user_name'] = $first_name.' '.$last_name;
								 
							}
						 
						else:
							
							$user = $this->Contractor->userContractorBasic($StartupDoc->user_id);
							 
							if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
								
								if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
					
									$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
									$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
									
									$keys['user_name'] = $first_name.' '.$last_name;
									
								elseif(!empty($user)):
									
									$first_name = ($user->first_name!='')?$user->first_name:' ';
									$last_name = ($user->last_name!='')?$user->last_name:' ';
									
									$keys['user_name'] = $first_name.' '.$last_name;					
								endif;
								 
							}else{
								
								$first_name = (isset($user['first_name'])&&$user['first_name']!='')?$user['first_name']:' ';
								$last_name = (isset($user['last_name'])&&$user['last_name']!='')?$user['last_name']:' ';
								
								$keys['user_name'] = $first_name.' '.$last_name;
								 
							}
							
						
						endif;
					 
					$finalDocs[] = $keys;
					
				}
				
			$result['filesList'] = $finalDocs;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['filesList'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		 
					   
	}
	
	/**
	* recomended contractors for a startup
	*
	* @return recomended contractors for a startup
	*/
	public function recommendedContractors(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('Startups');
		$this->loadModel('StartupTeams');
		$this->loadModel('Users');
		$this->loadModel('ContractorBasics');
		$this->loadModel('ContractorProfessionals');
		
		$result['TotalItems'] = '0';
		$result['Contractors'] = [];
		$result['code'] = 404;
		
		$startup_id = $_REQUEST['startup_id'];
		$user_id = $_REQUEST['user_id'];
		
		$contractorIds = [];
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'ContractorProfessionals.id' => 'asc'
							]
						];
		
		$Startup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
												->select(['keywords'])
												->first()
												->toArray();
		 
		 $alreadyMembers = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																		   'StartupTeams.approved !='=>'3']])
												->select(['user_id']);
												
		if($alreadyMembers->toArray()):
			
			$alreadyMembers = $alreadyMembers->toArray();
		
				foreach($alreadyMembers as $single_member):
					 if($single_member->user_id!=''):
						$final_members[] = $single_member->user_id;
					 endif;
				endforeach;
				
				if(empty($final_members)):
					$final_members = [];	
				endif;
				
		else:
				$final_members = [];
		endif;
												
		// pr($final_members);die;
		if(!empty($Startup)&&($Startup['keywords']!='')):
				$conditions = [];
				
				array_push($conditions,['ContractorProfessionals.user_id !='=>$user_id]);
				$conditions['OR'] = [];
				 
				foreach(explode(',',$Startup['keywords']) as $single_keyword):
					 
					 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,ContractorProfessionals.keywords)"]);
					 
				endforeach;
				
			//getting the campaigns list
				
				$query = $this->ContractorProfessionals->find('all')
										->where($conditions)
										->select(['user_id']);
				
				$result['TotalItems'] = $query->count();
				
				$contractors = $this->Paginator->paginate(
														$this->ContractorProfessionals->find('all')
														->where($conditions)
														->select(['user_id'])
												, $config);
				  
				if($contractors->toArray()){
					
					$contractors = $contractors->toArray();
					
					foreach($contractors as $singleContractor):
						if($singleContractor->user_id!=''):
							$contractorIds[] = $singleContractor->user_id;
						endif;
					endforeach;
					
					if(!empty($contractorIds)){
						
						
						$conditions = [];
						
						array_push($conditions,['Users.id IN'=>$contractorIds,
																		  'Users.id !='=>$user_id]);
						
						
						
						if(!empty($final_members)):
						array_push($conditions,['Users.id NOT IN'=>$final_members]);
						endif;
						//pr($conditions);die;
						$users = $this->Users->find('all',['conditions'=>$conditions
																 
												 ])
												->contain(['ContractorBasics','ContractorProfessionals'])
												->toArray();
								
						if(!empty($users)){
								
								foreach($users as $singleUser){
									 $keys = [];
									$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';
									
									if((isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									   ||
									   (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									  ){
										
										$first_name = (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
										
										$last_name = (isset($singleUser['contractor_basic']['last_name'])
										&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									  }
									else{
										
										$first_name = (isset($singleUser['first_name'])
										&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
										
										$last_name = (isset($singleUser['last_name'])
										&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									}
									
									$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']);
									$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
									$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
									$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
													&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
									
									$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
													&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
									
									$finalSkills = []; 
									if(isset($singleUser['contractor_professional']['skills'])&&
											 $singleUser['contractor_professional']['skills']!=''):
										
										$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
										
										
										if(!empty($userSkills)):
											
											foreach($userSkills as $key=>$value){
												$skills['id'] = ($key!='')?$key:' ';
												$skills['name'] = ($value!=' ')?$value:' ';
												
												$finalSkills[] = $skills;
											}
											
											$keys['skills'] = $finalSkills;
										else:
											$keys['skills'] = [];
										endif;
									else:
											$keys['skills'] = [];
									endif;
									 
									 $finalKeywords = [];
									if(isset($singleUser['contractor_professional']['keywords'])&&
											 $singleUser['contractor_professional']['keywords']!=''):
										
										$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
										
										if(!empty($userKeywords)):
										 
											foreach($userKeywords as $key=>$value){
												$keywords['id'] = ($key!='')?$key:' ';
												$keywords['name'] = ($value!=' ')?$value:' ';
												
												$finalKeywords[] = $keywords;
											}
											$keys['keywords'] = $finalKeywords;
										else:
											$keys['keywords'] = [];
										endif;
									else:
											$keys['keywords'] = [];
									endif;
									 
									$finalDocs[] = $keys;
									
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
					
				}
		 
		endif;
		 
		 echo json_encode($result);
					   
	}
	
	/**
	* search contractors for a startup
	*
	* @return recomended contractors for a startup
	*/
	public function searchContractors(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('EntrepreneurProfessionals');
		$this->loadModel('Keywords');
		$this->loadModel('Users');
		$this->loadModel('ContractorBasics');
		$this->loadModel('ContractorProfessionals');
		
		$result['TotalItems'] = '0';
		$result['Contractors'] = [];
		$result['code'] = 404;
		$finalDocs = [];
		$entrepreneur_id = $_REQUEST['user_id']; //entrepreneur id
		$search_text = (isset($_REQUEST['search_text'])&&($_REQUEST['search_text']!=''))?$_REQUEST['search_text']:'';
		
		
		$contractorIds = [];
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		
		if($search_text==''):
			
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'ContractorProfessionals.id' => 'asc'
							]
						];

		//there is no seach text availbale in the search of contractor
			
			$EntrepreneurProfessionalsKeywords = $this->EntrepreneurProfessionals->find('all',
												['conditions'=>['EntrepreneurProfessionals.user_id'=>$entrepreneur_id]])
												->select(['keywords'])
												->first();
			 
			if(!empty($EntrepreneurProfessionalsKeywords)&&($EntrepreneurProfessionalsKeywords['keywords']!='')):
			
				$EntrepreneurProfessionalsKeywords = $EntrepreneurProfessionalsKeywords->toArray();
				$conditions = [];
				
				array_push($conditions,['ContractorProfessionals.user_id !='=>$entrepreneur_id]);
				
				$conditions['OR'] = [];
				 
				foreach(explode(',',$EntrepreneurProfessionalsKeywords['keywords']) as $single_keyword):
					 
					 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,ContractorProfessionals.keywords)"]);
					 
				endforeach;
				 
			//getting the campaigns list
				
				$query = $this->ContractorProfessionals->find('all')
										->where($conditions)
										->select(['user_id']);
				
				$result['TotalItems'] = $query->count();
				
				$contractors = $this->Paginator->paginate(
														$this->ContractorProfessionals->find('all')
														->where($conditions)
														->select(['user_id'])
												, $config);
				  
				if($contractors->toArray()){
					
					$contractors = $contractors->toArray();
					
					foreach($contractors as $singleContractor):
						if($singleContractor->user_id!=''):
							$contractorIds[] = $singleContractor->user_id;
						endif;
					endforeach;
					
					if(!empty($contractorIds)){
						
						// Added thid ->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC']) to sort result by name
						$users = $this->Users->find('all',['conditions'=>['Users.id IN'=>$contractorIds,
																		  'Users.id !='=>$entrepreneur_id
																 ]
												 ])
												->contain(['ContractorBasics','ContractorProfessionals'])
												->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC'])
												->toArray();
								
						if(!empty($users)){
								
								foreach($users as $singleUser){
									 $keys = [];
									$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';
									
									if((isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									   ||
									   (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									  ){
										
										$first_name = (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
										
										$last_name = (isset($singleUser['contractor_basic']['last_name'])
										&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									  }
									else{
										
										$first_name = (isset($singleUser['first_name'])
										&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
										
										$last_name = (isset($singleUser['last_name'])
										&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									}
									 
									 $keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']);
									$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
									$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
									$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
													&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
									
									$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
													&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
									
									$finalSkills = []; 
									if(isset($singleUser['contractor_professional']['skills'])&&
											 $singleUser['contractor_professional']['skills']!=''):
										
										$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
										
										
										if(!empty($userSkills)):
											
											foreach($userSkills as $key=>$value){
												$skills['id'] = ($key!='')?$key:' ';
												$skills['name'] = ($value!=' ')?$value:' ';
												
												$finalSkills[] = $skills;
											}
											
											$keys['skills'] = $finalSkills;
										else:
											$keys['skills'] = [];
										endif;
									else:
											$keys['skills'] = [];
									endif;
									 
									 $finalKeywords = [];
									if(isset($singleUser['contractor_professional']['keywords'])&&
											 $singleUser['contractor_professional']['keywords']!=''):
										
										$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
										
										if(!empty($userKeywords)):
										 
											foreach($userKeywords as $key=>$value){
												$keywords['id'] = ($key!='')?$key:' ';
												$keywords['name'] = ($value!=' ')?$value:' ';
												
												$finalKeywords[] = $keywords;
											}
											$keys['keywords'] = $finalKeywords;
										else:
											$keys['keywords'] = [];
										endif;
									else:
											$keys['keywords'] = [];
									endif;
									
									$finalDocs[] = $keys;
									
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
					
				}
		 
			endif;
		
		else:
			//'Users.id' => 'asc'
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Users.first_name' => 'asc','Users.last_name' => 'ASC'
							]
						];
				
				$connection = ConnectionManager::get('default');
				
				$qq = "SELECT CP.user_id FROM keywords as KY INNER JOIN contractor_professionals as CP
											 ON FIND_IN_SET(KY.id, CP.keywords) where KY.name like '%".$_REQUEST['search_text']."%' GROUP BY CP.user_id
											 UNION SELECT CB.user_id FROM contractor_basics as CB where CB.first_name like '%".$_REQUEST['search_text']."%'
											 OR CB.last_name like '%".$_REQUEST['search_text']."%' OR (CB.price='".$_REQUEST['search_text']."' && CB.price!='' && CB.price!=0) GROUP BY CB.user_id";
				
				$sql = $connection->execute ($qq);
			    $user_ids = $sql->fetchAll('assoc');
				
				if(!empty($user_ids)):
					
					
					foreach($user_ids as $SingleUser):
						if(isset($SingleUser['user_id'])&&($SingleUser['user_id']!='')){
							$contractorIds[] = $SingleUser['user_id'];
						}
					endforeach;
					
					$conditions = ['Users.id IN'=>$contractorIds,
								   'Users.id !='=>$entrepreneur_id
								   ];
					
					$query = $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals']);
					
					$result['TotalItems'] = $query->count();
					
					if(!empty($contractorIds)){
						
						$users = $this->Paginator->paginate(
															 $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals'])
													, $config);
					 	
						if(!empty($users)){
								
								foreach($users as $singleUser){
									 $keys = [];
									$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';
									
									if((isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									   ||
									   (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									  ){
										
										$first_name = (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
										
										$last_name = (isset($singleUser['contractor_basic']['last_name'])
										&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									  }
									else{
										
										$first_name = (isset($singleUser['first_name'])
										&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
										
										$last_name = (isset($singleUser['last_name'])
										&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									}
									$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']); 
									$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
									$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
									$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
													&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
									
									$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
													&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
									
									$finalSkills = []; 
									if(isset($singleUser['contractor_professional']['skills'])&&
											 $singleUser['contractor_professional']['skills']!=''):
										
										$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
										
										
										if(!empty($userSkills)):
											
											foreach($userSkills as $key=>$value){
												$skills['id'] = ($key!='')?$key:' ';
												$skills['name'] = ($value!=' ')?$value:' ';
												
												$finalSkills[] = $skills;
											}
											
											$keys['skills'] = $finalSkills;
										else:
											$keys['skills'] = [];
										endif;
									else:
											$keys['skills'] = [];
									endif;
									 
									 $finalKeywords = [];
									if(isset($singleUser['contractor_professional']['keywords'])&&
											 $singleUser['contractor_professional']['keywords']!=''):
										
										$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
										
										if(!empty($userKeywords)):
										 
											foreach($userKeywords as $key=>$value){
												$keywords['id'] = ($key!='')?$key:' ';
												$keywords['name'] = ($value!=' ')?$value:' ';
												
												$finalKeywords[] = $keywords;
											}
											$keys['keywords'] = $finalKeywords;
										else:
											$keys['keywords'] = [];
										endif;
									else:
											$keys['keywords'] = [];
									endif;
									
									$finalDocs[] = $keys;
									
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
				 
			endif;
				
		endif;
		
		echo json_encode($result);
					   
	}
	
	/**
	* add team member
	*
	* @return add team member
	*/
	public function addTeamMember(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		//$this->loadModel('WebNotification');
		
		if($this->request->is('post')){
				 
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
				$StartupTeamsTable = TableRegistry::get('StartupTeams');
				$StartupTeams = $StartupTeamsTable->newEntity($this->request->data);
				 
				$exists = $StartupTeamsTable->find('all',['conditions'=>['startup_id'=>$this->request->data['startup_id'],'user_id'=>$this->request->data['user_id']]])->first();

				$alloctedUnits= str_replace(",","",$this->request->data['work_units_allocated']);

                $approUnits= str_replace(",","",$this->request->data['work_units_approved']); 

                if($approUnits>$alloctedUnits){

                        $result['code'] = 404;
						$result['message'] = 'Approved work units can not be greater then to allocated work units.';
						echo json_encode($result);

                }else{
						if(empty($exists)or $exists['approved']==3):
							
									if ($StartupTeamsTable->save($StartupTeams)){
									  
										$result['code'] = 200;
										$result['message'] = 'Team Member successfully added.';
										echo json_encode($result);
										
										//sending push notification to the user who has been getting followed
											
											//$message = "You have been added to ".$this->Contractor->startupName($this->request->data['startup_id'])." team.";
											
											$extra_message = "Entrepreneur ".$this->Contractor->entrepreneurName($this->request->data['hired_by'])." has offered you the opportunity to work as a ".$this->Contractor->teamMemberRoleName($this->request->data['contractor_role_id'])." in Startup ".$this->Contractor->startupName($this->request->data['startup_id'])." and has approved ".$this->request->data['work_units_approved']." Work Units at an hourly rate of $".$this->request->data['hourly_price'].". Do you want to be a member of this Startup?";
											
											$message = $this->Contractor->entrepreneurName($this->request->data['hired_by'])." has sent you an invitation for the startup ".$this->Contractor->startupName($this->request->data['startup_id']);
											$values_for_ios = $this->Contractor->entrepreneurName($this->request->data['hired_by']).",".$this->Contractor->teamMemberRoleName($this->request->data['contractor_role_id']).",".$this->Contractor->startupName($this->request->data['startup_id']).",".$this->request->data['work_units_approved'].",".$this->request->data['hourly_price'];
											
											
											
											$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$this->request->data['user_id']]])
																->select(['access_token','device_type']);
											
											$finalAndroidTokens = [];
											$finalIosTokens = [];
											if($userToken->toArray()):
												
												$tokens = $userToken->toArray();
												
												$blankArray=[];
												foreach($tokens as $single_token):
												
													if (!in_array($single_token['access_token'], $blankArray)){

														if($single_token['device_type']=='android'):
															$finalAndroidTokens[] = $single_token['access_token'];
														else:
															//$finalIosTokens[] = $single_token['access_token'];
															$length = strlen($single_token['access_token']);
							                      			if($length >60){
							                        			$finalIosTokens[] = $single_token['access_token'];
							                        		}
														endif;   
													}  
					                				array_push($blankArray,$single_token['access_token']);
												endforeach;

												/*foreach($tokens as $single_token):
													
													if($single_token['device_type']=='android'):
														$finalAndroidTokens[] = $single_token['access_token'];
													else:
														//$finalIosTokens[] = $single_token['access_token'];
														$length = strlen($single_token['access_token']);
							                      			if($length >60){
							                        			$finalIosTokens[] = $single_token['access_token'];
							                        		}
													endif; 
													
												endforeach;*/
												
											endif;
											 
											$values = ['startup_id'=>$this->request->data['startup_id'],
														  'extra_message'=>$extra_message];
											$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
											$last_notification_id = $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member',$extra_message,$link,json_encode($values));
											 
											 $last_notification_id = (isset($last_notification_id))?$last_notification_id:'';
											 
											if(!empty($finalAndroidTokens)):
												
												 $values = ['startup_id'=>$this->request->data['startup_id'],
														   'extra_message'=>$extra_message,
														   'notification_id'=>$last_notification_id]; 
												
												$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Add_member');
												 
											    //$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
		                                      
											    //$this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member',$extra_message,$link,json_encode($values));

											endif;
											
											if(!empty($finalIosTokens)):
												 
												 $values = ['startup_id'=>$this->request->data['startup_id'],
															'extra_message'=>$values_for_ios,
														    'notification_id'=>$last_notification_id
															];
												
												// echo $message;
												// pr($finalIosTokens);
												// pr($values);
												// die;
												 
												$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Add_member');
											 
											   // $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
		                                      
												// $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member',$extra_message,$link,json_encode($values));
											endif;
											
											//saving the message
								
										/*$values = ['startup_id'=>$this->request->data['startup_id'],
														   'extra_message'=>$extra_message];
										$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
										 $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member',$extra_message,$link,json_encode($values));*/
										
									}else{
										if($StartupTeams->errors()){
						 
											//here we are getting the errors while validating the data					
											$errors = $StartupTeams->errors();						
											foreach($errors as $key=>$error){
												foreach($error as $errorKey=>$errorMessage){
													$finalErrors[$key] = $errorMessage;
												}
											}
											
											$result['code'] = 404;
											$result['message'] = $errorMessage;
											echo json_encode($result);
										}else{
										 	$result['code'] = 404;
										 	$result['message'] = 'Team Member can not be added. Please try after sometime.';
										 	echo json_encode($result);
										}
						
									}
						
						elseif($exists['approved']=='3'):
						 
						$this->request->data['approved'] = '0';
						 
						$startupTeamData = $StartupTeamsTable->get($exists['id']);
						
						$startupTeamFinalData = $StartupTeamsTable->patchEntity($startupTeamData, $this->request->data);
							   
						      if ($StartupTeamsTable->save($startupTeamFinalData)){
									 
										$result['code'] = 200;
										$result['message'] = 'Team Member successfully added.';
										echo json_encode($result);
										
									//sending push notification to the user who has been getting followed
											
											//$message = "You have been added to ".$this->Contractor->startupName($this->request->data['startup_id'])." team.";
											 
											$extra_message = "Entrepreneur ".$this->Contractor->entrepreneurName($this->request->data['hired_by'])." has offered you the opportunity to work as ".$this->Contractor->teamMemberRoleName($this->request->data['contractor_role_id'])." in Startup ".$this->Contractor->startupName($this->request->data['startup_id'])." and has approved ".$this->request->data['work_units_approved']." Work Units at an hourly rate of $".$this->request->data['hourly_price'].". Do you want to be a member of this Startup?";
														
											$message = $this->Contractor->entrepreneurName($this->request->data['hired_by'])." has sent you an invitation for the startup ".$this->Contractor->startupName($this->request->data['startup_id']);;		
											$values_for_ios = $this->Contractor->entrepreneurName($this->request->data['hired_by']).",".$this->Contractor->teamMemberRoleName($this->request->data['contractor_role_id']).",".$this->Contractor->startupName($this->request->data['startup_id']).",".$this->request->data['work_units_approved'].",".$this->request->data['hourly_price'];
											$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$this->request->data['user_id']]])
																->select(['access_token','device_type']);
											$finalAndroidTokens = [];
											$finalIosTokens = [];
											if($userToken->toArray()):
												
												$tokens = $userToken->toArray();


												$blankArray=[];
												foreach($tokens as $single_token):
												
													if (!in_array($single_token['access_token'], $blankArray)){

														if($single_token['device_type']=='android'):
															$finalAndroidTokens[] = $single_token['access_token'];
														else:
															//$finalIosTokens[] = $single_token['access_token'];
															$length = strlen($single_token['access_token']);
							                      			if($length >60){
							                        			$finalIosTokens[] = $single_token['access_token'];
							                        		}
														endif;   
													}  
					                				array_push($blankArray,$single_token['access_token']);
												endforeach;
												
												/*foreach($tokens as $single_token):
													
													if($single_token['device_type']=='android'):
														$finalAndroidTokens[] = $single_token['access_token'];
													else:
														//$finalIosTokens[] = $single_token['access_token'];
														$length = strlen($single_token['access_token']);
							                      			if($length >60){
							                        			$finalIosTokens[] = $single_token['access_token'];
							                        		}
													endif; 
													
												endforeach;*/
												
											endif;
											 
											$values = ['startup_id'=>$this->request->data['startup_id'],
														   'extra_message'=>$extra_message];
											 
											$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
											$last_notification_id = $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member',$extra_message,$link,json_encode($values));
											
											$last_notification_id = (isset($last_notification_id))?$last_notification_id:'';
											
											if(!empty($finalAndroidTokens)):
												
												$values = ['startup_id'=>$this->request->data['startup_id'],
														   'extra_message'=>$extra_message,
														   'notification_id'=>$last_notification_id];
												
												$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Add_member');
												 
											  //  $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
		                                       // $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member'," has sent you an invitation for the startup ".$this->Contractor->startupName($this->request->data['startup_id']),$link,json_encode($values));

											endif;
											if(!empty($finalIosTokens)):
												
												$values = ['startup_id'=>$this->request->data['startup_id'],
														   'extra_message'=>$values_for_ios,
														   'notification_id'=>$last_notification_id];
												
												$this->Push->sendIphonePushMessage($finalIosTokens,$extra_message,$values,'Add_member');
												 
											   // $link= Router::url(['controller' => 'Startups', 'action' => 'viewStartup',base64_encode($this->request->data['startup_id'])]);
		                                       // $this->Contractor->saveNotification($this->request->data['hired_by'],$this->request->data['user_id'],'Add_member'," has sent you an invitation for the startup ".$this->Contractor->startupName($this->request->data['startup_id']),$link,json_encode($values));

											endif;
											
											
									}else{
							
										 $result['code'] = 404;
										 $result['message'] = 'Team Member not added.';
										 echo json_encode($result);
						
									}
							 
						else:
							 
							 $result['code'] = 404;
							 $result['message'] = 'Previous work order still pending.';
							 echo json_encode($result);
							 
						endif;
				}//Check if Approved units greater to allocated
				
		} 
	}
	
	/**
	* rate contractor
	*
	* @return rate contractor
	*/
	public function rateContractor(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		if($this->request->is('post')){
				
			$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;
			

			//Check user type for rating =>CONTRACTOR
			if($this->request->data['user_type']=='CONTRACTOR'){	

				$RatingsTable = TableRegistry::get('Ratings'); 
				$exists = $RatingsTable->find('all',['conditions'=>['given_by' => $this->request->data['given_by'],
														  'given_to' => $this->request->data['given_to'],'deliverable'=>$this->request->data['deliverable']]])
														->first();				 
				if(empty($exists)){
					 
					$Ratings = $RatingsTable->newEntity($this->request->data);
					
					if($Ratings->errors()){
						 
					//here we are getting the errors while validating the data					
						$errors = $Ratings->errors();						
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
						
						$result['code'] = 404;
						$result['errors'] = $finalErrors;
						echo json_encode($result);
						
					}else{
						
						if ($RatingsTable->save($Ratings)){
						 $result['code'] = 200;
						 $result['message'] = 'Successfully rated';
						 echo json_encode($result);
						 
				       //sending push notification to the user who has been getting followed
						
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has rated your profile.";
						 
							$userToken = $this->UserTokens->find('all',
												['conditions'=>['UserTokens.user_id'=>$this->request->data['given_to']]])
												->select(['access_token','device_type']);
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();
								
								$blankArray=[];
								foreach($tokens as $single_token):
								
									if (!in_array($single_token['access_token'], $blankArray)){

										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;   
									}  
	                				array_push($blankArray,$single_token['access_token']);
								endforeach;

								/*foreach($tokens as $single_token):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endforeach;*/
								
							endif;
							 
							if(!empty($finalAndroidTokens)):
								
								$values = [];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Rate_user');
								
							endif;
							if(!empty($finalIosTokens)):
								
								$values = [];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Rate_user');
								
							endif;
							
							//saving the message
							
							$values = [];
							$link= Router::url(['controller' => 'Contractors', 'action' => 'excellenceAwards']);
							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Rate_user'," has rated your <strong>profile.</strong>",$link,json_encode((object)$values));
							
						}else{
							 $result['code'] = 404;
							 $result['message'] = 'not rated';
							 echo json_encode($result);
						}
					}
					
					
				}else{
					 
					$query = $RatingsTable->query();
					
					if($query->update()
					->set([
								'rating_star'=>$this->request->data['rating_star'],
								'description'=>$this->request->data['description']
						   ])
					->where([
								'given_by' => $this->request->data['given_by'],
								'given_to' => $this->request->data['given_to']
							])
					->execute()){
						
						$result['code']=200;
						$result['message']='successfully rated';
						echo json_encode($result);
						
						//sending push notification to the user who has been getting followed
						
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has rated your profile.";
						 
							$userToken = $this->UserTokens->find('all',
												['conditions'=>['UserTokens.user_id'=>$this->request->data['given_to']]])
												->select(['access_token','device_type']);
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();
								$blankArray=[];
								foreach($tokens as $single_token):
								
									if (!in_array($single_token['access_token'], $blankArray)){

										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;   
									}  
	                				array_push($blankArray,$single_token['access_token']);
								endforeach;

								/*foreach($tokens as $single_token):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endforeach;*/
								
							endif;
							 
							if(!empty($finalAndroidTokens)):
								
								$values = [];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Rate_user');
								
								
							endif;
							if(!empty($finalIosTokens)):
								
								$values = [];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Rate_user');
								

							endif;
							
							//saving the message
							
							$values = [];
							$link= Router::url(['controller' => 'Contractors', 'action' => 'excellenceAwards']);
							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Rate_user'," has rated your <strong>profile.</strong>",$link,json_encode((object)$values));
							
							
					}else{
						$result['code']=404;
						$result['message']='not rated';
						echo json_encode($result);
					}
					
				}
			

			//Check user type for rating =>ENTREPRENEUR	
			}else{	

				$RatingsTable = TableRegistry::get('EntrepreneurRatings'); 
				$exists = $RatingsTable->find('all',['conditions'=>['given_by' => $this->request->data['given_by'],
														  'given_to' => $this->request->data['given_to'],'deliverable'=>$this->request->data['deliverable']]])
														->first();
				if(empty($exists)){

					 
					$Ratings = $RatingsTable->newEntity($this->request->data);
					
					if($Ratings->errors()){
						 
					//here we are getting the errors while validating the data					
						$errors = $Ratings->errors();						
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
						
						$result['code'] = 404;
						$result['errors'] = $finalErrors;
						echo json_encode($result);
						
					}else{
						
						if ($RatingsTable->save($Ratings)){
						 $result['code'] = 200;
						 $result['message'] = 'Successfully rated';
						 echo json_encode($result);
						 
				       //sending push notification to the user who has been getting followed
						
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has rated your profile.";
						 
							$userToken = $this->UserTokens->find('all',
												['conditions'=>['UserTokens.user_id'=>$this->request->data['given_to']]])
												->select(['access_token','device_type']);
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();
								
								$blankArray=[];
								foreach($tokens as $single_token):
								
									if (!in_array($single_token['access_token'], $blankArray)){

										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;   
									}  
	                				array_push($blankArray,$single_token['access_token']);
								endforeach;

								/*foreach($tokens as $single_token):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endforeach;*/
								
							endif;
							 
							if(!empty($finalAndroidTokens)):
								
								$values = [];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Rate_user');
								
							endif;
							if(!empty($finalIosTokens)):
								
								$values = [];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Rate_user');
								
							endif;
							
							//saving the message
							
							$values = [];
							$link= Router::url(['controller' => 'Contractors', 'action' => 'excellenceAwards']);
							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Rate_user'," has rated your <strong>profile.</strong>",$link,json_encode((object)$values));
							
						}else{
							 $result['code'] = 404;
							 $result['message'] = 'not rated';
							 echo json_encode($result);
						}
					}


				}else{


					 
					$query = $RatingsTable->query();
					
					if($query->update()
					->set([
								'rating_star'=>$this->request->data['rating_star'],
								'description'=>$this->request->data['description']
						   ])
					->where([
								'given_by' => $this->request->data['given_by'],
								'given_to' => $this->request->data['given_to']
							])
					->execute()){
						
						$result['code']=200;
						$result['message']='successfully rated';
						echo json_encode($result);
						
						//sending push notification to the user who has been getting followed
						
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has rated your profile.";
						 
							$userToken = $this->UserTokens->find('all',
												['conditions'=>['UserTokens.user_id'=>$this->request->data['given_to']]])
												->select(['access_token','device_type']);
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();

								$blankArray=[];
								foreach($tokens as $single_token):
								
									if (!in_array($single_token['access_token'], $blankArray)){

										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;   
									}  
	                				array_push($blankArray,$single_token['access_token']);
								endforeach;
								
								/*foreach($tokens as $single_token):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endforeach;*/
								
							endif;
							 
							if(!empty($finalAndroidTokens)):
								
								$values = [];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Rate_user');
								
								
							endif;
							if(!empty($finalIosTokens)):
								
								$values = [];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Rate_user');
								

							endif;
							
							//saving the message
							
							$values = [];
							$link= Router::url(['controller' => 'Contractors', 'action' => 'excellenceAwards']);
							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Rate_user'," has rated your <strong>profile.</strong>",$link,json_encode((object)$values));
							
							
					}else{
						$result['code']=404;
						$result['message']='not rated';
						echo json_encode($result);
					}
					

				}										
			}	
		} 
	}
	
	 /**
	 * team members roles  
	 *
	 * @return   team members roles    
	 */
	public function teamMembersRoles(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ContractorRolesTable = $this->loadModel('ContractorRoles');
		
		$ContractorRoles = $ContractorRolesTable->find('all')->toArray();
		
		if(!empty($ContractorRoles)):
			
			foreach($ContractorRoles as $ContractorRole){
				 
					$keys['id'] = ($ContractorRole->id!='')?$ContractorRole->id:' ';
					$keys['name'] = ($ContractorRole->name!=' ')?$ContractorRole->name:' ';
					
					$finalRoles[] = $keys;
				}
			$result['Roles'] = $finalRoles;
			
		else:
			$result['Roles'] = [];
		endif;
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}
	
	/**
	 * delete startup  
	 *
	 * @return delete startup   
	 */
	public function deleteStartup(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ContractorRolesTable = $this->loadModel('Startups');
		
		$startup_id = $_REQUEST['startup_id'];
		
		$entity = $this->Startups->get($startup_id);
			
		if($this->Startups->delete($entity)){
			
			$result['code'] = 200;
			$result['message'] = 'startup deleted';
			echo json_encode($result);
				
		}else{
			
			$result['code'] = 404;
			$result['message'] = 'startup not deleted';
			echo json_encode($result);
			
		}
		 			   
	}
	
	/**
	 * delete delete Campaign  
	 *
	 * @return   delete Campaign   
	 */
	public function deleteCampaign(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ContractorRolesTable = $this->loadModel('Campaigns');
		
		$campaign_id = $_REQUEST['campaign_id'];
		
		$entity = $this->Campaigns->get($campaign_id);
		
		if($this->Campaigns->delete($entity)){
			
			$result['code'] = 200;
			$result['message'] = 'Campaign deleted';
			echo json_encode($result);
			
		}else{
			
			$result['code'] = 404;
			$result['message'] = 'Campaign not deleted';
			echo json_encode($result);
			
		}
		 			   
	}

	/**
	 * all ratings
	 *
	 * @return   ratings   
	 */
	public function allRatings(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		
		
		$user_id = $_REQUEST['user_id'];
		$user_type= $_REQUEST['user_type'];

		if($user_type=='ENTREPRENEUR'){

		$RatingsTable = $this->loadModel('EntrepreneurRatings');
		$Ratings = $RatingsTable->find('all',['conditions'=>['EntrepreneurRatings.given_to'=>$user_id]])
								->toArray();
		}else {
		$RatingsTable = $this->loadModel('WorkorderRatings');	
		$Ratings = $RatingsTable->find('all',['conditions'=>['WorkorderRatings.given_to'=>$user_id]])
								->toArray();	
		}

		if(!empty($Ratings)):
			
			foreach($Ratings as $Rating){
				  
					$keys['givenby_id'] = ($Rating->given_by!='')?$Rating->given_by:' ';
					$keys['givenby_name'] = $this->Contractor->contractorName($Rating->given_by);
					$keys['givenby_image'] = $this->Contractor->contractorImage($Rating->given_by);
					$keys['description'] = ($Rating->description!=' ')?$Rating->description:' ';
					$keys['rating'] = ($Rating->rating_star!=' ')?$Rating->rating_star:'0';
					$keys['date'] = ($Rating->created!=' ')?date('F d, Y',strtotime($Rating->created)):' ';
					
					$finalRoadmap[] = $keys;
				}
			
			$result['Ratings'] = $finalRoadmap;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
		
			$result['Ratings'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		 
					   
	}
	
	/**
	 * start up roadmaps status completed/not completed
	 *
	 * @return start up roadmaps status completed/not completed   
	 */
	public function startupRoadmapsStaus(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$StartupRoadmapsTable = $this->loadModel('StartupRoadmaps');
		
		$startup_id = $_REQUEST['startup_id'];
		
		$StartupRoadmaps = $StartupRoadmapsTable->find('all',['conditions'=>['StartupRoadmaps.startup_id'=>$startup_id,
																			 'StartupRoadmaps.complete'=>1
																			 ]
															  ]
													   )
												->contain(['Roadmaps'])
												->toArray();
		 
		if(!empty($StartupRoadmaps)):
			
			foreach($StartupRoadmaps as $StartupRoadmap){
				    
					$keys['roadmap_id'] = ($StartupRoadmap->current_roadmap!=' ')?$StartupRoadmap->current_roadmap:' ';
					$keys['roadmap_name'] = (isset($StartupRoadmap['roadmap']['name']))?$StartupRoadmap['roadmap']['name']:' ';
					
					$finalRoadmap[] = $keys;
				}
			
			$result['CompletedRoadmaps'] = $finalRoadmap;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
		
			$result['CompletedRoadmaps'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		 
					   
	}
	
	/*
	 *
	 *update startup roadmap
	 *
	 */
	public function updateStartupRoadmap(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupRoadmapsTable = TableRegistry::get('StartupRoadmaps');
		$startupTable = TableRegistry::get('Startups');
			
			if($this->request->is('post')){
				//$this->request->data = file_get_contents('php://input');
				 if(!empty($this->request->data['file_path'])&&($this->request->data['file_path']['error']=='0')){
					
					$file_response = $this->Multiupload->uploadStratupDocs($this->request->data['file_path']);
					
					if(isset($file_response['errors'])&&$file_response['errors']!=''):
						$this->request->data['file_path'] = '';
					else:
						$this->request->data['file_path'] = $file_response['imgName'];
					endif;
					
				 }else{
				 	
						$this->request->data['file_path'] = '';
				 }
				
				$startupDoc = $startupRoadmapsTable->newEntity($this->request->data);
				
				if($startupDoc->errors()){
					 
				//here we are getting the errors while validating the data
				
					$errors = $startupDoc->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				}else{
				 
					if($startupRoadmapsTable->save($startupDoc)){
						
						$query = $startupTable->query();
                            $query->update()
                                  ->set(['next_step'=>$this->request->data['next_step']
                                         ])
                                  ->where(['id' => $this->request->data['startup_id']])
                                  ->execute();
						
						$result['code'] = 200;
						$result['message'] = 'Roadmap document uploaded successfully';
						echo json_encode($result);
					}else{
						$result['code'] = 404;
						$result['message'] = 'startup roadmap not updated';
						echo json_encode($result);
					}
					
					
				}
				
			}
		 		  
	}
	
	/*
	 *
	 *update startup Profile
	 *
	 */
	public function uploadStartupProfile(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		 $this->loadModel('StartupProfiles');
		$StartupProfilesTable = TableRegistry::get('StartupProfiles');
			
			if($this->request->is('post')){
			
				  $exists = $StartupProfilesTable->exists(['startup_id' => $this->request->data['startup_id']]);
				 
				 if(!$exists){
					
							if(!empty($this->request->data['file_path'])&&($this->request->data['file_path']['error']=='0')){
					
								$file_response = $this->Multiupload->uploadStratupProfileDocs($this->request->data['file_path']);
								
								if(isset($file_response['errors'])&&$file_response['errors']!=''):
									$this->request->data['file_path'] = '';
								else:
									$this->request->data['file_path'] = $file_response['imgName'];
								endif;
								
							 }else{
									$this->request->data['file_path'] = '';
							 }
							
							$startupDoc = $StartupProfilesTable->newEntity($this->request->data);
							 
							if($startupDoc->errors()){
								 
							//here we are getting the errors while validating the data
							
								$errors = $startupDoc->errors();
								
								foreach($errors as $key=>$error){
									foreach($error as $errorKey=>$errorMessage){
										$finalErrors[$key] = $errorMessage;
									}
								}
								
								$result['code'] = 404;
								$result['errors'] = $finalErrors;
								echo json_encode($result);
							}else{
								
								if($StartupProfilesTable->save($startupDoc)){
									 
									$result['code'] = 200;
									$result['message'] = 'startup profile successfully updated';
									echo json_encode($result);
								}else{
									$result['code'] = 404;
									$result['message'] = 'startup profile not updated';
									echo json_encode($result);
								}
								
								
							}
					
					
				 }else{
							
							$startupProfile = $this->StartupProfiles->find('all'
											,['conditions'=>['StartupProfiles.startup_id'=>$this->request->data['startup_id']]])
												->first();
							
							$startupProfile = $startupProfile->toArray(); 
							$OldImage = $startupProfile['file_path'];
							
							if(!empty($this->request->data['file_path'])&&($this->request->data['file_path']['error']=='0')){
					
								$file_response = $this->Multiupload->uploadStratupProfileDocs($this->request->data['file_path']);
								
								if(isset($file_response['errors'])&&$file_response['errors']!=''):
									$this->request->data['file_path'] = '';
								else:
									$this->request->data['file_path'] = $file_response['imgName'];
									
									if($OldImage!='' && file_exists('img/startup_profile_docs/'.$OldImage)){
										unlink(WWW_ROOT . 'img/startup_profile_docs/' .$OldImage);
									}
									
								endif;
								
							 }else{
									$this->request->data['file_path'] = $OldImage;
							 }
							
							$startupProfileData = $StartupProfilesTable->get($startupProfile['id']); 
							
							if($this->request->is(['patch','post','put'])){
								
								$startupProfileFinalData = $StartupProfilesTable->patchEntity($startupProfileData, $this->request->data);
								
								if($startupProfileFinalData->errors()){
									
								//here we are getting the errors while validating the data
								
									$errors = $startupProfileFinalData->errors();
									
									foreach($errors as $key=>$error){
										foreach($error as $errorKey=>$errorMessage){
											$finalErrors[$key] = $errorMessage;
										}
									}
									
									$result['code'] = 404;
									$result['errors'] = $finalErrors;
									
								}else{
									
									if($StartupProfilesTable->save($startupProfileFinalData)){
										
										$result['code'] = 200;
										$result['message'] = 'startup profile successfully updated';
										echo json_encode($result);
										
									}else{
										
										$result['code'] = 404;
										$result['message'] = 'startup profile not updated';
										echo json_encode($result);
										
									}
									
								}
								
							}
					
					
				 }
				
				 
				
			}
		 		  
	}
	
	/*
	 *
	 *update startup Profile
	 *
	 */
	public function Contractorexcel(){
		$this->viewBuilder()->layout(false);
		
		  
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$RoadmapsTable = $this->loadModel('Roadmaps');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
		
		$FinalObject = [];
		$deliverables_list = [];
		$UserHoursDetails = [];
		
		if($this->request->is('post')){
			
			
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				 
				$user_id = $this->request->data['user_id'];
				$startup_id = $this->request->data['startup_id'];
				$date = $this->request->data['date'];
				$day = $this->request->data['day'];
				
				$week_no = date('W', strtotime($date));
				$year = date('Y', strtotime($date));
				
				$from = date("Y-m-d", strtotime("{$year}-W{$week_no}-1")); //Returns the date of monday in week
				$to = date("Y-m-d", strtotime("{$year}-W{$week_no}-7"));   //Returns the date of sunday in week
				 
				while($from <= $to){
					
					$singleStartup = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
											->contain(['StartupTeams'=>['conditions'=>['StartupTeams.startup_id'=>$startup_id,
																					   'StartupTeams.user_id'=>$user_id]
																		]
													   ,'StartupWorkOrders'=>['conditions'=>['StartupWorkOrders.startup_id'=>$startup_id,
																							'StartupWorkOrders.user_id'=>$user_id,
																							'StartupWorkOrders.work_date'=>$from
																							]
																		]
													   ])
											->first();
					
					if(!empty($singleStartup)):
						
						$result['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
						$result['teammember_id'] = ($singleStartup->user_id!='')?$singleStartup->user_id:' ';
						$result['Allocated_hours'] = (isset($singleStartup['startup_teams'][0]['work_units_allocated']))?$singleStartup['startup_teams'][0]['work_units_allocated']:' ';
						$result['Approved_hours'] = (isset($singleStartup['startup_teams'][0]['work_units_approved']))?$singleStartup['startup_teams'][0]['work_units_approved']:' ';
						
						if(!empty($singleStartup['startup_work_orders'])){
								 
								$singleDateWorkOrderArray = [];
								
								foreach($singleStartup['startup_work_orders'] as $singleWorkOrder):
									
									$singleDeliverable['work_orderid'] = ($singleWorkOrder->id!='')?$singleWorkOrder->id:' ';
									
									$roadmap = $this->Contractor->RoadmapDetails($singleWorkOrder->roadmap_id);
									
									$singleDeliverable['deliverable_name'] = $roadmap;
									$singleDeliverable['work_units'] = ($singleWorkOrder->work_units!='')?$singleWorkOrder->work_units:' ';;
									
									$singleDateWorkOrderArray[] = $singleDeliverable;
										
								endforeach;
								 
								$singleDateObject['date'] = $from;
								$singleDateObject['deliverables']  = $singleDateWorkOrderArray;
							     
						}else{
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
							
						}
						
					else:
							
							$singleDateObject['date'] = $from;
							$singleDateObject['deliverables']  = [];
						 
					endif;
					
					$FinalObject[] = $singleDateObject;
					
					$from = date('Y-m-d', strtotime('+1 day', strtotime($from)));
				}
			
	//getting the deliverable name
			
			$deliverables = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
															'StartupTeams.user_id'=>$user_id]])
													->select(['roadmap_id'])
													->first();
			
			if(!empty($deliverables)&&($deliverables['roadmap_id']!='')):
			
				foreach(explode(',',$deliverables['roadmap_id']) as $deliverable):
					if($deliverable!=''):
						$rdMap = $this->Roadmaps->find('all',['conditions'=>['Roadmaps.id'=>$deliverable]])
													->select(['name'])
													->first();
						if(!empty($rdMap)&&($rdMap->name!='')):
							$deliverables_list[] = $rdMap->name;
						endif;
					endif;	
				endforeach;
				
			endif;
			
			$HoursDetails = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id,
															'StartupTeams.user_id'=>$user_id]])
																->select(['work_units_allocated','work_units_approved'])
																->first();
			
			if(!empty($HoursDetails)):
				
				$UserHoursDetails['AllocatedHours'] = ($HoursDetails->work_units_allocated!='')?$HoursDetails->work_units_allocated:'';
				
				if($UserHoursDetails['AllocatedHours']!=''):
					$UserHoursDetails['RemainingHours'] = $UserHoursDetails['AllocatedHours']-$this->Contractor->memberConsumedHours($startup_id,$user_id);
				else:
					$UserHoursDetails['RemainingHours'] = '0';
				endif;
				
			endif;
			 
			$this->set('columns',range('A', 'Z'));
			$this->set('FinalObject',$FinalObject);
			$this->set('deliverables',$deliverables_list);
			$this->set('UserHoursDetails',$UserHoursDetails);
		    
			if(!empty($FinalObject)):
				$result['code'] = 200;
				$result['file_path'] = 'excel_files/test.xlsx';
				echo json_encode($result);
			else:
				$result['code'] = 404;
				$result['message'] = 'No file found';
				echo json_encode($result);
			endif;
			
	//excel file creation start
			
			 		
	//excel file reation end		
			
		}
		
	}
	
	
	
	/*
	 *
	 *update startup Profile
	 *
	 */
	public function Entrepreneurexcel(){
		$this->viewBuilder()->layout(false);
		
		$StartupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$StartupWorkOrdersTable = $this->loadModel('StartupWorkOrders');
		
		$finalContractorDetails = [];
		
		if($this->request->is('get')){
			
			$startup_id = $_REQUEST['startup_id'];
			
			$teamMembers = $this->StartupTeams->find('all',['conditions'=>['StartupTeams.startup_id'=>$startup_id]])
									->select(['user_id','work_units_allocated','work_units_approved']);
			
			
			if(!empty($teamMembers)):
				
				$teamMembers = $teamMembers->toArray();
				
				foreach($teamMembers as $singleTeammember):
					 
					$SinglContractorDetails['ContractorName'] = $this->Contractor->contractorName($singleTeammember->user_id);
					$SinglContractorDetails['ContractorEmail'] = $this->Contractor->contractorEmail($singleTeammember->user_id);
					$SinglContractorDetails['AllocatedHours'] = ($singleTeammember->work_units_allocated!='')?$singleTeammember->work_units_allocated:'';
					$SinglContractorDetails['ConsumedHours'] = $this->Contractor->memberConsumedHours($startup_id,$singleTeammember->user_id);
					$SinglContractorDetails['ApprovedHours'] = ($singleTeammember->work_units_approved!='')?$singleTeammember->work_units_approved:'';
					
					
					if($SinglContractorDetails['AllocatedHours']!=''):
						$SinglContractorDetails['RemainingHours'] = $SinglContractorDetails['AllocatedHours']-$SinglContractorDetails['ConsumedHours'];
					else:
						$SinglContractorDetails['RemainingHours'] = '0';
					endif;
					 
					$finalContractorDetails[] = $SinglContractorDetails;
					
				endforeach;
				
			endif;
			
			$startupDetails = $this->Startups->find('all',['conditions'=>['Startups.id'=>$startup_id]])
												->select(['name'])
												->first();
												 
			if(!empty($startupDetails)&&($startupDetails->name!='')):
				$startup_name = $startupDetails->name;
			else:
				$startup_name = 'Anonymous Startup';
			endif;
			
			$this->set('startup_name',$startup_name);
			$this->set('finalContractorDetails',$finalContractorDetails);
			
			if(!empty($finalContractorDetails)):
				$result['code'] = 200;
				$result['file_path'] = 'excel_files/test.xlsx';
				echo json_encode($result);
			else:
				$result['code'] = 404;
				$result['message'] = 'No file found';
				echo json_encode($result);
			endif;
		}
		
	}
	 
	/*
	 *
	 *update startup Questions
	 *
	 */
	public function startupQuestions(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$StartupQuestionsTable = TableRegistry::get('StartupQuestions');
		 
			if($this->request->is('post')){
			
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				
				$this->request->data = $jsonData;
				
				$quData['startup_id'] = $this->request->data['startup_id'];
				$quData['is_submited'] = $this->request->data['is_submited'];
				$quData['questions'] = json_encode($this->request->data['questions']);
				 
				$exists = $StartupQuestionsTable->exists(['startup_id' => $quData['startup_id']]);
				
				if(!$exists){
					   $startupDoc = $StartupQuestionsTable->newEntity($quData);
						 
						if($startupDoc->errors()){
							 
						//here we are getting the errors while validating the data
						
							$errors = $startupDoc->errors();
							
							foreach($errors as $key=>$error){
								foreach($error as $errorKey=>$errorMessage){
									$finalErrors[$key] = $errorMessage;
								}
							}
							
							$result['code'] = 404;
							$result['errors'] = $finalErrors;
							echo json_encode($result);
						}else{
						//$startupDoc = $StartupQuestionsTable->patchEntity($startupDoc,$quData);

							if($StartupQuestionsTable->save($startupDoc)){
								 
								$result['code'] = 200;
								$result['message'] = 'startup questions successfully saved';
								echo json_encode($result);
							}else{
								$result['code'] = 404;
								$result['message'] = 'startup questions not saved';
								echo json_encode($result);
							}
							
							
						}
				}else{
							
							$query = $StartupQuestionsTable->query();
					
								if($query->update()
									->set(['questions'=>$quData['questions'],'is_submited'=>$quData['is_submited']
										   ])
									->where(['startup_id' => $quData['startup_id']])
									->execute()){
										
										$result['code']=200;
										$result['message']='successfully updated';
										echo json_encode($result);
										
									}else{
										$result['code']=404;
										$result['message']='not updated';
										echo json_encode($result);
									}
					
					
				}
				 
				 
				
				
			}
		 		  
	}


	
	/*
	 *
	 * follow unfollow a user
	 *
	 */
	public function userFollow(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		
		 $UserFollowersTable = $this->loadModel('UserFollowers');
			$this->loadModel('UserTokens');
			if($this->request->is('post')){
			
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				
				$this->request->data = $jsonData;
				
				$quData['followed_by'] = $this->request->data['followed_by'];
				$quData['user_id'] = $this->request->data['user_id'];
				$status = $this->request->data['status'];
				
				if($status=='1'){
						
						$UserFollower = $UserFollowersTable->newEntity($quData);
						 
						if($UserFollower->errors()){
						
					//here we are getting the errors while validating the data
							
							$errors = $UserFollower->errors();
							
							foreach($errors as $key=>$error){
								foreach($error as $errorKey=>$errorMessage){
									$finalErrors[$key] = $errorMessage;
								}
							}
							
							$result['code'] = 404;
							$result['errors'] = $finalErrors;
							echo json_encode($result);
							
						}else{
							
							if($UserFollowersTable->save($UserFollower)){
								 
								$result['code'] = 200;
								$result['message'] = 'Following user successfully.';
								echo json_encode($result);
								
							//sending push notification to the user who has been getting followed
								
								$message = $this->Contractor->contractorName($quData['followed_by'])." has started following you.";
								
								$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$quData['user_id']]])
														->select(['access_token','device_type']);
								$finalAndroidTokens = [];
								$finalIosTokens = [];
								if($userToken->toArray()):
									
									$tokens = $userToken->toArray();
									
									$blankArray=[];
									foreach($tokens as $single_token):
									
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                				array_push($blankArray,$single_token['access_token']);
									endforeach;

									/*foreach($tokens as $single_token):
										                             
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;
										
									endforeach;*/
									
								endif;
								$values = [];
								if(!empty($finalAndroidTokens)):
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Profile');
									
								//saving the push notification
									
									 //$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
									
									//$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has started following you.",$link,json_encode((object)$values));
									 
								endif;
								if(!empty($finalIosTokens)):
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Profile');
									
								//saving the push notification
									
									 //$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
									
									//$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has started following you.",$link,json_encode((object)$values));
									 
								endif;
								
							//saving the notification
								
								$values = [];
								$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
								
								$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has started following you.",$link,json_encode((object)$values));
								
								
							}else{
								
								$result['code'] = 404;
								$result['message'] = "Can't following user. Please try again.";
								echo json_encode($result);
								
							}
							
							
						}
						
				}else{
							 
							$userFollowData = $this->UserFollowers->find('all',
																		 ['conditions'=>['UserFollowers.followed_by'=>$quData['followed_by'],
																				   'UserFollowers.user_id'=>$quData['user_id']
																		   ]])
																	->first();
							
							if(!empty($userFollowData)):
							
							$entity = $this->UserFollowers->get($userFollowData->id);
							
							if($this->UserFollowers->delete($entity)){
									
									$result['code'] = 200;
									$result['message'] = 'Unfollwed user successfully.';
									echo json_encode($result);
									
									
							//sending push notification to the user who has been getting followed
								
								$message = $this->Contractor->contractorName($quData['followed_by'])." has unfollowed you.";
								
								$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$quData['user_id']]])
														->select(['access_token','device_type']);
								$finalAndroidTokens = [];
								$finalIosTokens = [];
								if($userToken->toArray()):
									
									$tokens = $userToken->toArray();
									
									$blankArray=[];
									foreach($tokens as $single_token):
									
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                				array_push($blankArray,$single_token['access_token']);
									endforeach;

									/*foreach($tokens as $single_token):
									
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;
										
									endforeach;*/
									
								endif;
								$values = [];
								if(!empty($finalAndroidTokens)):
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'User_follow');
									
									//saving the push notification
									
									 //$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
									
									//$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has unfollowed you.",$link,json_encode((object)$values));
									 
									
								endif;
								if(!empty($finalIosTokens)):
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'User_follow');
									
									//saving the push notification
									
									// $link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
									
									//$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has unfollowed you.",$link,json_encode((object)$values));
									 
									
								endif;
								
								
								//saving the notification
								
								$values = [];
								$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile']);
								
								$this->Contractor->saveNotification($quData['followed_by'],$quData['user_id'],'Profile'," has unfollowed you.",$link,json_encode((object)$values));
								
								}else{
									
									$result['code'] = 404;
									$result['message'] = "Cant't unfollow user. Please try again.";
									echo json_encode($result);
									
								}
							else:
								
									$result['code'] = 404;
									$result['message'] = "Cant't unfollow user. Please try again.";
									echo json_encode($result);

							endif;
					
				}
				 
			}
		 		  
	}


	/**
	 * messages list
	 *
	 * @return   messages list   
	 */
	public function messagesList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$MessagesTable = $this->loadModel('Messages');
		
		$user_id = $_REQUEST['user_id'];
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Messages.id' => 'DESC'
						]
					];
		
		
		$query = $this->Messages->find('all')
                            ->where(['Messages.receiver_id'=>$user_id,
															   'Messages.archived !='=>1]);
		
		$result['TotalItems'] = $query->count();
		
		$Messages = $this->Paginator->paginate(
												$this->Messages->find('all')
												->where(['Messages.receiver_id'=>$user_id,
															   'Messages.archived !='=>1,'Messages.msg_type'=>'team'])
													, $config);
		
		/*$Messages = $MessagesTable->find('all',['conditions'=>['Messages.receiver_id'=>$user_id,
															   'Messages.archived !='=>1]])
								->toArray();
		*/
		if($Messages->toArray()):
			
			$Messages = $Messages->toArray();
			
			foreach($Messages as $Message){
					
					$keys['id'] = ($Message->id!='')?$Message->id:' ';
					$keys['title'] = ($Message->subject!='')?$Message->subject:' ';
					$keys['description'] = ($Message->comment!='')?$Message->comment:' ';
					$keys['sender'] = ($Message->description!=' ')?$Message->description:' ';
					$keys['time'] = ($Message->created!=' ')?$Message->created:' ';
					
				//getting the sender name
					
					if($Message->sender_role_id=='1'):
									
									$user = $this->Contractor->userEntrepreneurBasic($Message->sender_id);
									 
											if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
												
												if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
									
													$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
													$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												elseif(!empty($user)):
													
													$first_name = ($user['first_name']!='')?$user['first_name']:' ';
												    $last_name = ($user['last_name']!='')?$user['last_name']:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;					
												endif;
												 
											}else{
												 
												$first_name = ($user['first_name']!='')?$user['first_name']:' ';
												$last_name = ($user['last_name']!='')?$user['last_name']:' ';
													
												$keys['sender'] = $first_name.' '.$last_name;
												 
											}
								 
								else:
									 
											$user = $this->Contractor->userContractorBasic($Message->sender_id);
											
											if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
												
												if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
									
													$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
													$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												elseif(!empty($user)):
													
													$first_name = ($user->first_name!='')?$user->first_name:' ';
													$last_name = ($user->last_name!='')?$user->last_name:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												endif;
												 
											}else{
												
												$first_name = ($user['first_name']!='')?$user['first_name']:' ';
												$last_name = ($user['last_name']!='')?$user['last_name']:' ';
												
												$keys['sender'] = $first_name.' '.$last_name;
												 
											}
											
								endif;
								
					$finalMessageList[] = $keys;
				}
			
			$result['Messages'] = $finalMessageList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['Messages'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}
	
	
	/**
	 * messages archive list
	 *
	 * @return  archive messages list   
	 */
	public function messagesArchiveList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$MessagesTable = $this->loadModel('Messages');
		
		$user_id = $_REQUEST['user_id'];
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Messages.id' => 'asc'
						]
					];
		
		
		$query = $this->Messages->find('all')
                            ->where(['Messages.receiver_id'=>$user_id,
															   'Messages.archived'=>1]);
		
		$result['TotalItems'] = $query->count();
		
		$Messages = $this->Paginator->paginate(
												$this->Messages->find('all')
												->where(['Messages.receiver_id'=>$user_id,
															   'Messages.archived'=>1])
													, $config);
		
		/*$Messages = $MessagesTable->find('all',['conditions'=>['Messages.receiver_id'=>$user_id,
															   'Messages.archived !='=>1]])
								->toArray();
		*/
		if($Messages->toArray()):
			
			$Messages = $Messages->toArray();
			
			foreach($Messages as $Message){
					
					$keys['id'] = ($Message->id!='')?$Message->id:' ';
					$keys['title'] = ($Message->subject!='')?$Message->subject:' ';
					$keys['description'] = ($Message->comment!='')?$Message->comment:' ';
					$keys['sender'] = ($Message->description!=' ')?$Message->description:' ';
					$keys['time'] = ($Message->created!=' ')?$Message->created:' ';
					
				//getting the sender name
					
					if($Message->sender_role_id=='1'):
									
									$user = $this->Contractor->userEntrepreneurBasic($Message->sender_id);
									 
											if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
												
												if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
									
													$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
													$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												elseif(!empty($user)):
													
													$first_name = ($user->first_name!='')?$user->first_name:' ';
													$last_name = ($user->last_name!='')?$user->last_name:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;					
												endif;
												 
											}else{
												
												$first_name = ($user->first_name!='')?$user->first_name:' ';
												$last_name = ($user->last_name!='')?$user->last_name:' ';
													
												$keys['sender'] = $first_name.' '.$last_name;
												 
											}
								 
								else:
									 
											$user = $this->Contractor->userContractorBasic($Message->sender_id);
											
											if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
												
												if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
									
													$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
													$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												elseif(!empty($user)):
													
													$first_name = ($user->first_name!='')?$user->first_name:' ';
													$last_name = ($user->last_name!='')?$user->last_name:' ';
													
													$keys['sender'] = $first_name.' '.$last_name;
													
												endif;
												 
											}else{
												
												$first_name = ($user['first_name']!='')?$user['first_name']:' ';
												$last_name = ($user['last_name']!='')?$user['last_name']:' ';
												
												$keys['sender'] = $first_name.' '.$last_name;
												 
											}
											
								endif;
								
					$finalMessageList[] = $keys;
				}
			
			$result['Messages'] = $finalMessageList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['Messages'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}
	
	/**
	* message Archived Delete
	*
	* @return message Archived Delete
	*/
	public function messageArchivedDelete(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('Messages');
		
		$message_id = $_REQUEST['message_id'];
		$status = $_REQUEST['status'];
		
		if($status=='1'): //archived
		
			$query = $this->Messages->query();
			if($query->update()
				  ->set(['archived'=>'1'
						 ])
				  ->where(['id' => $message_id])
				  ->execute()){
					
					$result['code'] = 200;
					$result['message'] = 'Message is Archived';
					echo json_encode($result);
				  
			}else{
				 
				$result['code'] = 404;
				$result['message'] = 'Message is not Archived';
				echo json_encode($result);
			}
		
		else:
				 
				$entity = $this->Messages->get($message_id);
				
				if($this->Messages->delete($entity)){
						
						$result['code'] = 200;
						$result['message'] = 'Message deleted';
						echo json_encode($result);
						
					}else{
						
						$result['code'] = 404;
						$result['message'] = 'Message deleted';
						echo json_encode($result);
						
					}
				  
		endif;
		
		
	}
	
	/**
	 * my forums list
	 *
	 * @return my forums list
	 */
	public function myForums(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		
		$user_id = $_REQUEST['user_id'];
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Forums.id' => 'asc'
						]
					];
		
		
		$query = $this->Forums->find('all')
                            ->where(['Forums.user_id'=>$user_id,
									 'Forums.user_status'=>0,
									 'Forums.status'=>1]);
		
		$result['TotalItems'] = $query->count();
		
		$Forums = $this->Paginator->paginate(
												$this->Forums->find('all')
												->where(['Forums.user_id'=>$user_id,
														 'Forums.user_status'=>0,
														 'Forums.status'=>1])
													, $config);
		
		/*$Forums = $this->Forums->find('all',['conditions'=>['Forums.user_id'=>$user_id]])
								->toArray();*/
		
		if($Forums->toArray()):
			
			$Forums = $Forums->toArray();
			 
			foreach($Forums as $Forum){
				 
					$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
					$keys['forum_title'] = ($Forum->title!='')?$Forum->title:' ';
					$keys['description'] = ($Forum->description!='')?$Forum->description:' ';
					$keys['forumCreatedBy'] = $this->Contractor->contractorName($Forum->user_id);
					$keys['createdTime'] = ($Forum->created!=' ')?$Forum->created:' ';
				  
					$finalForumsList[] = $keys;
			}
			 
			$result['Forums'] = $finalForumsList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['Forums'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}


	/**
	 * User forums list
	 *
	 * @return user forums list
	 */
	public function userForums(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		
		$user_id = $_REQUEST['user_id'];
		
		$Forums = $this->Forums->find('all',['conditions'=>['Forums.user_id'=>$user_id,'Forums.user_status'=>0,'Forums.status'=>1]])->toArray();

		if($Forums):
			 
			foreach($Forums as $Forum){
				 
					$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
					$keys['forum_name'] = ($Forum->title!='')?$Forum->title:' ';
					$finalForumsList[] = $keys;
			}
			
			$result['code'] = 200; 
			$result['Forums'] = $finalForumsList;
			echo json_encode($result);
			
		else:
			
			$result['code'] = 404;
			$result['Forums'] = [];
			echo json_encode($result);
			
		endif;
		
	}

	
	/**
	* forums Archived Delete
	*
	* @return forums Archived Delete
	*/
	public function forumArchivedDelete(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('Forums');
		
		$forum_id = $_REQUEST['forum_id'];
		$status = $_REQUEST['status'];
		
		if($status=='1'): //archived
		
			$query = $this->Forums->query();
			if($query->update()
				  ->set(['user_status'=>'1'
						 ])
				  ->where(['id' => $forum_id])
				  ->execute()){
					
					$result['code'] = 200;
					$result['message'] = 'Forum is Archived';
					echo json_encode($result);
				  
			}else{
				 
				$result['code'] = 404;
				$result['message'] = 'Forum is not Archived';
				echo json_encode($result);
			}
		
		elseif($status=='2'):
				
				$entity = $this->Forums->get($forum_id);
				
				if($this->Forums->delete($entity)){
						
						$result['code'] = 200;
						$result['message'] = 'Forum deleted';
						echo json_encode($result);
						
				}else{
					
					$result['code'] = 404;
					$result['message'] = 'Forum deleted';
					echo json_encode($result);
					
				}
		else:
			
			$query = $this->Forums->query();
			if($query->update()
				  ->set(['user_status'=>'2'
						 ])
				  ->where(['id' => $forum_id])
				  ->execute()){
					
					$result['code'] = 200;
					$result['message'] = 'Forum is closed';
					echo json_encode($result);
				  
			}else{
				 
				$result['code'] = 404;
				$result['message'] = 'Forum is not close';
				echo json_encode($result);
			}
			
		endif;
		
		
	}
	
	/*
	 * add forum
	 *
	 */
	
	public function addForum(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = TableRegistry::get('Forums');
		  
			if($this->request->is('post')){
				  
				 if(!empty($this->request->data['image'])&&($this->request->data['image']['error']=='0')){
					
					$upload = $this->Upload->uploadForumImage($this->request->data['image']);
					$this->request->data['image'] = $upload;
					 
				 }else{
						$this->request->data['image'] = '';
				 }
				
				$ForumsEn = $ForumsTable->newEntity($this->request->data);
				
				if($ForumsEn->errors()){
					 
				//here we are getting the errors while validating the data
				
					$errors = $ForumsEn->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				}else{
					$resultSave= $ForumsTable->save($ForumsEn);
					if($resultSave){

						//Save Feeds
                        $this->Feeds->saveForumFeeds($this->request->data['user_id'],'feeds_forum_added',$resultSave->id);

						$result['code'] = 200;
						$result['message'] = 'Forum successfully created';
						echo json_encode($result);
					}else{
						$result['code'] = 404;
						$result['message'] = 'Forum not created';
						echo json_encode($result);
					}
					
					
				}
				
			}
		 		  
	}
	
	/**
	* forum startups list 
	*
	* @return forum startup lists
	* 
	*/
	public function forumStartupsList(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$startupsTable = $this->loadModel('Startups');
		$StartupTeamsTable = $this->loadModel('StartupTeams');
		$ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');
			
			$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Startups.id' => 'asc'
							]
						];
			
			$user_id = $_REQUEST['user_id']; 
			 
			$result['TotalItems'] = '0';
			 
			//Getting current startups
				 	
						$teamStartupIDs = $StartupTeamsTable->find('all',
												['conditions'=>['StartupTeams.user_id'=>$user_id]])
												->select(['startup_id']);
						
						if($teamStartupIDs->toArray()):
							
							$startupsIDsArray = $teamStartupIDs->toArray();
							
							foreach($startupsIDsArray as $singleStartupsIDsObject):
								if($singleStartupsIDsObject->startup_id!=''):
									$finalIDs[] = $singleStartupsIDsObject->startup_id;
								endif;
							endforeach;
							
							if(!empty($finalIDs)):
								
						//getting the campaigns list
							
							$query = $this->Startups->find('all')
													->where(['id IN'=>$finalIDs]);
									
							$result['TotalItems'] = $query->count();
							
							$Startups = $this->Paginator->paginate(
																	$this->Startups->find('all')
																	->where(['Startups.id IN'=>$finalIDs])
																	, $config);
							
							if(!empty($Startups)){
									
									foreach($Startups as $singleStartup){
										
										$keys['startup_id'] = ($singleStartup->id!='')?$singleStartup->id:' ';
										$keys['startup_name'] = ($singleStartup->name!=' ')?$singleStartup->name:' ';
										$keys['description'] = ($singleStartup->description!=' ')?$singleStartup->description:' ';
										$keys['createdtime'] = ($singleStartup->created!=' ')?$singleStartup->created:' ';
										
										$finalStartups[] = $keys;
									}
									
									if(!empty($finalStartups)):
										$result['startups'] = $finalStartups;
									else:
										$result['startups'] = [];
									endif;
									
							   }else{
										$result['startups'] = [];
							   }
								
							else:
								$result['startups'] = [];
							endif;
							 
						else:
								$result['startups'] = [];
						endif;
						
						
						if(!empty($result['startups'])):
							$result['code'] = 200;
							echo json_encode($result);
						else:
							$result['code'] = 404;
							echo json_encode($result);
						endif;
						 
	}
	 

	/**
	 * give the list of forums of a particular startup
	 *
	 * @return give the list of forums of a particular startup
	 */
	public function startupForums(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		
		$startup_id = $_REQUEST['startup_id'];
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Forums.id' => 'asc'
						]
					];
		
		
		$query = $this->Forums->find('all')
                            ->where(['Forums.startup_id'=>$startup_id,
									 'Forums.status'=>1]);
		
		$result['TotalItems'] = $query->count();
		
		$Forums = $this->Paginator->paginate(
												$this->Forums->find('all')
												->where(['Forums.startup_id'=>$startup_id,
														 'Forums.status'=>1])
													, $config);
		 
		if($Forums->toArray()):
			
			$Forums = $Forums->toArray();
			 
			foreach($Forums as $Forum){
				 
					$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
					$keys['forum_title'] = ($Forum->title!='')?$Forum->title:' ';
					$keys['description'] = ($Forum->description!='')?$Forum->description:' ';
					$keys['forumCreatedBy'] = $this->Contractor->contractorName($Forum->user_id);
					$keys['createdTime'] = ($Forum->created!=' ')?$Forum->created:' ';
				  
					$finalForumsList[] = $keys;
			}
			 
			$result['Forums'] = $finalForumsList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['Forums'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}

	/**
	 * give the list of forums of a particular keywords
	 *
	 * @return give the list of forums of a particular keywords
	 */
	public function searchForums(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		$UserFollowersTable = $this->loadModel('UserFollowers');
		 
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Forums.id' => 'asc'
						]
					];
		
		$search_text = (isset($_REQUEST['search_text'])&&($_REQUEST['search_text']!=''))?$_REQUEST['search_text']:'';
		
		
		if($search_text==''):
					
					$startup_ids = $this->UserFollowers->find('all',
														['conditions'=>['UserFollowers.followed_by'=>$_REQUEST['user_id']]])
														->select(['user_id']);
					
					if($startup_ids->toArray()):
												
								$startup_ids = $startup_ids->toArray();
										
								foreach($startup_ids as $SingleUser):
									if(isset($SingleUser['user_id'])&&($SingleUser['user_id']!='')){
										$userIDs[] = $SingleUser['user_id'];
									}
								endforeach;
								 
								if(!empty($userIDs)):
												 
									$query = $this->Forums->find('all')
												->where(['Forums.user_id IN'=>$userIDs,
														 'Forums.user_id !='=>$_REQUEST['user_id'],
														 'Forums.status'=>1]);
																			
									$result['TotalItems'] = $query->count();
									
									$Forums = $this->Paginator->paginate(
																   $this->Forums->find('all')
																	->where(['Forums.user_id IN'=>$userIDs,
																			 'Forums.user_id !='=>$_REQUEST['user_id'],
																			 'Forums.status'=>1])
																		, $config);
							
					 
										if($Forums->toArray()):
											
											$Forums = $Forums->toArray();
											 
											foreach($Forums as $Forum){
												 
													$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
													$keys['forum_title'] = ($Forum->title!='')?$Forum->title:' ';
													$keys['description'] = ($Forum->description!='')?$Forum->description:' ';
													$keys['forumCreatedBy'] = $this->Contractor->contractorName($Forum->user_id);
													$keys['createdTime'] = ($Forum->created!=' ')?$Forum->created:' ';
												  
													$finalForumsList[] = $keys;
											}
											 
											$result['Forums'] = $finalForumsList;
											$result['code'] = 200;
											echo json_encode($result);
											
										else:
											
											$result['Forums'] = [];
											$result['code'] = 404;
											echo json_encode($result);
											
										endif;
										
								else:
									
											$result['Forums'] = [];
											$result['code'] = 404;
											echo json_encode($result);
									
								endif;
					
						else:
										$result['Forums'] = [];
										$result['code'] = 404;
										echo json_encode($result);
						endif;
					
		
		else:
			
					$connection = ConnectionManager::get('default');
											 
					$qq = "SELECT FO.id FROM keywords as KY INNER JOIN forums as FO
							ON FIND_IN_SET(KY.id, FO.keywords) where KY.name like '%".$_REQUEST['search_text']."%' GROUP BY FO.id
							UNION SELECT FO.id FROM forums as FO where FO.title like '%".$_REQUEST['search_text']."%' ";
					
					$sql = $connection->execute ($qq);
					$startup_ids = $sql->fetchAll('assoc');
					
						if(!empty($startup_ids)):
												
								foreach($startup_ids as $SingleUser):
									if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
										$startupIDs[] = $SingleUser['id'];
									}
								endforeach;
					
								if(!empty($startupIDs)):
															
									$query = $this->Forums->find('all')
												->where(['Forums.id IN'=>$startupIDs,
														 'Forums.user_id !='=>$_REQUEST['user_id'],
														 'Forums.status'=>1]);
																			
									$result['TotalItems'] = $query->count();
									
									$Forums = $this->Paginator->paginate(
																   $this->Forums->find('all')
																	->where(['Forums.id IN'=>$startupIDs,
																			 'Forums.user_id !='=>$_REQUEST['user_id'],
																			 'Forums.status'=>1])
																		, $config);
							
					 
										if($Forums->toArray()):
											
											$Forums = $Forums->toArray();
											 
											foreach($Forums as $Forum){
												 
													$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
													$keys['forum_title'] = ($Forum->title!='')?$Forum->title:' ';
													$keys['description'] = ($Forum->description!='')?$Forum->description:' ';
													$keys['forumCreatedBy'] = $this->Contractor->contractorName($Forum->user_id);
													$keys['createdTime'] = ($Forum->created!=' ')?$Forum->created:' ';
												  
													$finalForumsList[] = $keys;
											}
											 
											$result['Forums'] = $finalForumsList;
											$result['code'] = 200;
											echo json_encode($result);
											
										else:
											
											$result['Forums'] = [];
											$result['code'] = 404;
											echo json_encode($result);
											
										endif;
										
								else:
									
											$result['Forums'] = [];
											$result['code'] = 404;
											echo json_encode($result);
									
								endif;
					
						else:
										$result['Forums'] = [];
										$result['code'] = 404;
										echo json_encode($result);
						endif;
						
						
					endif;
		
	}
	
	/**
	 * details of a particular forum
	 *
	 * @return details of a particular forum
	 */
	public function forumDetail(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		$this->loadModel('ForumComments');
		 
		 $forum_id = $_REQUEST['forum_id'];
		 
			if($forum_id!=''):
					
					$forums = $this->Forums->find('all')
											->where(['Forums.id'=>$forum_id])
											->contain(['ForumComments'
													  ])
											->first();
						 
						if(!empty($forums)):
							
							$finalForum['forum_title'] = ($forums->title!='')?$forums->title:' ';
							$finalForum['forum_createdBy'] = $this->Contractor->contractorName($forums->user_id);
							$finalForum['forum_image'] = ($forums->image!='')?'img/forums/'.$forums->image:' ';
							$finalForum['forum_description'] = ($forums->description!='')?$forums->description:' ';
							$finalForum['archivedClosedStatus'] = $forums->user_status;
							
					//getting the top five latest comments
							
							$forumComments = $this->ForumComments->find('all',['conditions'=>['ForumComments.forum_id'=>$forum_id],
															  'order' => ['ForumComments.id' => 'DESC'],
															  'limit' => 5]);
							
							if($forumComments->toArray()){
								
								$forumComments = $forumComments->toArray();
								
								foreach($forumComments as $comment){
									
									if($comment->created!=''):
										$time = new Time($comment->created);
										$time = $time->format('Y-m-d H:i:s');
									else:
										$time = '';
									endif;
									
									$keys['commenter_id'] = ($comment->user_id!='')?$comment->user_id:' ';
									$keys['commentedBy'] = $this->Contractor->contractorName($comment->user_id);
									$keys['CommentText'] = ($comment->comment!='')?$comment->comment:' ';
									$keys['userImage'] = $this->Contractor->contractorImage($comment->user_id);
									$keys['commentedTime'] = $comment->created;
									
									$finalComments[] = $keys;
								}
							 
							 $finalForum['forum_comments']= $finalComments;
							 
							}else{
								$finalForum['forum_comments']= [];
							}
							
							
							
							$result['Forums'] = $finalForum;
							$result['code'] = 200;
							echo json_encode($result);
							
						else:
							
							$result['Forums'] = [];
							$result['code'] = 404;
							echo json_encode($result);
							
						endif;
						
			else:
						$result['Forums'] = [];
						$result['code'] = 404;
						echo json_encode($result);
			endif;
	}
	
	/**
	 * details of a particular forum
	 *
	 * @return details of a particular forum
	 */
	public function forumcomments(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumCommentsTable = $this->loadModel('ForumComments');
		 
		 $forum_id = $_REQUEST['forum_id'];
			
		    $page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 20,
							'page'=>$page_no,
							'order' => [
								'ForumComments.id' => 'asc'
							]
						];
		
			if($forum_id!=''):
					
					$query =  $this->ForumComments->find('all')
												->where(['ForumComments.forum_id'=>$forum_id]);
															
					$result['TotalItems'] = $query->count();
					
					$ForumComments = $this->Paginator->paginate($this->ForumComments->find('all')
																->where(['ForumComments.forum_id'=>$forum_id])
															, $config);
						 
						if(!empty($ForumComments)){
							
							foreach($ForumComments as $comment){
								
								/*if($comment->created!=''): //code for changing the date format in cakephp 3.x
									$time = new Time($comment->created);
									$time = $time->format('Y-m-d H:i:s');
								else:
									$time = '';
								endif;*/
								
								$keys['commenter_id'] = ($comment->user_id!='')?$comment->user_id:' ';
								$keys['commentedBy'] = $this->Contractor->contractorName($comment->user_id);
								$keys['CommentText'] = ($comment->comment!='')?$comment->comment:' ';
								$keys['userImage'] = $this->Contractor->contractorImage($comment->user_id);
								$keys['commentedTime'] = $comment->created;
								
								$finalComments[] = $keys;
							}
						 
						 $finalcomments = $finalComments;
						 
						}else{
							$finalcomments= [];
						}
						 
						if(!empty($finalcomments)):
							$result['Comments'] = $finalcomments;
							$result['code'] = 200;
							echo json_encode($result);
						else:
							$result['Comments'] = $finalcomments;
							$result['code'] = 404;
							echo json_encode($result);
						endif;
						
			else:
						$result['Comments'] = [];
						$result['code'] = 404;
						echo json_encode($result);
			endif;
	}
	
	
	/*
	 * add comment
	 *
	 */
	public function addForumComment(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('UserTokens');
		$this->loadModel('Forums');
		
		
		$CommentTable = TableRegistry::get('ForumComments');
		  
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				
				$this->request->data = $jsonData;
				
				$commentData = $CommentTable->newEntity($this->request->data);
				
				if($commentData->errors()){
					 
				//here we are getting the errors while validating the data
				
					$errors = $commentData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				}else{
					
					if($CommentTable->save($commentData)){
						//Save Feeds
                        $this->Feeds->saveForumFeeds($this->request->data['user_id'],'feeds_forum_message',$this->request->data['forum_id']);

						$result['code'] = 200;
						$result['message'] = 'commented submitted successfully';
						echo json_encode($result);
						
			//sending push notification to the user who has been getting followed
					
					  $message = $this->Contractor->contractorName($this->request->data['user_id'])." has commented on your Forum ".$this->Contractor->forumName($this->request->data['forum_id']);
					 
					$forum_owner = $this->Forums->find('all',['conditions'=>['Forums.id'=>$this->request->data['forum_id']]])
															->select(['user_id','title'])
															->first();
					
					if(!empty($forum_owner)&&($forum_owner['user_id']!='')){
						
						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$forum_owner['user_id']]])
											->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							
							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;

							/*foreach($tokens as $single_token):
							
								if($single_token['device_type']=='android'):
									$finalAndroidTokens[] = $single_token['access_token'];
								else:
									//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
								endif;
								
							endforeach;*/
							
						endif;
						 
						if(!empty($finalTokens)):
							
							$values = ['forum_id'=>$this->request->data['forum_id'],
									   'forum_name'=>$forum_owner['title']];
							
							$this->Push->sendAndroidPushNotification($finalTokens,$message,$values,'Comment_Forum');
							
							//Save user notification
                               // $link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
                               // $this->Contractor->saveNotification($this->request->data['user_id'],$forum_owner['user_id'],'Comment_Forum'," has commented on your Forum <strong>".$this->Contractor->forumName($this->request->data['forum_id'])."</strong>",$link,json_encode($values));

						endif;
						if(!empty($finalIosTokens)):
							
							$values = ['forum_id'=>$this->request->data['forum_id'],
									   'forum_name'=>$forum_owner['title']];
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Comment_Forum');
							
							//Save user notification
                              //  $link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
                              //  $this->Contractor->saveNotification($this->request->data['user_id'],$forum_owner['user_id'],'Comment_Forum'," has commented on your Forum <strong>".$this->Contractor->forumName($this->request->data['forum_id'])."</strong>",$link,json_encode($values));

						endif;
						
						$values = ['forum_id'=>$this->request->data['forum_id'],
									   'forum_name'=>$forum_owner['title']];
						
						$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
                        $this->Contractor->saveNotification($this->request->data['user_id'],$forum_owner['user_id'],'Comment_Forum'," has commented on your Forum <strong>".$this->Contractor->forumName($this->request->data['forum_id'])."</strong>",$link,json_encode($values));

						
					}
						
						
					}else{
						$result['code'] = 404;
						$result['message'] = 'commented not submitted';
						echo json_encode($result);
					}
					
					
				}
				
			}
		 		  
	}
	/**
	 * archived Forums list
	 *
	 * @return archived Forums list
	 */
	public function archivedForums(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('Forums');
		
		$user_id = $_REQUEST['user_id'];
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'Forums.id' => 'asc'
						]
					];
		
		
		$query = $this->Forums->find('all')
                            ->where(['Forums.user_id'=>$user_id,
									 'Forums.user_status'=>1,
									 'Forums.status'=>1]);
		
		$result['TotalItems'] = $query->count();
		
		$Forums = $this->Paginator->paginate(
												$this->Forums->find('all')
												->where(['Forums.user_id'=>$user_id,
														 'Forums.user_status'=>1,
														 'Forums.status'=>1
														 ])
													, $config);
		
		/*$Forums = $this->Forums->find('all',['conditions'=>['Forums.user_id'=>$user_id]])
								->toArray();*/
		
		if($Forums->toArray()):
			
			$Forums = $Forums->toArray();
			 
			foreach($Forums as $Forum){
				 
					$keys['id'] = ($Forum->id!='')?$Forum->id:' ';
					$keys['forum_title'] = ($Forum->title!='')?$Forum->title:' ';
					$keys['description'] = ($Forum->description!='')?$Forum->description:' ';
					$keys['forumCreatedBy'] = $this->Contractor->contractorName($Forum->user_id);
					$keys['createdTime'] = ($Forum->created!=' ')?$Forum->created:' ';
				  
					$finalForumsList[] = $keys;
			}
			 
			$result['Forums'] = $finalForumsList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['Forums'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}
	
	/*
	 *
	 * report abuse forums and users
	 *
	 */
	
	public function reportAbuse(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('UserTokens');
		$this->loadModel('Forums');
		
		$ForumReportsTable = TableRegistry::get('ForumReports');
			
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				 
				 
				 $logged_in_user = $this->request->data['user_id'];
				 
				$user_ids = [];
				if(!empty($this->request->data['reported_users'])):
					foreach($this->request->data['reported_users'] as $singleUser):
						if($singleUser['userId']!=''):
							$user_ids[] = $singleUser['userId'];
						endif;
					endforeach;
					
				endif;
				
				if(!empty($user_ids)):
					$this->request->data['reported_users'] = implode(',',$user_ids);
				else:
					$this->request->data['reported_users'] = '';
				endif;
				
				if($this->request->data['is_form_reported']=='true'):
					$this->request->data['is_form_reported'] = '1';
				else:
					$this->request->data['is_form_reported'] = '0';
				endif;
				
				$ForumReportsData = $ForumReportsTable->newEntity($this->request->data);
				
				if($ForumReportsData->errors()){
					 
				//here we are getting the errors while validating the data
				
					$errors = $ForumReportsData->errors();
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
					
			 
				}else{
					//pr($ForumReportsData);die;
					if($ForumReportsTable->save($ForumReportsData)){
						$result['code'] = 200;
						$result['message'] = 'Reported Abuse Successfully!';
						echo json_encode($result);
						
						$forum_owner = $this->Forums->find('all',['conditions'=>['Forums.id'=>$this->request->data['forum_id']]])
															->select(['user_id','title'])
															->first();
						
						if(!empty($forum_owner)&&($forum_owner['user_id']!='')):
							 
								$own_forum = ($forum_owner['user_id']==$this->request->data['user_id'])?'true':'false';
							 
						else:
							$own_forum = false;
						endif;
						
					//sending push notification to the user who has been getting followed
					//echo $this->Contractor->contractorName($this->request->data['user_id']);die;
					   $message = $this->Contractor->contractorName($this->request->data['user_id'])." has reported abused against you on forum ".$this->Contractor->forumName($this->request->data['forum_id']);
					 
					//getting the owner tokens
						
						$owner_tokens_array = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$forum_owner['user_id']]])
											->select(['access_token']);
						
						$finalOwnerTokens = [];
						if($owner_tokens_array->toArray()):
							
							$OWtokens = $owner_tokens_array->toArray();
							
							foreach($OWtokens as $single_OW_token):
							
								if($single_OW_token['access_token']!=''):
									$finalOwnerTokens[] = $single_OW_token['access_token'];
								endif;
								
							endforeach;
							
						endif;
						// pr($finalOwnerTokens);
						 //pr($user_ids);die;
						 
						 if(!empty($user_ids)):
							foreach($user_ids as $single_id):
								
								if($single_id!=''):
									//echo $single_id;die;
									$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$single_id]])
																  ->select(['access_token','user_id','device_type']);
									
									$finalAndroidTokens = [];
									$finalIosTokens = [];
									if($userToken->toArray()):
										
										$tokens = $userToken->toArray();

										$blankArray=[];
										foreach($tokens as $single_token):
										
											if (!in_array($single_token['access_token'], $blankArray)){

												if($single_token['device_type']=='android'):
													$finalAndroidTokens[] = $single_token['access_token'];
												else:
													//$finalIosTokens[] = $single_token['access_token'];
													$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
												endif;   
											}  
			                				array_push($blankArray,$single_token['access_token']);
										endforeach;

										//pr($tokens);die;
										/*foreach($tokens as $single_token):
										
											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
											endif;
											
										endforeach;*/
										
										 
										if(!empty($finalAndroidTokens)):
											
											//$link = Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
											
											if($single_id==$forum_owner['user_id']):
												 $own_forum = 'true';
											else:
												 $own_forum = 'false';
											endif;
											
											$values = ['forum_id'=>$this->request->data['forum_id'],
													   'forum_name'=>$forum_owner['title'],
														'own_forum'=>$own_forum
														];
													  // 'own_forum'=>'DONTKNOW-'.$forum_owner['user_id']
											 //pr($values);die;
											$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Report_Abuse_User');
											
											//$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
											//$this->Contractor->saveNotification($logged_in_user,$forum_owner['user_id'],'Report_Abuse_Forum',' has reported abused you on Forum <strong>'.$this->Contractor->forumName($this->request->data['forum_id']).'.</strong>',$link,json_encode($values));
											
										endif;
										
										if(!empty($finalIosTokens)):
											 //pr($finalIosTokens);die;
											//$link = Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
											
											if($single_id==$forum_owner['user_id']):
												 $own_forum = 'true';
											else:
												 $own_forum = 'false';
											endif;
							
											$values = ['forum_id'=>$this->request->data['forum_id'],
													   'forum_name'=>$forum_owner['title'],
														'own_forum'=>$own_forum
														];
													  // 'own_forum'=>'DONTKNOW-'.$forum_owner['user_id']
											
											$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Report_Abuse_User');
											
											//$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
											//$this->Contractor->saveNotification($logged_in_user,$forum_owner['user_id'],'Report_Abuse_Forum',' has reported abused you in Forum <strong>'.$this->Contractor->forumName($this->request->data['forum_id']).'.</strong>',$link,json_encode($values));
											
										endif;
										 
										 
									endif;
									
								endif;
								
								$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
										 
								if($single_id==$forum_owner['user_id']):
									 $own_forum = 'true';
								else:
									 $own_forum = 'false';
								endif;
								
								$values = ['forum_id'=>$this->request->data['forum_id'],
										   'forum_name'=>$forum_owner['title'],
											'own_forum'=>$own_forum
											];
								
							 $this->Contractor->saveNotification($logged_in_user,$single_id,'Report_Abuse_Forum',' has reported abused you in Forum <strong>'.$this->Contractor->forumName($this->request->data['forum_id']).'.</strong>',$link,json_encode($values));
								 
							endforeach;
						 endif;
						 
						 
						/*$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$user_ids]])
											->select(['access_token','user_id']);
						$finalTokens = [];
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							
							foreach($tokens as $single_token):
							
								if($single_token['access_token']!=''):
									$finalTokens[] = $single_token['access_token'];
								endif;
								
							endforeach;
							
						endif;
						 
						if(!empty($finalTokens)):
							
							$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
							
							$values = ['forum_id'=>$this->request->data['forum_id'],
									   'forum_name'=>$forum_owner['title'],
									    'own_forum'=>'DONTKNOW',
										'owner_tokens'=>$finalOwnerTokens,
										'link'=>$link,
										'logged_in_user'=>$logged_in_user,
										];
									  // 'own_forum'=>'DONTKNOW-'.$forum_owner['user_id']
							 
							$this->Push->sendAndroidPushNotification($finalTokens,$message,$values,'Report_Abuse_User');
							 
						endif;*/
					 
					 
					 //sending push to the forum owner
					 
					 if($this->request->data['is_form_reported']=='1'):
						
						if($this->request->data['reported_users']!=''):
							$message = $this->Contractor->contractorName($this->request->data['user_id'])." has reported users on your forum ".$this->Contractor->forumName($this->request->data['forum_id']);
						 else:
							 $message = $this->Contractor->contractorName($this->request->data['user_id'])." has reported your forum ".$this->Contractor->forumName($this->request->data['forum_id']);
						endif;
						
						if($this->request->data['reported_users']!=''):
							$save_message = " has reported users on your forum <strong>".$this->Contractor->forumName($this->request->data['forum_id'])."</strong>";
						 else:
							 $save_message = " has reported your forum <strong>".$this->Contractor->forumName($this->request->data['forum_id'])."</strong>";
						endif;
						
						if(!empty($forum_owner)&&($forum_owner['user_id']!='')){
							
							$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$forum_owner['user_id']]])
											->select(['access_token','device_type']);
											
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userToken->toArray()):
								
								$tokens = $userToken->toArray();
								
								$blankArray=[];
								foreach($tokens as $single_token):
								
									if (!in_array($single_token['access_token'], $blankArray)){

										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
										endif;   
									}  
	                				array_push($blankArray,$single_token['access_token']);
								endforeach;

								/*foreach($tokens as $single_token):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										$finalIosTokens[] = $single_token['access_token'];
									endif;   
									
								endforeach;*/
								
							endif;
						 
								if(!empty($finalAndroidTokens)):
									
									$values = ['forum_id'=>$this->request->data['forum_id'],
												'forum_name'=>$forum_owner['title'],
												'own_forum'=>'true'];
									
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Report_Abuse_Forum');
									
								endif;
								if(!empty($finalIosTokens)):
									
									$values = ['forum_id'=>$this->request->data['forum_id'],
												'forum_name'=>$forum_owner['title'],
												'own_forum'=>'true'];
									
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Report_Abuse_Forum');
									
								endif;
								
								$values = ['forum_id'=>$this->request->data['forum_id'],
												'forum_name'=>$forum_owner['title'],
												'own_forum'=>'true'];
								
								$link= Router::url(['controller' => 'Forums', 'action' => 'viewForum',base64_encode($this->request->data['forum_id'])]);
								$this->Contractor->saveNotification($logged_in_user,$forum_owner['user_id'],'Report_Abuse_Forum',$save_message.'.</strong>',$link,json_encode($values));
								
						}
						
					 endif;
					  
					}else{
						$result['code'] = 404;
						$result['message'] = 'can"t report abuse';
						echo json_encode($result);
					}
					
					
				}
				
			}
		 		  
	}
	
	public function commentedUsers(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('ForumComments');
		
		$forum_id = $_REQUEST['forum_id'];
		
		$forumUsers = $this->ForumComments->find('all',['conditions'=>['ForumComments.forum_id'=>$forum_id],
														'group'=>['ForumComments.user_id']]);
		
		if($forumUsers->toArray()):
			
			$forumUsers = $forumUsers->toArray();
			
			foreach($forumUsers as $Forum){
				 
				 if($Forum['user_id']):
					$keys['user_id'] = ($Forum['user_id']!='')?$Forum['user_id']:' ';
					$keys['user_image'] = $this->Contractor->contractorImage($Forum['user_id']);
					$keys['user_name'] = $this->Contractor->contractorName($Forum['user_id']);
				 endif;
				 
					$finalForumsList[] = $keys;
			}
			 
			$result['users'] = $finalForumsList;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['users'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}
	
	public function quickBloxId(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$ForumsTable = $this->loadModel('ForumComments');
		$finalMember = [];
		$user_id = $_REQUEST['user_id'];
		
		$connection = ConnectionManager::get('default');
		   $qq = "SELECT US.quickbloxid as teamMemberQBID , ST.user_id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM startups as SU ,
				users as US inner join startup_teams as ST on US.id=ST.user_id	where SU.user_id=".$user_id." and ST.startup_id=SU.id
				
			   UNION
				
			   SELECT US.quickbloxid as teamMemberQBID , CF.user_id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM campaigns as CA ,
			   campaign_followers as CF inner join users as US on US.id=CF.user_id where CA.user_id=".$user_id." and CF.campaign_id=CA.id
				
			   UNION
				
			   SELECT US.quickbloxid as teamMemberQBID , FF.user_id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM forums as FO ,
			   forum_followers as FF inner join users as US on US.id=FF.user_id where FO.user_id=".$user_id." and FF.forum_id=FO.id
			   
			   UNION
			   
			   SELECT US.quickbloxid as teamMemberQBID , US.id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM startup_teams as ST ,
			   users as US inner join startups as SU on US.id=SU.user_id where ST.user_id=".$user_id." and ST.startup_id=SU.id
				
				UNION
				
				SELECT US.quickbloxid as teamMemberQBID , US.id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM campaign_followers as CF,
				campaigns as CA inner join users as US on US.id=CA.user_id where CF.user_id=".$user_id." and CF.campaign_id=CA.id
				
				UNION
				
				SELECT US.quickbloxid as teamMemberQBID , US.id as member_id, CONCAT(US.first_name , ' ', US.last_name) as name FROM  forum_followers as FF,
				forums as FO  inner join users as US on US.id=FO.user_id where FF.user_id=".$user_id." and FF.forum_id=FO.id";
			  
		$sql = $connection->execute ($qq);
		$members = $sql->fetchAll('assoc');
		
		if(!empty($members)):
			foreach($members as $member):
				if($member['teamMemberQBID']!=''):
				    $keys['user_id'] = ($member['member_id']!='')?$member['member_id']:' ';
					$keys['quickbloxid'] = ($member['teamMemberQBID']!='')?$member['teamMemberQBID']:' ';
					$keys['username'] = ($member['name']!='')?$member['name']:' ';
					$keys['userimage'] = $this->Contractor->contractorImage($keys['user_id']);
					
					$finalMember[] = $keys;
				endif;
			endforeach;		
		endif;
		
		if(!empty($finalMember)):
			
			$result['users'] = $finalMember;
			$result['code'] = 200;
			echo json_encode($result);
			
		else:
			
			$result['users'] = [];
			$result['code'] = 404;
			echo json_encode($result);
			
		endif;
		
	}
	
	/*
	 *
	 *push notification
	 *
	 */
	
	public function sendPush(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->Push->sendAndroidPushNotification();
		
	}
	
	
	/**
	 * User notifications etc  
	 *
	 * @return   notifications   
	 */
	public function UserNotifications(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$keywordsTable = $this->loadModel('UserNotifications');
		
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 20,
						'page'=>$page_no,
						'order' => [
							'UserNotifications.id' => 'DESC'
						]
					];
			
		$query = $this->UserNotifications->find('all',
										['conditions'=>['UserNotifications.receiver_id'=>$_REQUEST['user_id']]])
										;
										
		$result['TotalItems'] = $query->count();

		$campaigns = $this->Paginator->paginate(
									$this->UserNotifications->find('all',['conditions'=>['UserNotifications.receiver_id'=>$_REQUEST['user_id']]])
					, $config);
		
		if(!empty($campaigns)){
			
			foreach($campaigns as $singleCampaign){
				
				$keys['id'] = ($singleCampaign->id!='')?$singleCampaign->id:' ';
				$keys['tags'] = ($singleCampaign->type!='')?$singleCampaign->type:' ';
				$keys['values'] = ($singleCampaign->data!='')?$singleCampaign->data:'{}';
				$keys['time'] = ($singleCampaign->created!='')?$singleCampaign->created:' ';
				$keys['status'] = ($singleCampaign->status!='')?$singleCampaign->status:' ';
				
				if($singleCampaign->type=='Add_member'):
					$keys['message'] = strip_tags($singleCampaign->title);
				else:
					$conNam = $this->Contractor->contractorName($singleCampaign->sender_id);
					$mmm =strip_tags($singleCampaign->title);

					$keys['message'] = trim($conNam)." ".trim($mmm);	
				endif;
				
				$finalCampaigns[] = $keys;
			}
			
			if(!empty($finalCampaigns)):
				$result['notification'] = $finalCampaigns;
			else:
				$result['notification'] = [];
			endif;
			 
		}else{
			$result['TotalItems'] = '0';
			$result['notification'] = [];
			
		}
		 
		$result['code'] = 200;
		echo json_encode($result);				   
	}
	
	
	public function deleteCommitedUser(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	 	$this->loadModel('UserTokens');
		 
	 	$commitCampaignTable = TableRegistry::get('CampaignDonations');
		$this->loadModel('CampaignDonations');
			$this->loadModel('Campaigns');
			
			if($_REQUEST['user_id']!=''&&$_REQUEST['campaign_id']!=''){
				 
				$campaignDetail = $commitCampaignTable->find('all',['conditions'=>['campaign_id'=>$_REQUEST['campaign_id']]])
														->select(['id','amount'])
														->first();
				 					
				if(!empty($campaignDetail)&&($campaignDetail['amount']!='')):
					$amount = (float)$campaignDetail['amount'];
				else:
					$amount = '0';
				endif;
				 
				/*if($commitCampaignTable->deleteAll(['user_id' => $_REQUEST['user_id'],
									 'campaign_id'=>$_REQUEST['campaign_id']])){*/
					
					$entity = $this->CampaignDonations->get($campaignDetail['id']); 
					if($this->CampaignDonations->delete($entity)){
				 
					$fun_so_far = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$_REQUEST['campaign_id']]])
									->select(['fund_raised_so_far'])
									->first();
					
					$fund_raised_so_far = $fun_so_far['fund_raised_so_far'];
					
					
					$final_raised = $fund_raised_so_far - $amount;
					
					$query = $this->Campaigns->query();

					if($query->update()
							->set(['fund_raised_so_far'=>$final_raised
								   ])
							->where(['id' => $_REQUEST['campaign_id']])
							->execute()){
						
						$result['code']=200;
						$result['message']='successfully rejected';
						echo json_encode($result);
						
					}
					
			//sending push notification to the user who has been getting followed
					
					
					$campaign_owner = $this->Campaigns->find('all',['conditions'=>['Campaigns.id'=>$_REQUEST['campaign_id']]])
															->select(['user_id','campaigns_name'])
															->first();
                    
					$message = "Campaign owner has rejected your commitment to Campaign ".$this->Contractor->campaignName($_REQUEST['campaign_id']);

					                                  
					if(!empty($campaign_owner)&&($campaign_owner['user_id']!='')){
					
					$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$_REQUEST['user_id']]])
											->select(['access_token','device_type']);
					$finalAndroidTokens = [];
					$finalIosTokens = [];
					if($userToken->toArray()):
						
						$tokens = $userToken->toArray();
						
						$blankArray=[];
						foreach($tokens as $single_token):
						
							if (!in_array($single_token['access_token'], $blankArray)){

								if($single_token['device_type']=='android'):
									$finalAndroidTokens[] = $single_token['access_token'];
								else:
									//$finalIosTokens[] = $single_token['access_token'];
									$length = strlen($single_token['access_token']);
	                      			if($length >60){
	                        			$finalIosTokens[] = $single_token['access_token'];
	                        		}
								endif;   
							}  
            				array_push($blankArray,$single_token['access_token']);
						endforeach;

						/*foreach($tokens as $single_token):
							
							if($single_token['device_type']=='android'):
								$finalAndroidTokens[] = $single_token['access_token'];
							else:
								//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
							endif;
							
						endforeach;*/
						
					endif;
					
					$values = ['campaign_id'=>$_REQUEST['campaign_id'],
							   'campaign_name'=>$campaign_owner['campaigns_name']];
					
					if(!empty($finalAndroidTokens)):
						$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Decline_commitment');
						
						//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						//$this->Contractor->saveNotification($campaign_owner['user_id'],$_REQUEST['user_id'],'Decline_commitment',"Campaign owner has rejected your commitment for Campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id']).'</strong>',$link,json_encode($values));
						
					endif;
					if(!empty($finalIosTokens)):
						$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Decline_commitment');
						
						//$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						//$this->Contractor->saveNotification($campaign_owner['user_id'],$_REQUEST['user_id'],'Decline_commitment',"Campaign owner has rejected your commitment for Campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id']).'</strong>',$link,json_encode($values));
						
					endif;
						
						$values = ['campaign_id'=>$_REQUEST['campaign_id'],
									'campaign_name'=>$campaign_owner['campaigns_name']];
						
						$link= Router::url(['controller' => 'Campaigns', 'action' => 'edit',base64_encode($_REQUEST['campaign_id'])]);
						
						$this->Contractor->saveNotification($campaign_owner['user_id'],$_REQUEST['user_id'],'Decline_commitment',"Campaign owner has rejected your commitment to Campaign <strong>".$this->Contractor->campaignName($_REQUEST['campaign_id']).'</strong>',$link,json_encode($values));
						
					
					}
					
				}else{
					$result['code']=404;
					$result['message']='can"t reject';
					echo json_encode($result);
				}
				
			}else{
				$result['code']=404;
					$result['message']='can"t reject';
					echo json_encode($result);
		 		  
			}
	}
	
	 /**
     * sendMail method 
     *
     *
     ***/
    public function sendMail($id=null,$startupId=null,$type=null)
    {
		$this->viewBuilder()->layout(false);
	    $this->render(false);
			
			//pr($this->request->data);die;
			
            $UserId = $this->request->Session()->read('Auth.User.id');
           
            $this->loadModel('StartupTeams');
            $this->loadModel('Users');
		 
            if($this->request->is('post')){
					
                    $to = $this->request->data['to'];
					$cc = ($this->request->data['cc']!='')?$this->request->data['cc']:'';
					$bcc = ($this->request->data['bcc']!='')?$this->request->data['bcc']:'';
                    $subject = $this->request->data['subject'];
                    $comment = $this->request->data['message'];
					$from = $this->request->data['sender'];
                    $attchments = [];
					
                        $email = new Email();
						
						if($cc!=''):
							$cc_array = explode(',',$cc);
							$email->cc($cc_array);
						endif;
						
						if($bcc!=''):
							$bcc_array = explode(',',$bcc);
							$email->bcc($bcc_array);
						endif;
						
						 if(!empty($this->request->data['filename'])&&($this->request->data['filename']['error']=='0')){
					
							$upload = $this->Upload->uploadEmailAttachment($this->request->data['filename']);
							
							$file = $upload;
							 
						 }else{
								$file = '';
						 }
						 
						if($file!='' && $file!='0'):
							 $attchments = [
										$file => [
											'file' => WWW_ROOT.'mail_attachments/'.$file
										]
									];
						endif; 
                        if($email->from([$from])
                              ->to($to)
                              ->replyTo($from)
                              ->setHeaders(['MIME-Version: 1.0\n','Content-type: text/html; charset=iso 8859-1'])
                              ->subject($subject)
							  ->attachments($attchments)
                              ->send($comment)){
							
							$result['code']=200;
							$result['message']= 'Mail successfully sent';
							echo json_encode($result);
							
						}else{
							
							$result['code']=404;
							$result['message']= 'Mail not sent';
							echo json_encode($result);
							
						}
						
							  
            }else{
					
					$result['code']=404;
					$result['message']= 'Mail not sent';
					echo json_encode($result);
					
			}
			
    }   
	
	public function iphonePush(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$tokens = ['c264261a51966fa7022ffae638b223e195b5e63285843c0714af11aa6b69f721'];
		$message = 'this is the dummy message';
		$this->Push->sendIphonePushMessage($tokens,$message);
	}

	public function startupListForUser(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$UserId=$_REQUEST['user_id'];

		/*$connection = ConnectionManager::get('default');
        $qq = "SELECT SU.name as SNAME,SU.id as SID FROM startups as SU where SU.user_id=$UserId
        UNION
        SELECT SU.name as SNAME, ST.startup_id as SID FROM startup_teams as ST inner join startups as SU on ST.startup_id=SU.id  where ST.user_id=$UserId";
                                
        $sql = $connection->execute ($qq);
        $startups = $sql->fetchAll('assoc');*/

        $this->loadModel('Startups');
        $startups= $this->Startups->find('all')->toArray();

        if(!empty($startups)){
        	$finalResult = array();
                            /*foreach($startups as $SingleUser):
                                if(isset($SingleUser['SID'])&&($SingleUser['SID']!='')){
                                	$result['id'] = $SingleUser['SID'];
									$result['name'] = $SingleUser['SNAME'];

									$finalResult[]=$result;
                                }
                            endforeach;*/

                            foreach($startups as $SingleUser):
   
                                    $result['id'] = $SingleUser->id;
									$result['name'] = $SingleUser->name;

									$finalResult[]=$result;
                            endforeach;
          
					//$CountryList[]=$finalResult;
					
					$outputresult['code']=200;
					$outputresult['startup']= $finalResult;
					echo json_encode($outputresult);

        }else{
        	$result['code']=404;
			$result['message']= 'No startup found.';
			echo json_encode($result);
        }
		//echo "<pre/>";
		//print_r($startups);
	}
	

	/**
	*   Get submit application questions for startup
	*
	*
	*/
	public function submitApplicationQuestions()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('StartupQuestions');
		$startupId=$_REQUEST['startup_id'];
		$UserId=$_REQUEST['user_id'];

		if($_REQUEST['user_id']!=''&&$_REQUEST['startup_id']!=''){

			//'StartupQuestions.is_submited'=>0
			$startupApplicationDetails= $this->StartupQuestions->find('all',['conditions'=>['StartupQuestions.startup_id'=>$startupId]])->first();

			if(!empty($startupApplicationDetails)){
				$questionslist= json_decode($startupApplicationDetails->questions);

				$result['code']=200;
				$result['user_id']=$UserId;
				$result['startup_id']=$startupId;
				$result['is_submited']= $startupApplicationDetails->is_submited;
				$result['questions']= $questionslist;
				echo json_encode($result);

			}else{
				/*$result['code']=404;
				$result['message']= 'No questions found.';
				echo json_encode($result);*/

				$StartupQuestionsList = TableRegistry::get('StartupSubmitapplicationQuestionList');
				$StartupQuestionsList = $StartupQuestionsList->find('all',['conditions'=>['StartupSubmitapplicationQuestionList.id'=>1]])->first();

				$result['code']=200;
				$result['user_id']=$UserId;
				$result['startup_id']=$startupId;
				$result['is_submited']= 0;
				$result['questions']=json_decode($StartupQuestionsList->name);
				echo json_encode($result); 
			
			}

		}else{
			$result['code']=404;
			$result['message']= 'No questions found.';
			echo json_encode($result);
		}
	}


	/**
	*   Get submit application questions for startup
	*
	*
	*/
	public function submitApplicationQuestionsIos()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		$this->loadModel('StartupQuestions');
		$startupId=$_REQUEST['startup_id'];
		$UserId=$_REQUEST['user_id'];

		if($_REQUEST['user_id']!=''&&$_REQUEST['startup_id']!=''){

			//'StartupQuestions.is_submited'=>0
			$startupApplicationDetails= $this->StartupQuestions->find('all',['conditions'=>['StartupQuestions.startup_id'=>$startupId]])->first();

			if(!empty($startupApplicationDetails)){
				$userQuestionList= json_decode($startupApplicationDetails->questions,true);

				/****  Above ****/
				foreach ($userQuestionList['above'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$above[]=$keys;
				}
					$rslt['above']=$above;

				/****  cofounders ****/	
				$id=0;
                $vj= count($userQuestionList['cofounders']);

                for($i=0;$i<$vj;$i++)
                {
                	$cofounders = [];
					foreach ($userQuestionList['cofounders'][$i] as $key => $value) 
					{
						$keys['key']=$key;
						$keys['value']=$value;

						$cofounders[]=$keys;
					}
					$abs[$i]=	$cofounders;
				}
					$rslt['cofounders']=$abs;
				/****  below ****/	
				foreach ($userQuestionList['below'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$below[]=$keys;
				}
					$rslt['below']=$below;		

				/****  belowA ****/	
				foreach ($userQuestionList['belowA'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowA[]=$keys;
				}
					$rslt['belowA']=$belowA;

				/****  belowB ****/	
				foreach ($userQuestionList['belowB'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowB[]=$keys;
				}
					$rslt['belowB']=$belowB;
				
				/****  belowC ****/	
				foreach ($userQuestionList['belowC'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowC[]=$keys;
				}
					$rslt['belowC']=$belowC;
					
				/****  belowD ****/	
				foreach ($userQuestionList['belowD'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowD[]=$keys;
				}
					$rslt['belowD']=$belowD;

				$result['code']=200;
				$result['user_id']=$UserId;
				$result['startup_id']=$startupId;
				$result['is_submited']= $startupApplicationDetails->is_submited;
				$result['questions']= $rslt;
				echo json_encode($result);

			}else{
				/*$result['code']=404;
				$result['message']= 'No questions found.';
				echo json_encode($result);*/

				$StartupQuestionsList = TableRegistry::get('StartupSubmitapplicationQuestionList');
				$StartupQuestionsList = $StartupQuestionsList->find('all',['conditions'=>['StartupSubmitapplicationQuestionList.id'=>1]])->first();
				$userQuestionList = json_decode($StartupQuestionsList->name,true);

				/****  Above ****/
				foreach ($userQuestionList['above'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$above[]=$keys;
				}
					$rslt['above']=$above;

				/****  cofounders ****/	
				foreach ($userQuestionList['cofounders'][0] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$cofounders[]=$keys;
				}
					$rslt['cofounders'][]=$cofounders;
				
				/****  below ****/	
				foreach ($userQuestionList['below'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$below[]=$keys;
				}
					$rslt['below']=$below;		

				/****  belowA ****/	
				foreach ($userQuestionList['belowA'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowA[]=$keys;
				}
					$rslt['belowA']=$belowA;

				/****  belowB ****/	
				foreach ($userQuestionList['belowB'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowB[]=$keys;
				}
					$rslt['belowB']=$belowB;
				
				/****  belowC ****/	
				foreach ($userQuestionList['belowC'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowC[]=$keys;
				}
					$rslt['belowC']=$belowC;

				/****  belowD ****/	
				foreach ($userQuestionList['belowD'] as $key => $value) 
				{
					$keys['key']=$key;
					$keys['value']=$value;

					$belowD[]=$keys;
				}
					$rslt['belowD']=$belowD;	

			 
				$result['code']=200;
				$result['user_id']=$UserId;
				$result['startup_id']=$startupId;
				$result['is_submited']= 0;
				$result['questions']=$rslt;
				echo json_encode($result); 
	
			}

		}else{
			$result['code']=404;
			$result['message']= 'No questions found.';
			echo json_encode($result);
		}
	}


	public function startupQuestionsIos(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$StartupQuestionsTable = TableRegistry::get('StartupQuestions');
		 
			if($this->request->is('post')){
			
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				
				$this->request->data = $jsonData;

				/****  Above ****/
				foreach ($this->request->data['questions']['above'] as $key => $value) 
				{
					$keys1[$value['key']]=$value['value'];

				}
					$rslt1['above']=$keys1;

				/****  cofounders ****/	
				$id=0;
                $vj= count($this->request->data['questions']['cofounders']);

                for($i=0;$i<$vj;$i++)
                {
                	$cofounders = [];
					foreach ($this->request->data['questions']['cofounders'][$i] as $key => $value) 
					{
						$keys2[$value['key']]=$value['value'];
					}
					$abs[$i]=	$keys2;
				}
					$rslt1['cofounders']=$abs;
					
				/****  below ****/	
				foreach ($this->request->data['questions']['below'] as $key => $value) 
				{
					$keys3[$value['key']]=$value['value'];

				}
					$rslt1['below']=$keys3;		

				/****  belowA ****/	
				foreach ($this->request->data['questions']['belowA'] as $key => $value) 
				{
					$keys4[$value['key']]=$value['value'];
	
				}
					$rslt1['belowA']=$keys4;

				/****  belowB ****/	
				foreach ($this->request->data['questions']['belowB'] as $key => $value) 
				{
					$keys5[$value['key']]=$value['value'];

				}
					$rslt1['belowB']=$keys5;
				
				/****  belowC ****/	
				foreach ($this->request->data['questions']['belowC'] as $key => $value) 
				{
					$keys6[$value['key']]=$value['value'];

				}
					$rslt1['belowC']=$keys6;
					
				/****  belowD ****/	
				foreach ($this->request->data['questions']['belowD'] as $key => $value) 
				{
					$keys7[$value['key']]=$value['value'];

				}
					$rslt1['belowD']=$keys7;

				
				$quData['startup_id'] = $this->request->data['startup_id'];
				$quData['is_submited'] = $this->request->data['is_submited'];
				$quData['questions'] = json_encode($rslt1);
				//print_r($quData);die('44'); 
				$exists = $StartupQuestionsTable->exists(['startup_id' => $quData['startup_id']]);
				
				if(!$exists){
					   $startupDoc = $StartupQuestionsTable->newEntity($quData);
						 
						if($startupDoc->errors()){
							 
						//here we are getting the errors while validating the data
						
							$errors = $startupDoc->errors();
							
							foreach($errors as $key=>$error){
								foreach($error as $errorKey=>$errorMessage){
									$finalErrors[$key] = $errorMessage;
								}
							}
							
							$result['code'] = 404;
							$result['errors'] = $finalErrors;
							echo json_encode($result);
						}else{
						//$startupDoc = $StartupQuestionsTable->patchEntity($startupDoc,$quData);

							if($StartupQuestionsTable->save($startupDoc)){
								 
								$result['code'] = 200;
								$result['message'] = 'Startup questions successfully saved.';
								echo json_encode($result);
							}else{
								$result['code'] = 404;
								$result['message'] = 'Startup questions not saved.';
								echo json_encode($result);
							}
							
							
						}
				}else{
							
					$query = $StartupQuestionsTable->query();
			
						if($query->update()
							->set(['questions'=>$quData['questions'],'is_submited'=>$quData['is_submited']
								   ])
							->where(['startup_id' => $quData['startup_id']])
							->execute()){
								
								$result['code']=200;
								$result['message']='Successfully updated.';
								echo json_encode($result);
								
						}else{
							$result['code']=404;
							$result['message']='Could not update.';
							echo json_encode($result);
						}
					
					
				}
				 
				 
				
				
			}
		 		  
	}



	function searchCampaigns()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);

	    $ContractorProffesionalsTable = $this->loadModel('ContractorProfessionals');

            $UserId = $_REQUEST['user_id'];
            $this->loadModel('Campaigns');

            //$this->paginate = [ 'limit' => 2];

            $page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Campaigns.id' => 'DESC'
							]
							
						];

                        //$startup_detail='';
                         $searchKeyword=$this->request->query('search');
                         //$searchKeyword = str_replace("'","",$searchKeyword);
                         $searchKeyword2 =explode("'", $searchKeyword);
                         $searchKeyword =$searchKeyword2[0];
                        //user should not be entrepreneur of a start up
                        if(!empty($searchKeyword)){  
                            $connection = ConnectionManager::get('default');
                                 
                                $qq = "SELECT SU.id FROM keywords as KY INNER JOIN campaigns as SU ON FIND_IN_SET(KY.id, SU.keywords) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id 
                                            UNION
                                            SELECT SU.id FROM campaigns as SU where SU.campaigns_name like '%".$searchKeyword."%'
                                            UNION
                                            SELECT SU.id FROM startups as EB INNER JOIN campaigns as SU ON SU.startup_id=EB.id where EB.name like  '%".$searchKeyword."%'";
                                
                                $sql = $connection->execute ($qq);
                                $startup_ids = $sql->fetchAll('assoc');

                                if(!empty($startup_ids)){

                                        foreach($startup_ids as $SingleUser):
                                                if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                                    $startupIDs[] = $SingleUser['id'];
                                                }
                                        endforeach;
                                //pr($startupIDs);
                                        if(!empty($startupIDs)){
                                                
                                                //$startup_detail = $this->Campaigns->find('all')->where(['Campaigns.id IN'=>$startupIDs,'Campaigns.user_id !='=>$UserId ])->contain(['Users'=>['EntrepreneurBasics']]);

                                          $startup_detail = $this->Campaigns->find('all')->where(['Campaigns.id IN'=>$startupIDs])->contain(['Users'=>['EntrepreneurBasics']]);        
                                        
                                        $result['TotalItems'] = $startup_detail->count();
                                        
                                        $startup_detail= $this->Paginator->paginate($this->Campaigns->find('all')->where(['Campaigns.id IN'=>$startupIDs])->contain(['Startups','Users'=>['EntrepreneurBasics']],$config));

                                        }
                                //pr($startup_detail->toArray());die;
                                }else {
                                      
                                       $startup_detail='';
                                } 

                         		if(!empty($startup_detail)){  
				                    	//$startup_detail= $startup_detail->toArray();  
				                    	//pr($startup_detail); die;
				                        foreach($startup_detail as $startup){

												$keys['campaign_id'] = $startup->id;
												$keys['campaign_name'] = $startup->campaigns_name;
												$keys['description'] =$startup->summary;
												$keys['due_date'] = $startup->due_date;
												$keys['fund_raised'] = $startup->fund_raised_so_far;
												$keys['startup_id'] =$startup->startup_id;
												$keys['startup_name'] =$startup->startup->name;
												$keys['target_amount'] = $startup->target_amount;

												$finalForumsList[] = $keys;
										}

										$result['code']=200;
										$result['campaign_list']= $finalForumsList;
										echo json_encode($result);   
								}else{
										$result['code']=404;
										$result['message']= 'No Campaigns found.';
										echo json_encode($result);
								}    
                                
                        }else {         
                            
                            $conditions = [];
                            //array_push($conditions,["Campaigns.user_id !="=>$UserId]);
                            $contractorKeywords = $this->ContractorProfessionals->find('all')
                                                    ->where(['user_id'=>$UserId])
                                                    ->select(['keywords'])
                                                    ->first();

                            if(!empty($contractorKeywords)&&($contractorKeywords->keywords!='')){
                                $conditions['OR'] = [];
                                $contractorKeywords = $contractorKeywords->toArray();
                                
                                foreach(explode(',',$contractorKeywords['keywords']) as $single_keyword):
                                     
                                     array_push($conditions['OR'],["FIND_IN_SET($single_keyword,Campaigns.keywords)"]);
                                     
                                endforeach;
                            //pr($conditions);die;
                                $startup_detail = $this->Campaigns->find('all')
                                                        ->where($conditions)->contain(['Users'=>['EntrepreneurBasics']]);
                                $result['TotalItems'] = $startup_detail->count();

                                $startup_detail = $this->Paginator->paginate($this->Campaigns->find('all')
                                                        ->where($conditions)->contain(['Startups','Users'=>['EntrepreneurBasics']]),$config);
                                //pr($startup_detail); die;
                            } else {
                                $startup_detail='';
                            }  

                            if(!empty($startup_detail)){  
		                    	//$startup_detail= $startup_detail->toArray();  
		                    	//pr($startup_detail); die;
		                        foreach($startup_detail as $startup){

										$keys['campaign_id'] = $startup->id;
										$keys['campaign_name'] = $startup->campaigns_name;
										$keys['description'] =$startup->summary;
										$keys['due_date'] = $startup->due_date;
										$keys['fund_raised'] = $startup->fund_raised_so_far;
										$keys['startup_id'] =$startup->startup_id;
										$keys['startup_name'] =$startup->startup->name;
										$keys['target_amount'] = $startup->target_amount;

										$finalForumsList[] = $keys;
								}

								$result['code']=200;
								$result['campaign_list']= $finalForumsList;
								echo json_encode($result);

							}else{
									$result['code']=404;
									$result['message']= 'No Campaigns found.';
									echo json_encode($result);
							}   

                        } 
                    	
	}


	function saveSubmitWorkorder()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	    $this->loadModel('StartupWorkOrders');
	   
	    if($this->request->is('post')) {

		    $json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;
			
			$UserId=$this->request->data['user_id']; 
			$is_submited=$this->request->data['is_submitted'];
			$main_startupid=$this->request->data['main_startupid'];  
			$unitsArr=$this->request->data['Work_order_array'];
			$unitsArrCount= count($unitsArr);

			//Startup Team Id
			$startupTeamId=$this->request->data['startup_team_id'];

			if(!empty($unitsArrCount)):

				for($xy=0; $xy<$unitsArrCount;$xy++){
				 	$unitDate= $unitsArr[$xy]['date'];
                    $unitStartup= $unitsArr[$xy]['startup_id'];
                    $unitDeliv= $unitsArr[$xy]['deliverable_id'];
                    $workUnits= $unitsArr[$xy]['work_units'];
                   
                    $week_noo = date('W', strtotime($unitDate)); 
                    $yearrr = date('Y', strtotime($unitDate));  


                    ///Check if submited date record exists 
                        $checkWorkOrderexist = $this->StartupWorkOrders->exists(['StartupWorkOrders.startup_id' => $unitStartup, 'StartupWorkOrders.user_id'=>$UserId,'StartupWorkOrders.work_date'=>$unitDate,'StartupWorkOrders.roadmap_id'=>$unitDeliv]); 
                    
                        if($checkWorkOrderexist ==1){
                            $checkWorkOrderexistArray = $this->StartupWorkOrders->find('all',['conditions'=>['StartupWorkOrders.startup_id' => $unitStartup, 'StartupWorkOrders.user_id'=>$UserId,'StartupWorkOrders.work_date'=>$unitDate,'StartupWorkOrders.roadmap_id'=>$unitDeliv]])->first();


                            if($is_submited == 1){ 
                                        ///Update data to database and change status 
                                        $updateWorkUnits = $this->StartupWorkOrders->newEntity();
                                        //$updateWorkUnits = $this->Startups->StartupWorkOrders->patchEntity($updateWorkUnits,$this->request->data);
                                        $updateWorkUnits['id']=$checkWorkOrderexistArray->id;
                                        $updateWorkUnits['user_id']=$UserId;
                                        $updateWorkUnits['startup_id']=$unitStartup;
                                        $updateWorkUnits['startup_team_id']=$startupTeamId;
                                        $updateWorkUnits['roadmap_id']=$unitDeliv;
                                        $updateWorkUnits['work_units']=$workUnits;
                                        $updateWorkUnits['status']=0;
                                        $updateWorkUnits['work_date']=$unitDate;
                                        $updateWorkUnits['is_submited']=$is_submited; //1
                                        $updateWorkUnits['week_no']=$week_noo.'_'.$yearrr;
                                        if ($this->StartupWorkOrders->save($updateWorkUnits)) {  
	                                        
                                        }else {
                                            //$this->Flash->error('Unable to update work units, Please try again.');
                                        }
                            }else{
                                        ///Update data to database and change status 
                                        if($checkWorkOrderexistArray->work_units == $workUnits)
                                        {
                                            $newSatus=$checkWorkOrderexistArray->status;
                                        }else{
                                            $newSatus=0;
                                        }    
                                        $updateWorkUnits = $this->StartupWorkOrders->newEntity();
                                        $updateWorkUnits['id']=$checkWorkOrderexistArray->id;
                                        $updateWorkUnits['user_id']=$UserId;
                                        $updateWorkUnits['startup_id']=$unitStartup;
                                        $updateWorkUnits['startup_team_id']=$startupTeamId;
                                        $updateWorkUnits['roadmap_id']=$unitDeliv;
                                        $updateWorkUnits['work_units']=$workUnits;
                                        $updateWorkUnits['status']=$newSatus;
                                        $updateWorkUnits['work_date']=$unitDate;
                                        $updateWorkUnits['is_submited']=$is_submited; //1
                                        $updateWorkUnits['week_no']=$week_noo.'_'.$yearrr;
                                        if ($this->StartupWorkOrders->save($updateWorkUnits)) {  
                                        //$this->Flash->success('Work Units have been updated successfully.'); 
                                        //return $this->redirect($this->referer());
                                        }else {
                                            //$this->Flash->error('Unable to update work units, Please try again.');
                                        }
                            }    
                        }else{
                            if(!empty($unitsArr[$xy]['work_units'])){   
                            ///Update data to database and change status 
                                    $updateWorkUnits = $this->StartupWorkOrders->newEntity();
                                    //$updateWorkUnits = $this->Startups->StartupWorkOrders->patchEntity($updateWorkUnits,$this->request->data);
                                    $updateWorkUnits['user_id']=$UserId;
                                    $updateWorkUnits['startup_id']=$unitStartup;
                                    $updateWorkUnits['startup_team_id']=$startupTeamId;
                                    $updateWorkUnits['roadmap_id']=$unitDeliv;
                                    $updateWorkUnits['work_units']=$workUnits;
                                    $updateWorkUnits['status']=0;
                                    $updateWorkUnits['work_date']=$unitDate;
                                    $updateWorkUnits['is_submited']=$is_submited;
                                    $updateWorkUnits['week_no']=$week_noo.'_'.$yearrr;
                                    if ($this->StartupWorkOrders->save($updateWorkUnits)) {  
                                        //$this->Flash->success('Work Units have been updated successfully.'); 
                                        //return $this->redirect($this->referer());
                                    }else {
                                        //$this->Flash->error('Unable to update work units, Please try again.');
                                    }
                            }        
                        }

				}// end of for loop

					//sending push notification to the user who has been getting followed
						if($is_submited == 1){

							$this->loadModel('UserTokens');
							$this->loadModel('Startups');
							$startupDetails= $this->Startups->get($main_startupid);

							$message = $this->Contractor->contractorName($UserId)."has updated work units for startup ".$this->Contractor->startupName($startupDetails->id);

								$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startupDetails->user_id]])
														->select(['access_token','device_type']);
								$finalAndroidTokens = [];
								$finalIosTokens = [];
								
								if($userToken->toArray()):
									
									$tokens = $userToken->toArray();

									$blankArray=[];
									foreach($tokens as $single_token):
									
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                				array_push($blankArray,$single_token['access_token']);
									endforeach;
									
									/*foreach($tokens as $single_token):
										
										if($single_token['access_token']!=''):
										
											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
					                      			if($length >60){
					                        			$finalIosTokens[] = $single_token['access_token'];
					                        		}
											endif;
											
										endif;
										
									endforeach;*/
									
								endif;
								
								$values = [];
								if(!empty($finalAndroidTokens)):
									$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Workunits_updated');
									
								endif;
								if(!empty($finalIosTokens)):
									
									$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Workunits_updated');	
								endif;
								
								//saving the notification
								$values = [];
								$link= Router::url(['controller' => 'Startups', 'action' => 'editStartupWorkorder',base64_encode($startupDetails->id)]);
								
								$this->Contractor->saveNotification($UserId,$startupDetails->user_id,'Workunits_updated',' has updated work units for startup <strong>'.$this->Contractor->startupName($startupDetails->id).' </strong>.',$link,json_encode((object)$values));
								
						}


				$result['code']=200;
				$result['message']= 'Work Units have been updated successfully.';
				echo json_encode($result);
			else:

				$result['code']=404;
				$result['message']= 'Work Units not updated.';
				echo json_encode($result);
			endif;
		    die;

		}		
	}


	/**
     * EditStartupWorkorder method 
     *
     *
     ***/
    public function approveWorkorderEntrepreneur()
    {       
            $this->viewBuilder()->layout(false);
	   	    $this->render(false);
	   	    $this->loadModel('Startups');
	   	    $this->loadModel('StartupWorkOrders');

			$startupId = $_REQUEST['startup_id'];
			$UserId = $_REQUEST['user_id'];

			$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no

						];

            //check if user has rights to access the team area of enerpreneur 
             $createdByLogUser = $this->Startups->exists(['id' => $startupId, 'user_id'=>$UserId]);

            //$startups = $this->Startups->StartupWorkOrders->find('all', ['conditions' => ['StartupWorkOrders.startup_id' => $startupId], 'order'=>['StartupWorkOrders.id DESC']])->contain(['Users','Roadmaps']);

            $startups = $this->StartupWorkOrders->find('all', [
                                                                'conditions' => ['StartupWorkOrders.startup_id' => $startupId,'StartupWorkOrders.is_submited' => 1],           
                                                                'fields' => [
                                                                    'total_work_units' => 'SUM(work_units)',
                                                                    'first_name' => 'users.first_name',
                                                                    'last_name' => 'users.last_name',
                                                                    'roadmap' => 'roadmaps.name',
                                                                    'week_no' => 'StartupWorkOrders.week_no',
                                                                    'user_id' => 'users.id',
                                                                    'startup_team_id' => 'StartupWorkOrders.startup_team_id',
                                                                    'status' => 'StartupWorkOrders.status',
                                                                    'date' => 'StartupWorkOrders.modified'
                                                                ],
                                                                'join' => [
                                                                        [
                                                                            'table' => 'users', 
                                                                            'type' => 'inner',
                                                                            'conditions' => 'StartupWorkOrders.user_id = users.id'
                                                                        ],
                                                                        [
                                                                            'table' => 'roadmaps', 
                                                                            'type' => 'inner',
                                                                            'conditions' => 'StartupWorkOrders.roadmap_id = roadmaps.id'
                                                                        ]
                                                                ],
                                                                'group' => ['StartupWorkOrders.startup_team_id','StartupWorkOrders.week_no'],
                                                    ]);
            //pr($startups->toArray()); die;
            if(!empty($createdByLogUser)){

                $startup_detail = $this->Paginator->paginate($startups,$config); 
                $final_array=[];
                foreach ($startup_detail as $key => $value) {

                    //if(empty($value->status)){	
                 	
	                 	$res['total_work_units'] = $value->total_work_units;
	                 	$res['first_name'] = $value->first_name;
	                 	$res['last_name'] = $value->last_name;
	                 	$res['deliverable_name'] = $value->roadmap;
	                 	$res['week_no'] = $value->week_no;
	                 	$res['user_id'] = $value->user_id;
	                 	$res['status'] = $value->status;
	                 	$res['contractor_id'] = $value->user_id;
	                 	$res['startup_id'] = $startupId;
	                 	$res['startup_team_id'] = $value->startup_team_id;

	                 	$rss= explode('_', $value->week_no);
	                                      $week= $rss[0];
	                                      $year= $rss[1];

	                 	$startdatearray = $this->getStartAndEndDate($week,$year);
	                 	$res['start_date'] = $startdatearray['week_start'];
	                 	$res['end_date'] = $startdatearray['week_end'];

	                 	$final_array[] =  $res;
	                //} 	
                 } 
                
                if(!empty($final_array)):
                 	$result['code']=200;
					$result['approvalList']= $final_array;
					echo json_encode($result);
				else:
					 $result['code']=404;
                 	 $result['message']= 'No approval List found.';
				 	 echo json_encode($result);
				endif;
             } else {
                 $result['code']=404;
                 $result['message']= 'No approval List found.';
				 echo json_encode($result);
             }


    }

    public function getStartAndEndDate($week, $year)
	{

	      $dto = new Time();
	      $dto->setISODate($year, $week);
	      $ret['week_start'] = $dto->format('F d, Y');
	      $dto->modify('+6 days');
	      $ret['week_end'] = $dto->format('F d, Y');
	      return $ret;
	}


	/**
     * accept method for workorder 
     *
     *
     ***/

    public function acceptWorkorderEntrepreneur()
    {
        	$this->viewBuilder()->layout(false);
	   	    $this->render(false);
			$startupId = $_REQUEST['startup_id'];
			$UserId = $_REQUEST['user_id'];
			$id = $_REQUEST['week_no'];

           $this->loadModel('StartupWorkOrders');
	        //$startupTeam = $this->Startups->StartupWorkOrders->get($id);
	        //$startupTeam->status=1;
	        //if ($this->Startups->StartupWorkOrders->save($startupTeam)) {
	        $query = $this->StartupWorkOrders->query();
	                 $query->update()
	                        ->set(['status'=>1])
	                        ->where(['user_id'=>$UserId,'startup_id'=>$startupId,'week_no' => $id])
	                        ->execute();
	        

	        if ($query) {

	        		//sending push notification to the user who has been getting followed

					$this->loadModel('UserTokens');
					$this->loadModel('Startups');
					$startupDetails= $this->Startups->get($startupId);

					$message = $this->Contractor->contractorName($startupDetails->user_id)."has accepted your work units for startup ".$this->Contractor->startupName($startupDetails->id);

						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startupDetails->user_id]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							$blankArray=[];
									foreach($tokens as $single_token):
									
										if (!in_array($single_token['access_token'], $blankArray)){

											if($single_token['device_type']=='android'):
												$finalAndroidTokens[] = $single_token['access_token'];
											else:
												//$finalIosTokens[] = $single_token['access_token'];
												$length = strlen($single_token['access_token']);
				                      			if($length >60){
				                        			$finalIosTokens[] = $single_token['access_token'];
				                        		}
											endif;   
										}  
		                				array_push($blankArray,$single_token['access_token']);
									endforeach;

							
							/*foreach($tokens as $single_token):
								
								if($single_token['access_token']!=''):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endif;
								
							endforeach;*/
							
						endif;
						
						$values = [];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Workunits_accepted');
							
						endif;
						if(!empty($finalIosTokens)):
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Workunits_accepted');	
						endif;
						
						//saving the notification
						$values = [];
						$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupWorkorder',base64_encode($startupDetails->id)]);
						
						$this->Contractor->saveNotification($startupDetails->user_id,$UserId,'Workunits_accepted',' has accepted your work units for startup <strong>'.$this->Contractor->startupName($startupDetails->id).' </strong>.',$link,json_encode((object)$values));

						//Save feeds
           	 			$this->Feeds->saveStartupFeeds($startupDetails->user_id,'feeds_startup_completed_assignment',$startupDetails->id);

	        		$result['code']=200;
                 	$result['message']= 'Work units has been approved successfully.';
				 	echo json_encode($result);
	        } else {
	        	$result['code']=404;
                $result['message']= 'Work units could not be removed. Please, try again.';
				echo json_encode($result);
	        }

    }


    /**
     * reject method for workorder 
     *
     *
     ***/

    public function rejectWorkorderEntrepreneur()
    {
        	$this->viewBuilder()->layout(false);
	   	    $this->render(false);
			$startupId = $_REQUEST['startup_id'];
			$UserId = $_REQUEST['user_id'];
			$id = $_REQUEST['week_no'];

        //$startupTeam = $this->Startups->StartupWorkOrders->get($id);
       //$startupTeam->status=2;
        $StartupWorkOrdersTable = TableRegistry::get('StartupWorkOrders');
        $dlett= $StartupWorkOrdersTable->deleteAll(['user_id'=>$UserId,'startup_id'=>$startupId,'week_no' => $id]);
        //if ($this->Startups->StartupWorkOrders->delete($startupTeam)) {
        if ($dlett) {

        		//sending push notification to the user who has been getting followed

					$this->loadModel('UserTokens');
					$this->loadModel('Startups');
					$startupDetails= $this->Startups->get($startupId);

					$message = $this->Contractor->contractorName($startupDetails->user_id)."has rejected your work units for startup ".$this->Contractor->startupName($startupDetails->id);

						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$startupDetails->user_id]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();

							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							
							/*foreach($tokens as $single_token):
								
								if($single_token['access_token']!=''):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endif;
								
							endforeach;*/
							
						endif;
						
						$values = [];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Workunits_rejected');
							
						endif;
						if(!empty($finalIosTokens)):
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Workunits_rejected');	
						endif;
						
						//saving the notification
						$values = [];
						$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupWorkorder',base64_encode($startupDetails->id)]);
						
						$this->Contractor->saveNotification($startupDetails->user_id,$UserId,'Workunits_rejected',' has rejected your work units for startup <strong>'.$this->Contractor->startupName($startupDetails->id).' </strong>.',$link,json_encode((object)$values));


        	$result['code']=200;
            $result['message']= 'Work units has been rejected successfully.';
			echo json_encode($result);
            
        } else {
        	$result['code']=404;
            $result['message']= 'Work units could not be rejected. Please, try again.';
			echo json_encode($result);
        }

    }
  



	public function dynamicRoadmaps(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		 
        $this->loadModel('RoadmapDynamics');
        $RoadmapDynamics= $this->RoadmapDynamics->find('all')
								->where(['RoadmapDynamics.status'=>'1'])->toArray();
		
        if(!empty($RoadmapDynamics)){
        	$finalResult = array();
                         
			foreach($RoadmapDynamics as $SingleRoadmapDynamics):
					$base= Router::url('/', true);
					$url = Router::url(['controller' => 'Contractors', 'action' => 'viewLeanRoadmapApps',base64_encode($SingleRoadmapDynamics->id)]);

					$result['id'] = $SingleRoadmapDynamics->id;
					$result['title'] = $SingleRoadmapDynamics->title;
					$result['description'] = $base.$url;

					if(!empty($SingleRoadmapDynamics->sample_link)){
						$sample_link= $SingleRoadmapDynamics->sample_link;
					}else{
						$sample_link='sample_doc_file.pdf';
					}
					$result['sample_link'] = $base.'img/sampledoc/'.$sample_link;
					$result['template_link'] = $base.'img/sampledoc/'.$SingleRoadmapDynamics->template_link;
					
					$result['color_hexa'] = $SingleRoadmapDynamics->color;
					$result['color'] = $this->hex2rgb($SingleRoadmapDynamics->color);

					$finalResult[]=$result;
			endforeach;
  
			$outputresult['code']=200;
			$outputresult['startup']= $finalResult;
			echo json_encode($outputresult);

        }else{
        	$result['code']=404;
			$result['message']= 'No Roadmaps found.';
			echo json_encode($result);
        }
		
	}

	function hex2rgb($hex) 
	{
	   $hex = str_replace("#", "", $hex);

	   if(strlen($hex) == 3) {
	      $r = hexdec(substr($hex,0,1).substr($hex,0,1));
	      $g = hexdec(substr($hex,1,1).substr($hex,1,1));
	      $b = hexdec(substr($hex,2,1).substr($hex,2,1));
	   } else {
	      $r = hexdec(substr($hex,0,2));
	      $g = hexdec(substr($hex,2,2));
	      $b = hexdec(substr($hex,4,2));
	   }
	   $rgb = array($r, $g, $b);
	   //return implode(",", $rgb); // returns the rgb values separated by commas
	   return $rgb; // returns an array with the rgb values
	}


	public function notificationsCount()
	{
        $this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('userNotifications');

        	if(isset($_REQUEST['user_id'])){

		        $loginUserId  = $_REQUEST['user_id'];
		        $notificationsCount = $this->userNotifications->find('all',['conditions'=>['userNotifications.receiver_id'=>$loginUserId,'userNotifications.seen'=>0]])->toArray();
		        $count=count($notificationsCount);

		        if(!empty($count)){
		        	$result['code']=200;
		        	$result['count']= $count;
					echo json_encode($result);
		        }else{
		        	$result['code']=404;
					$result['message']= 'No notifications found.';
					echo json_encode($result);
		        }
        	}else{
	        	$result['code']=404;
				$result['message']= 'No notifications found.';
				echo json_encode($result);
	        }
    }

    public function updateNotificationsCount()
    {

            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userNotifications');
            
            
            if(isset($_REQUEST['user_id'])){

                $loginUserId  = $_REQUEST['user_id']; 

	            if(!empty($loginUserId)){

	            	$query = $this->userNotifications->query();
	                $query->update()->set(['seen'=>1])->where(['receiver_id' => $loginUserId])->execute();

		        	$result['code']=200;
		        	$result['message']= 'Notification count updated successfully';
					echo json_encode($result);
		        }else{
		        	$result['code']=404;
					$result['message']= 'Can not update notification count.';
					echo json_encode($result);
		        } 

		    }else{
	        	$result['code']=404;
				$result['message']= 'Can not update notification count.';
				echo json_encode($result);
	        }               
    }



    /**
    *
    *
    *
    ***/
    public function startupWorkorderRatings()
    {
		$this->viewBuilder()->layout(false);
	    $this->render(false);
	
		$this->loadModel('WorkorderRatings');
		$updateWorkUnits = $this->WorkorderRatings->newEntity();	 
			if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;
				
			    $this->request->data['given_by'];
                $this->request->data['given_to'];
                $this->request->data['description']=$this->request->data['work_comment'];
                $this->request->data['startup_id'];
                $this->request->data['rating_star'];
                $this->request->data['week_no'];
                $this->request->data['status']=1;
                $this->request->data['is_entrepreneur'];
                $this->request->data['startup_team_id'];

                $workorderRatingList = $this->WorkorderRatings->find('all', ['conditions' => ['WorkorderRatings.startup_id' => $this->request->data['startup_id'],'WorkorderRatings.startup_team_id'=>$this->request->data['startup_team_id'],'WorkorderRatings.week_no' => $this->request->data['week_no'],'WorkorderRatings.given_by' => $this->request->data['given_by']]])->first();

                $updateWorkUnits = $this->WorkorderRatings->patchEntity($updateWorkUnits,$this->request->data);

                //Check id rating exist for user
                if(!empty($workorderRatingList)){
                  $updateWorkUnits->id=$workorderRatingList->id;
                }
                if ($this->WorkorderRatings->save($updateWorkUnits)) { 

                	//sending push notification to the user who has been getting followed
					$this->loadModel('UserTokens');
					$this->loadModel('Startups');
					$startupDetails= $this->Startups->get($this->request->data['startup_id']);

					if(!empty($this->request->data['is_entrepreneur'])){
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has commented on your workorder.";
					}else{
						$message = $this->Contractor->contractorName($this->request->data['given_by'])." has commented on workorder.";
					}
						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$this->request->data['given_to']]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							
							/*foreach($tokens as $single_token):
								
								if($single_token['access_token']!=''):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endif;
								
							endforeach;*/
							
						endif;
						
						$values = [];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Workorder_rating');
							
						endif;
						if(!empty($finalIosTokens)):
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Workorder_rating');	
						endif;
						
						//saving the notification
						$values = [];

						if(!empty($this->request->data['is_entrepreneur'])){

							$link= Router::url(['controller' => 'Startups', 'action' => 'viewStartupWorkorder',base64_encode($this->request->data['startup_id'])]);

							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Workorder_rating',' has commented on your workorder.',$link,json_encode((object)$values));

						}else{
							$vj= explode('_',$this->request->data['week_no']);

							$link= Router::url(['controller' => 'Startups', 'action' => 'entrepreneurStartupWorkorder',base64_encode($this->request->data['startup_id']),$vj[0],$vj[1],base64_encode($this->request->data['startup_team_id'])]);
						
							$this->Contractor->saveNotification($this->request->data['given_by'],$this->request->data['given_to'],'Workorder_rating',' has commented on workorder.',$link,json_encode((object)$values));
						}


                        $result['code']=200;
						$result['message']= 'Comment saved successfully.';
						echo json_encode($result);

                }else {
                        $result['code']=404;
						$result['message']= 'Unable to save your comment, Please try again.';
						echo json_encode($result);
                }
            }    
	}


	/**
	*
	* addConnection Method
	*
	*
	****/
	public function addConnection()
    {

            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userConnections');
            
            
            if(isset($_REQUEST['connection_by'])){

                $UserId  = $_REQUEST['connection_by']; 
                $connectionUserId = $_REQUEST['connection_to'];
                $status = $_REQUEST['status'];


                $connections = $this->userConnections->newEntity();

                $this->request->data['connection_by']=$UserId;
                $this->request->data['connection_to']=$connectionUserId;

                //Check is user added you to your connection list
                $connectionList = $this->userConnections->find('all',['conditions'=>['userConnections.connection_by'=>$UserId,'userConnections.connection_to'=>$connectionUserId]])->first();

                

                $connectionId='';
                if(!empty($connectionList)){
                  $connectionId=$connectionList->id;
                }else{
                  $connectionList = $this->userConnections->find('all',['conditions'=>['userConnections.connection_by'=>$connectionUserId,'userConnections.connection_to'=>$UserId]])->first();
                  
                  if(!empty($connectionList)){
                    $connectionId=$connectionList->id;
                  }
                }

                //pr($connectionList); die;

                $connections = $this->userConnections->patchEntity($connections,$this->request->data);
                if(!empty($connectionId)){
                  $connections->id=$connectionId;
                }
                
                $saveResult= $this->userConnections->save($connections);
                if ($saveResult){
                	$lastInsertId =$saveResult->id; 

                	//sending push notification to the user who has been getting followed
					$this->loadModel('UserTokens');

						$ccN= $this->Contractor->contractorName($UserId);
						$message = trim($ccN)." wants to connect with you.";

						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$connectionUserId]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							
							/*foreach($tokens as $single_token):
								
								if($single_token['access_token']!=''):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endif;
								
							endforeach;*/
							
						endif;
						//echo '<pre>';
						//print_r($finalIosTokens);
						$values = ['user_id'=>$UserId,'connection_id'=>$lastInsertId,'status'=>$status];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Add_Connection');
							
						endif;
						if(!empty($finalIosTokens)):
							
						$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Add_Connection');	
						endif;
						
						//saving the notification
						//json_encode((object)$values)
						$values = ['user_id'=>$UserId,'connection_id'=>$lastInsertId,'status'=>$status];
						$link= Router::url(['controller' => 'Contractors', 'action' => 'viewProfile',base64_encode($UserId)]);
					
						$this->Contractor->saveNotification($UserId,$connectionUserId,'Add_Connection',' wants to connect with <strong>you.</strong>',$link,json_encode($values));


                    $result['code']=200;
                    $result['connection_id']=$lastInsertId;
		        	$result['message']= 'Connection request sent successfully.';
					echo json_encode($result);

                }else{
		        	$result['code']=404;
					$result['message']= 'Could not send connection request now! Please try again.';
					echo json_encode($result);
		        } 

		    }else{
	        	$result['code']=404;
				$result['message']= 'Could not send connection request now! Please try again.';
				echo json_encode($result);
	        }               
    }


    /**
    * acceptConnection Method
    *
    *
    ***/
    public function acceptConnection()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userConnections');


            if(isset($_REQUEST['connection_id'])){

	            $UserId = $_REQUEST['user_id'];
	            $connectionId = $_REQUEST['connection_id']; 
	            $status = $_REQUEST['status'];

	            $userConnections = $this->userConnections->find('all',['conditions'=>['userConnections.id'=>$connectionId]])->first();

	            if(!empty($userConnections)){
	              $query = $this->userConnections->query();
	                $query->update()
	                ->set(['status'=>1])
	                ->where(['id'=>$connectionId])
	                ->execute();

	              //sending push notification to the user who has been getting followed
					$this->loadModel('UserTokens');
						$ccN= $this->Contractor->contractorName($UserId);
						$message = trim($ccN)." has accepted your connection request.";

						$userToken = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$userConnections->connection_by]])
												->select(['access_token','device_type']);
						$finalAndroidTokens = [];
						$finalIosTokens = [];
						
						if($userToken->toArray()):
							
							$tokens = $userToken->toArray();
							$blankArray=[];
							foreach($tokens as $single_token):
							
								if (!in_array($single_token['access_token'], $blankArray)){

									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
		                      			if($length >60){
		                        			$finalIosTokens[] = $single_token['access_token'];
		                        		}
									endif;   
								}  
                				array_push($blankArray,$single_token['access_token']);
							endforeach;
							
							/*foreach($tokens as $single_token):
								
								if($single_token['access_token']!=''):
								
									if($single_token['device_type']=='android'):
										$finalAndroidTokens[] = $single_token['access_token'];
									else:
										//$finalIosTokens[] = $single_token['access_token'];
										$length = strlen($single_token['access_token']);
			                      			if($length >60){
			                        			$finalIosTokens[] = $single_token['access_token'];
			                        		}
									endif;
									
								endif;
								
							endforeach;*/
							
						endif;
						
						$values = [];
						if(!empty($finalAndroidTokens)):
							$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'Accepted_Connection');
							
						endif;
						if(!empty($finalIosTokens)):
							
							$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'Accepted_Connection');	
						endif;
						
						//saving the notification
						$values = [];
						$link= Router::url(['controller' => 'Contractors', 'action' => 'viewProfile',base64_encode($userConnections->connection_to)]);
					
						$this->Contractor->saveNotification($userConnections->connection_to,$userConnections->connection_by,'Accepted_Connection',' has accepted your connection <strong> request.</strong>',$link,json_encode((object)$values));


						$this->loadModel('UserNotifications');
		                $query2 = $this->UserNotifications->query();
		                $query2->update()
		                ->set(['status'=>1])
		                ->where(['sender_id'=>$userConnections->connection_by,'receiver_id'=>$userConnections->connection_to,'type'=>'Add_Connection'])
		                ->execute();


                    $result['code']=200;
		        	$result['message']= 'Connection request accepted successfully.';
					echo json_encode($result);
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not accept connection request now! Please try again.';
					echo json_encode($result);
 
	            }  
	        }else{
	        	$result['code']=404;
				$result['message']= 'Could not accept connection request now! Please try again.';
				echo json_encode($result);
	        }      
    } 

    /**
    * rejectConnection Method
    *
    *
    ***/
    public function rejectConnection()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userConnections');
            


            if(isset($_REQUEST['connection_id'])){
            	$connectionId = $_REQUEST['connection_id']; 
            	$userConnections = $this->userConnections->find('all',['conditions'=>['userConnections.id'=>$connectionId]])->first();

	            if(!empty($userConnections)){
	                
	                /*$query = $this->userConnections->query();
	                $query->update()
	                ->set(['status'=>1])
	                ->where(['id'=>$connectionId])
	                ->execute();*/

	                //Delete Notfication
	                $this->loadModel('UserNotifications');
	                $query2 = $this->UserNotifications->query();
	                $query2->delete()
	                ->where(['sender_id'=>$userConnections->connection_by,'receiver_id'=>$userConnections->connection_to,'type'=>'Add_Connection'])
	                ->execute();

	                $query = $this->userConnections->query();
	                $query->delete()
	                ->where(['id'=>$connectionId])
	                ->execute();

	                

	            	$result['code']=200;
		        	$result['message']= 'Connection request rejected successfully.';
					echo json_encode($result);
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not reject connection request now! Please try again.';
					echo json_encode($result);
				}	

            }else{
            		$result['code']=404;
					$result['message']= 'Could not reject connection request now! Please try again.';
					echo json_encode($result);
            }
    }


    /**
    * myConnections Method
    *
    *
    ***/
    public function myConnections()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userConnections');

            $page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no
						];

            if(isset($_REQUEST['loggedin_user_id'])){

            	$UserId = $_REQUEST['loggedin_user_id'];

            	$connectionLists = $this->Paginator->paginate( $this->userConnections->find('all',
                                                      ['conditions'=>
                                                        ['userConnections.status'=>1,
                                                        'OR'=>[
                                                                ['userConnections.connection_by'=>$UserId],
                                                                ['userConnections.connection_to'=>$UserId]
                                                              ]  
                                                        ]
                                                      ]),$config);	
            	$TotalItems= $connectionLists->count();
            	if(!empty($TotalItems)){
		
					foreach($connectionLists as $connectionList){

						if($connectionList->connection_by == $UserId){
                          $contractorId=$connectionList->connection_to;
                        }else{
                          $contractorId=$connectionList->connection_by;
                        }

                        $keys['contractor_id']= $contractorId;
                        $keys['contractor_image']= $this->Contractor->contractorImage($contractorId);
						$keys['contractor_name']= $this->Contractor->contractorName($contractorId);

						$finalConnections[] = $keys;
					}
					$result['code']=200;
					$result['TotalItems']=$TotalItems;
					$result['connection_list']= $finalConnections;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No connections found.';
					echo json_encode($result);
				}	

            }else{
            		$result['code']=404;
					$result['message']= 'No connections found.';
					echo json_encode($result);
            }	
    }

    /**
    * myConnections Method
    *
    *
    ***/
    public function searchConnections()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('userConnections');
            $this->loadModel('ContractorBasics');

            $page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no
						];

            if(isset($_REQUEST['search_text'])){
            	
            	$searchKeyword=trim($_REQUEST['search_text']);
                $searchKeyword = str_replace("'","",$searchKeyword);  

            	$UserId = $_REQUEST['loggedin_user_id'];

            	$connectionLists = $this->Paginator->paginate( $this->ContractorBasics->find('all', 
            		['conditions' => 
                                [ 
                                 'OR' =>[
                                    ['ContractorBasics.first_name LIKE' => '%'.$searchKeyword.'%'],
                                    ['ContractorBasics.last_name LIKE' => '%'.$searchKeyword.'%']
                                    ]
                                ],           
                                'fields' => [
                                    'connection_by' => 'user_connections.connection_by',
                                    'connection_to' => 'user_connections.connection_to'
                                ],
                                'join' => [
                                        [
                                            'table' => 'user_connections', 
                                            'type' => 'inner',
                                            'conditions' => 
                                            ['user_connections.status'=>1,
                                              'OR' => 
                                              [ 
                                                [
                                                'ContractorBasics.user_id = user_connections.connection_by',
                                                'user_connections.connection_to'=>$UserId
                                                ],

                                                [
                                                'ContractorBasics.user_id = user_connections.connection_to',
                                                'user_connections.connection_by'=>$UserId
                                                ]
                                              ]   
                                            ]
                                        ]

                                ],
                    ]),$config);	
            	$TotalItems= $connectionLists->count();
            	if(!empty($TotalItems)){
		
					foreach($connectionLists as $connectionList){

						if($connectionList->connection_by == $UserId){
                          $contractorId=$connectionList->connection_to;
                        }else{
                          $contractorId=$connectionList->connection_by;
                        }

                        $keys['contractor_id']= $contractorId;
                        $keys['contractor_image']= $this->Contractor->contractorImage($contractorId);
						$keys['contractor_name']= $this->Contractor->contractorName($contractorId);

						$finalConnections[] = $keys;
					}
					$result['code']=200;
					$result['TotalItems']=$TotalItems;
					$result['connection_list']= $finalConnections;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No connections found.';
					echo json_encode($result);
				}	

            }else{
            		$result['code']=404;
					$result['message']= 'No connections found.';
					echo json_encode($result);
            }	
    }

    /**
    * myMessages Method
    *
    *
    ***/
    public function myMessages()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $MessagesTable = $this->loadModel('Messages');

            if(isset($_REQUEST['loggedin_user_id'])){
				$user_id = $_REQUEST['loggedin_user_id'];
				$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'Messages.id' => 'DESC'
								]
							];
				
				$query = $this->Messages->find('all')
		                            ->where(['Messages.receiver_id'=>$user_id,'Messages.archived !='=>1]);
				$result['TotalItems'] = $query->count();
				$Messages = $this->Paginator->paginate(
														$this->Messages->find('all')
														->where(['Messages.receiver_id'=>$user_id,
																	   'Messages.archived !='=>1,'Messages.msg_type'=>'connection'])
															, $config);
				if($Messages->toArray()):
					$Messages = $Messages->toArray();
					foreach($Messages as $Message){
							
						$keys['id'] = ($Message->id!='')?$Message->id:' ';
						$keys['title'] = ($Message->subject!='')?$Message->subject:' ';
						$keys['description'] = ($Message->comment!='')?$Message->comment:' ';
						$keys['sender'] = ($Message->description!=' ')?$Message->description:' ';
						$keys['time'] = ($Message->created!=' ')?$Message->created:' ';
							
						//getting the sender name
							
						if($Message->sender_role_id=='1'):
							$user = $this->Contractor->userEntrepreneurBasic($Message->sender_id);
								
								if(isset($user['entrepreneur_basic'])&&!empty($user['entrepreneur_basic'])){
									
									if(!empty($user['entrepreneur_basic'])&& isset($user['entrepreneur_basic'])):
										$first_name = ($user['entrepreneur_basic']['first_name']!='')?$user['entrepreneur_basic']['first_name']:' ';
										$last_name = ($user['entrepreneur_basic']['last_name']!='')?$user['entrepreneur_basic']['last_name']:' ';
															
										$keys['sender'] = $first_name.' '.$last_name;
															
									elseif(!empty($user)):
															
										$first_name = ($user['first_name']!='')?$user['first_name']:' ';
										$last_name = ($user['last_name']!='')?$user['last_name']:' ';
										$keys['sender'] = $first_name.' '.$last_name;					
									endif;
								
								}else{
									$first_name = ($user['first_name']!='')?$user['first_name']:' ';
									$last_name = ($user['last_name']!='')?$user['last_name']:' ';
									$keys['sender'] = $first_name.' '.$last_name;
								}
										 
						else:
											 
							$user = $this->Contractor->userContractorBasic($Message->sender_id);
													
							if(isset($user['contractor_basic'])&&!empty($user['contractor_basic'])){
														
								if(!empty($user['contractor_basic'])&& isset($user['contractor_basic'])):
											
									$first_name = (isset($user['contractor_basic']['first_name']))?$user['contractor_basic']['first_name']:' ';
									$last_name = (isset($user['contractor_basic']['last_name']))?$user['contractor_basic']['last_name']:' ';
															
									$keys['sender'] = $first_name.' '.$last_name;
															
								elseif(!empty($user)):
															
									$first_name = ($user->first_name!='')?$user->first_name:' ';
									$last_name = ($user->last_name!='')?$user->last_name:' ';
									$keys['sender'] = $first_name.' '.$last_name;
															
								endif;
														 
							}else{
														
								$first_name = ($user['first_name']!='')?$user['first_name']:' ';
								$last_name = ($user['last_name']!='')?$user['last_name']:' ';
								$keys['sender'] = $first_name.' '.$last_name;
														 
							}
													
						endif;
										
							$finalMessageList[] = $keys;
					}
			
					$result['Messages'] = $finalMessageList;
					$result['code'] = 200;
					echo json_encode($result);
				
				else:

					$result['code']=404;
					$result['message']= 'No messages found.';
					echo json_encode($result);

				endif;	

           	}else{
            		$result['code']=404;
					$result['message']= 'No messages found.';
					echo json_encode($result);
            } 	
    }

    /**
    * keywordTypeLits Method
    *
    *
    ***/
    public function keywordTypeList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('KeywordTypes');

            $KeywordTypes= $this->KeywordTypes->find('all');

            $TotalItems= $KeywordTypes->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($KeywordTypes as $KeywordType){

                    $keys['keyword_type_id']= $KeywordType->id;
					$keys['keyword_type_name']= $KeywordType->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_type_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No keyword type list found.';
				echo json_encode($result);
			}	       	
    }


    /***
    * addSuggestKeywords Method
    *
    *
    ****/
    public function addSuggestKeywords()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('KeywordSuggested');


            $KeywordSuggested = $this->KeywordSuggested->newEntity();

          	if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

	              $this->request->data['user_id'];
	              $this->request->data['type']=$this->request->data['keyword_type_id'];
	              $this->request->data['status']=0;
	              $this->request->data['name']=$this->request->data['keyword_name'];

              	if(!empty($this->request->data['type']))
              	{

              		$KeywordSuggested = $this->KeywordSuggested->patchEntity($KeywordSuggested,$this->request->data);

	              	if ($this->KeywordSuggested->save($KeywordSuggested)) {
	                  
	                  	$result['code']=200;
						$result['message']= 'Keyword has been saved successfully.';
						echo json_encode($result);

	              	}else{
	                  	$result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						echo json_encode($result);
	              	}
	            }else{
	                  	$result['code']=404;
						$result['message']= 'Please select keyword types.';
						echo json_encode($result);
	            }  	
          	}else{
                  	$result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					echo json_encode($result);
          }

    }


    /**
    * keywordTypeLits Method
    *
    *
    ***/
    public function suggestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('KeywordSuggested');
          	$this->loadModel('KeywordTypes');

          	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 20,
							'page'=>$page_no,
							'order' => [
								'KeywordSuggested.id' => 'DESC'
							]
						];

			if(isset($_REQUEST['user_id'])){

				$UserId = $_REQUEST['user_id'];

	            $KeywordSuggestedLists= $this->KeywordSuggested->find('all',['conditions'=>['KeywordSuggested.user_id'=>$UserId]])->contain(['KeywordTypes']);


	            $TotalItems= $KeywordSuggestedLists->count();

	            $KeywordSuggestedLists = $this->Paginator->paginate($this->KeywordSuggested->find('all',['conditions'=>['KeywordSuggested.user_id'=>$UserId]])->contain(['KeywordTypes'])
															, $config);
	        	
	        	if(!empty($TotalItems)){
		
					foreach($KeywordSuggestedLists as $KeywordSuggestedList){

	                    $keys['keyword_id']= $KeywordSuggestedList->id;
						$keys['keyword_name']= $KeywordSuggestedList->name;
						$keys['keyword_type_name']= $KeywordSuggestedList->keyword_type->name;
						$keys['status']= $KeywordSuggestedList->status;

						$finalConnections[] = $keys;
					}
					$result['code']=200;
					$result['TotalItems']=$TotalItems;
					$result['suggest_keyword_list']= $finalConnections;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No keyword list found.';
					echo json_encode($result);
				}	

			}else{
					$result['code']=404;
					$result['message']= 'No keyword list found.';
					echo json_encode($result);
			}	       	
    }

    /***
    * suggestKeywords Method
    *
    *
    ****/
    public function deleteSuggestKeywords()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('KeywordSuggested');

            if(isset($_REQUEST['user_id'])){
            	$Id= $_REQUEST['keyword_id'];
	            $UserId =$_REQUEST['user_id'];

	            $exists = $this->KeywordSuggested->exists(['id' => $Id, 'user_id'=>$UserId]);

	            if(!empty($exists)){

	                $query = $this->KeywordSuggested->query();
	                $query->delete()
	                ->where(['id' => $Id, 'user_id'=>$UserId])
	                ->execute();

	                $result['code']=200;
					$result['message']= 'Keyword has been deleted successfully.';
					echo json_encode($result);

	            }else{
	                $result['code']=404;
					$result['message']= 'No keyword found.';
					echo json_encode($result);
	            } 

	        }else{
					$result['code']=404;
					$result['message']= 'No keyword found.';
					echo json_encode($result);
			}       

    }


    /**
    * keywordTypeLits Method
    *
    *
    ***/
    public function companyKeywordList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobPostingKeywords');

            $KeywordTypes= $this->JobPostingKeywords->find('all');

            $TotalItems= $KeywordTypes->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($KeywordTypes as $KeywordType){

                    $keys['company_keyword_id']= $KeywordType->id;
					$keys['company_keyword_name']= $KeywordType->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['company_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No company keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /***
    * searchCompany Method
    *
    *
    ****/
    public function searchCompany()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SubAdminDetails');

            if(isset($_REQUEST['user_id'])){
            	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'SubAdminDetails.id' => 'DESC'
								]
							];

            	if(isset($_REQUEST['search_text'])){

	            	$searchKeyword=$_REQUEST['search_text'];

			        	if (strpos($searchKeyword, "'") !== false) {
			            	$searchKeywordArray=explode("'", $searchKeyword);
			            	$searchKeyword=$searchKeywordArray[0];
			        	}


		            $companyLists= $this->Paginator->paginate( $this->SubAdminDetails->find('all',['conditions'=>['SubAdminDetails.company_name LIKE' => '%'.$searchKeyword.'%']])->contain(['Users']),$config);

		            $TotalItems= $companyLists->count();

		            if(!empty($TotalItems)){
		
						foreach($companyLists as $companyList){

		                    $keys['company_id']= $companyList->id;
							$keys['company_name']= $companyList->company_name;
							$keys['company_owner_name']= $companyList->user->first_name.' '.$companyList->user->last_name;
							$keys['company_description']= $companyList->description;
							if(!empty($companyList->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$companyList->profile_image;
							}else{
								$keys['company_image']='';
							}
							
							$keys['company_keywords']=[];
							if($companyList->job_posting_keywords!=''):

								$keys['company_keywords'] = $this->Contractor->companyKeywords($companyList->job_posting_keywords);

							endif;

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['company_list']= $finalConnections;
						echo json_encode($result);
					}else{
						$result['code']=404;
						$result['message']= 'No companies found.';
						echo json_encode($result);
					}
		          
		        }else { 

		            $companyLists= $this->Paginator->paginate($this->SubAdminDetails->find('all')->contain(['Users']),$config);  

		            $TotalItems= $companyLists->count();

		            if(!empty($TotalItems)){
		
						foreach($companyLists as $companyList){

		                    $keys['company_id']= $companyList->id;
							$keys['company_name']= $companyList->company_name;
							$keys['company_owner_name']= $companyList->user->first_name.' '.$companyList->user->last_name;
							$keys['company_description']= $companyList->description;
							if(!empty($companyList->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$companyList->profile_image;
							}else{
								$keys['company_image']='';
							}
							$keys['company_keywords']=[];
							if($companyList->job_posting_keywords!=''):

								$keys['company_keywords'] = $this->Contractor->companyKeywords($companyList->job_posting_keywords);

							endif;

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['company_list']= $finalConnections;
						echo json_encode($result);
					}else{
						$result['code']=404;
						$result['message']= 'No companies found.';
						echo json_encode($result);
					}
		        }


	        }else{
					$result['code']=404;
					$result['message']= 'No companies found.';
					echo json_encode($result);
			}
    }


    /***
    * searchCompany Method
    *
    *
    ****/
    public function viewCompany()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SubAdminDetails');

            if(isset($_REQUEST['user_id']) && isset($_REQUEST['company_id'])){
            	
				$companyId= $_REQUEST['company_id'];

            	$companyDetails= $this->SubAdminDetails->find('all',['conditions'=>['SubAdminDetails.id'=>$companyId]])->contain(['Users'])->first();
            	
            	if(!empty($companyDetails)){

            		$keys['company_id']= $companyDetails->id;
					$keys['company_name']= $companyDetails->company_name;
					$keys['company_owner_name']= $companyDetails->user->first_name.' '.$companyDetails->user->last_name;
					$keys['company_description']= $companyDetails->description;

					if(!empty($companyDetails->profile_image)){
						$keys['company_image']= 'img/subadmin_profile_image/'.$companyDetails->profile_image;
					}else{
						$keys['company_image']='';
					}

					if(!empty($companyDetails->audio)){
						$keys['company_audio']= 'img/subadmin_audio/'.$companyDetails->audio;
					}else{
						$keys['company_audio']='';
					}

					if(!empty($companyDetails->video)){
						$keys['company_video']= 'img/subadmin_video/'.$companyDetails->video;
					}else{
						$keys['company_video']='';
					}

					if(!empty($companyDetails->document)){
						$keys['company_document']= 'img/subadmin_docs/'.$companyDetails->document;
					}else{
						$keys['company_document']='';
					}

					$keys['company_keywords']=[];
					if($companyDetails->job_posting_keywords!=''):

						$keys['company_keywords'] = $this->Contractor->companyKeywords($companyDetails->job_posting_keywords);

					endif;

					$finalConnections[] = $keys;

					$result['code']=200;
					$result['company_details']= $finalConnections;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No company found.';
					echo json_encode($result);
				}	
			}else{
					$result['code']=404;
					$result['message']= 'No company found.';
					echo json_encode($result);
			}				
    }


    /***
    * jobLists Method
    *
    *
    ****/
    public function jobLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['user_id'])){
            	
            	$UserId=$_REQUEST['user_id'];
            	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'Jobs.id' => 'DESC'
								]
							];

            	if(!empty($_REQUEST['search_text']) || !empty($_REQUEST['country_id']) || !empty($_REQUEST['state_id'])){

            		$searchKeyword=$_REQUEST['search_text'];
		            if (strpos($searchKeyword, "'") !== false) {
		                $searchKeywordArray=explode("'", $searchKeyword);
		                $searchKeyword=$searchKeywordArray[0];
		            }
		            $country=$_REQUEST['country_id'];
		            $state=$_REQUEST['state_id'];


            		if(!empty($searchKeyword)){

	                    $connection = ConnectionManager::get('default');
	                    $qq = "SELECT SU.id FROM job_posting_keywords as KY INNER JOIN jobs as SU ON FIND_IN_SET(KY.id, SU.posting_keywords) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
	                    $sql = $connection->execute ($qq);
	                    $startup_ids = $sql->fetchAll('assoc');

	                    $qq2 = "SELECT JB.id FROM sub_admin_details as SAD INNER JOIN jobs as JB ON FIND_IN_SET(SAD.id, JB.company_id) where SAD.company_name like  '%".$searchKeyword."%' GROUP BY JB.id";
	                    
	                    $sql2 = $connection->execute ($qq2);
	                    $startup_ids2 = $sql2->fetchAll('assoc');


	                    $finalArray =array_merge($startup_ids, $startup_ids2);
	                    $startupIDs=[];
	                    foreach($finalArray as $SingleUser):
	                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
	                                $startupIDs[] = $SingleUser['id'];
	                            }
	                    endforeach;

	                }else{
	                    $startupIDs=[];
	                } 

	                if(!empty($startupIDs)){
	                    
	                    $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                        ['conditions'=>
	                            [
	                                'Jobs.user_id !='=>$UserId, 'Jobs.status'=>1,

	                                'OR' =>[
	                                            ['Jobs.country_id' => $country],
	                                            ['Jobs.state_id' => $state],
	                                            ['Jobs.id IN' =>$startupIDs]
	                                        ]        
	                            ]

	                        ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	    
	                }else{

	                    if(!empty($searchKeyword)){

	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id !='=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state],
	                                                ['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);

	                    }else{
	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id !='=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state]
	                                                //['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	                    }
	                }

		                $TotalItems= $myJobs->count();

			            if(!empty($TotalItems)){
	            			foreach ($myJobs as $key => $value) 
	            			{

			            		$keys['job_id']= $value->id;
								$keys['job_title']= $value->job_title;
								$keys['posted_by']= $this->Contractor->contractorName($value->user_id);

								//check job followed or not
					            $this->loadModel('JobFollowers');
					            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
					            if(!empty($exists)){
									$keys['is_follwed_by_user']='1';
								}else{
									$keys['is_follwed_by_user']='0';
								}

								if(!empty($value->country)){
									$keys['country']= $value->country->name;
								}else{
									$keys['country']='';
								}	

								if(!empty($value->state)){
									$keys['state']= $value->state->name;
								}else{
									$keys['state']='';
								}

								$keys['location']= $value->location;
								$keys['start_date']= $value->start_date;
								if($value->job_followers)
								{ 
									$keys['followers']= count($value->job_followers);
								}else{ 
									$keys['followers']= '0';
								}

								if(!empty($value->sub_admin_detail->profile_image)){
									$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
								}else{
									$keys['company_image']='';
								}
								$keys['company_name']=$value->sub_admin_detail->company_name;

								$finalConnections[] = $keys;
							}	

							$result['code']=200;
							$result['TotalItems']=$TotalItems;
							$result['job_list']= $finalConnections;
							echo json_encode($result);

						}else{

							$result['code']=404;
							$result['message']= 'No jobs found.';
							echo json_encode($result);
						}

            	}else{

            		$this->loadModel('ContractorProfessionals');
	                $conditions = [];
	                            array_push($conditions,["Jobs.user_id !="=>$UserId, 'Jobs.status'=>1]);
	                            $contractorKeywords = $this->ContractorProfessionals->find('all')
	                                                    ->where(['user_id'=>$UserId])
	                                                    ->select(['skills'])
	                                                    ->first();  
	                if(!empty($contractorKeywords)&&($contractorKeywords->skills!='')){
	                    $conditions['OR'] = [];
	                    $contractorKeywords = $contractorKeywords->toArray();
	                    
	                    foreach(explode(',',$contractorKeywords['skills']) as $single_keyword):
	                         
	                         array_push($conditions['OR'],["FIND_IN_SET($single_keyword,Jobs.skills)"]);
	                         
	                    endforeach;

	                    $jobLists = $this->Paginator->paginate( $this->Jobs->find('all')
	                                            ->where($conditions)->contain(['SubAdminDetails','Countries','States']),$config);
	                    $TotalItems= $jobLists->count();

	                } else {
	                    $jobLists='';
	                    $TotalItems='';
	                }

            		//$jobLists= $this->Paginator->paginate( $this->Jobs->find('all',['conditions'=>['Jobs.user_id !='=>$UserId, 'Jobs.status'=>1]])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
            		
            		//$TotalItems= $jobLists->count();

		            if(!empty($TotalItems)){
            			foreach ($jobLists as $key => $value) 
            			{

		            		$keys['job_id']= $value->id;
							$keys['job_title']= $value->job_title;
							$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
							
							//check job followed or not
				            $this->loadModel('JobFollowers');
				            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
				            if(!empty($exists)){
								$keys['is_follwed_by_user']='1';
							}else{
								$keys['is_follwed_by_user']='0';
							}

							if(!empty($value->country)){
								$keys['country']= $value->country->name;
							}else{
								$keys['country']='';
							}	

							if(!empty($value->state)){
								$keys['state']= $value->state->name;
							}else{
								$keys['state']='';
							}

							$keys['location']= $value->location;
							$keys['start_date']= $value->start_date;
							if($value->job_followers)
							{ 
								$keys['followers'] = count($value->job_followers);
							}else{ 
								$keys['followers']= '0';
							}

							if(!empty($value->sub_admin_detail->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
							}else{
								$keys['company_image']='';
							}
							$keys['company_name']=$value->sub_admin_detail->company_name;

							$finalConnections[] = $keys;
						}	

						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['job_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No jobs found.';
						echo json_encode($result);
					}	

            	}
            }else{
					$result['code']=404;
					$result['message']= 'No jobs found.';
					echo json_encode($result);
			}	

    } 


    /***
    * myJobLists Method
    *
    *
    ****/
    public function myJobLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['user_id'])){
            	
            	$UserId=$_REQUEST['user_id'];
            	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'Jobs.id' => 'DESC'
								]
							];

            	if(!empty($_REQUEST['search_text']) || !empty($_REQUEST['country_id']) || !empty($_REQUEST['state_id'])){

            		$searchKeyword=$_REQUEST['search_text'];
		            if (strpos($searchKeyword, "'") !== false) {
		                $searchKeywordArray=explode("'", $searchKeyword);
		                $searchKeyword=$searchKeywordArray[0];
		            }
		            $country=$_REQUEST['country_id'];
		            $state=$_REQUEST['state_id'];


            		if(!empty($searchKeyword)){

	                    $connection = ConnectionManager::get('default');
	                    $qq = "SELECT SU.id FROM job_posting_keywords as KY INNER JOIN jobs as SU ON FIND_IN_SET(KY.id, SU.posting_keywords) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
	                    $sql = $connection->execute ($qq);
	                    $startup_ids = $sql->fetchAll('assoc');

	                    $qq2 = "SELECT JB.id FROM sub_admin_details as SAD INNER JOIN jobs as JB ON FIND_IN_SET(SAD.id, JB.company_id) where SAD.company_name like  '%".$searchKeyword."%' GROUP BY JB.id";
	                    
	                    $sql2 = $connection->execute ($qq2);
	                    $startup_ids2 = $sql2->fetchAll('assoc');


	                    $finalArray =array_merge($startup_ids, $startup_ids2);
	                    $startupIDs=[];
	                    foreach($finalArray as $SingleUser):
	                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
	                                $startupIDs[] = $SingleUser['id'];
	                            }
	                    endforeach;

	                }else{
	                    $startupIDs=[];
	                } 

	                if(!empty($startupIDs)){
	                    
	                    $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                        ['conditions'=>
	                            [
	                                'Jobs.user_id'=>$UserId, 'Jobs.status'=>1,

	                                'OR' =>[
	                                            ['Jobs.country_id' => $country],
	                                            ['Jobs.state_id' => $state],
	                                            ['Jobs.id IN' =>$startupIDs]
	                                        ]        
	                            ]

	                        ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	    
	                }else{

	                    if(!empty($searchKeyword)){

	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state],
	                                                ['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);

	                    }else{
	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state]
	                                                //['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	                    }
	                }

		                $TotalItems= $myJobs->count();

			            if(!empty($TotalItems)){
	            			foreach ($myJobs as $key => $value) 
	            			{

			            		$keys['job_id']= $value->id;
								$keys['job_title']= $value->job_title;
								$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
								
								//check job followed or not
					            $this->loadModel('JobFollowers');
					            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
					            if(!empty($exists)){
									$keys['is_follwed_by_user']='1';
								}else{
									$keys['is_follwed_by_user']='0';
								}

								if(!empty($value->country)){
									$keys['country']= $value->country->name;
								}else{
									$keys['country']='';
								}	

								if(!empty($value->state)){
									$keys['state']= $value->state->name;
								}else{
									$keys['state']='';
								}

								$keys['location']= $value->location;
								$keys['start_date']= $value->start_date;
								if($value->job_followers)
								{ 
									$keys['followers']= count($value->job_followers);
								}else{ 
									$keys['followers']= '0';
								}

								if(!empty($value->sub_admin_detail->profile_image)){
									$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
								}else{
									$keys['company_image']='';
								}
								$keys['company_name']=$value->sub_admin_detail->company_name;

								$finalConnections[] = $keys;
							}	

							$result['code']=200;
							$result['TotalItems']=$TotalItems;
							$result['job_list']= $finalConnections;
							echo json_encode($result);

						}else{

							$result['code']=404;
							$result['message']= 'No jobs found.';
							echo json_encode($result);
						}

            	}else{

            		$jobLists= $this->Paginator->paginate( $this->Jobs->find('all',['conditions'=>['Jobs.user_id'=>$UserId, 'Jobs.status'=>1]])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
            		
            		$TotalItems= $jobLists->count();

		            if(!empty($TotalItems)){
            			foreach ($jobLists as $key => $value) 
            			{

		            		$keys['job_id']= $value->id;
							$keys['job_title']= $value->job_title;
							$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
							
							//check job followed or not
				            $this->loadModel('JobFollowers');
				            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
				            if(!empty($exists)){
								$keys['is_follwed_by_user']='1';
							}else{
								$keys['is_follwed_by_user']='0';
							}

							if(!empty($value->country)){
								$keys['country']= $value->country->name;
							}else{
								$keys['country']='';
							}	

							if(!empty($value->state)){
								$keys['state']= $value->state->name;
							}else{
								$keys['state']='';
							}

							$keys['location']= $value->location;
							$keys['start_date']= $value->start_date;
							if($value->job_followers)
							{ 
								$keys['followers'] = count($value->job_followers);
							}else{ 
								$keys['followers']= '0';
							}

							if(!empty($value->sub_admin_detail->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
							}else{
								$keys['company_image']='';
							}
							$keys['company_name']=$value->sub_admin_detail->company_name;

							$finalConnections[] = $keys;
						}	

						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['job_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No jobs found.';
						echo json_encode($result);
					}	

            	}
            }else{
					$result['code']=404;
					$result['message']= 'No jobs found.';
					echo json_encode($result);
			}	

    }


    /***
    * archiveJobLists Method
    *
    *
    ****/
    public function archiveJobLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['user_id'])){
            	
            	$UserId=$_REQUEST['user_id'];
            	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'Jobs.id' => 'DESC'
								]
							];

            	if(!empty($_REQUEST['search_text']) || !empty($_REQUEST['country_id']) || !empty($_REQUEST['state_id'])){

            		$searchKeyword=$_REQUEST['search_text'];
		            if (strpos($searchKeyword, "'") !== false) {
		                $searchKeywordArray=explode("'", $searchKeyword);
		                $searchKeyword=$searchKeywordArray[0];
		            }
		            $country=$_REQUEST['country_id'];
		            $state=$_REQUEST['state_id'];


            		if(!empty($searchKeyword)){

	                    $connection = ConnectionManager::get('default');
	                    $qq = "SELECT SU.id FROM job_posting_keywords as KY INNER JOIN jobs as SU ON FIND_IN_SET(KY.id, SU.posting_keywords) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
	                    $sql = $connection->execute ($qq);
	                    $startup_ids = $sql->fetchAll('assoc');

	                    $qq2 = "SELECT JB.id FROM sub_admin_details as SAD INNER JOIN jobs as JB ON FIND_IN_SET(SAD.id, JB.company_id) where SAD.company_name like  '%".$searchKeyword."%' GROUP BY JB.id";
	                    
	                    $sql2 = $connection->execute ($qq2);
	                    $startup_ids2 = $sql2->fetchAll('assoc');


	                    $finalArray =array_merge($startup_ids, $startup_ids2);
	                    $startupIDs=[];
	                    foreach($finalArray as $SingleUser):
	                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
	                                $startupIDs[] = $SingleUser['id'];
	                            }
	                    endforeach;

	                }else{
	                    $startupIDs=[];
	                } 

	                if(!empty($startupIDs)){
	                    
	                    $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                        ['conditions'=>
	                            [
	                                'Jobs.user_id'=>$UserId, 'Jobs.status'=>2,

	                                'OR' =>[
	                                            ['Jobs.country_id' => $country],
	                                            ['Jobs.state_id' => $state],
	                                            ['Jobs.id IN' =>$startupIDs]
	                                        ]        
	                            ]

	                        ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	    
	                }else{

	                    if(!empty($searchKeyword)){

	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state],
	                                                ['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);

	                    }else{
	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>2,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state]
	                                                //['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	                    }
	                }

		                $TotalItems= $myJobs->count();

			            if(!empty($TotalItems)){
	            			foreach ($myJobs as $key => $value) 
	            			{

			            		$keys['job_id']= $value->id;
								$keys['job_title']= $value->job_title;
								$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
								
								//check job followed or not
					            $this->loadModel('JobFollowers');
					            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
					            if(!empty($exists)){
									$keys['is_follwed_by_user']='1';
								}else{
									$keys['is_follwed_by_user']='0';
								}

								if($value->job_followers)
								{ 
									$keys['followers'] = count($value->job_followers);
								}else{ 
									$keys['followers']= '0';
								}

								if(!empty($value->country)){
									$keys['country']= $value->country->name;
								}else{
									$keys['country']='';
								}	

								if(!empty($value->state)){
									$keys['state']= $value->state->name;
								}else{
									$keys['state']='';
								}

								$keys['location']= $value->location;
								$keys['start_date']= $value->start_date;

								if(!empty($value->sub_admin_detail->profile_image)){
									$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
								}else{
									$keys['company_image']='';
								}
								$keys['company_name']=$value->sub_admin_detail->company_name;

								$finalConnections[] = $keys;
							}	

							$result['code']=200;
							$result['TotalItems']=$TotalItems;
							$result['job_list']= $finalConnections;
							echo json_encode($result);

						}else{

							$result['code']=404;
							$result['message']= 'No jobs found.';
							echo json_encode($result);
						}

            	}else{

            		$jobLists= $this->Paginator->paginate( $this->Jobs->find('all',['conditions'=>['Jobs.user_id'=>$UserId, 'Jobs.status'=>2]])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
            		
            		$TotalItems= $jobLists->count();

		            if(!empty($TotalItems)){
            			foreach ($jobLists as $key => $value) 
            			{

		            		$keys['job_id']= $value->id;
							$keys['job_title']= $value->job_title;
							$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
							
							//check job followed or not
				            $this->loadModel('JobFollowers');
				            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
				            if(!empty($exists)){
								$keys['is_follwed_by_user']='1';
							}else{
								$keys['is_follwed_by_user']='0';
							}

							if(!empty($value->country)){
								$keys['country']= $value->country->name;
							}else{
								$keys['country']='';
							}	

							if(!empty($value->state)){
								$keys['state']= $value->state->name;
							}else{
								$keys['state']='';
							}

							$keys['location']= $value->location;
							$keys['start_date']= $value->start_date;

							if($value->job_followers)
							{ 
								$keys['followers'] = count($value->job_followers);
							}else{ 
								$keys['followers']= '0';
							}

							if(!empty($value->sub_admin_detail->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
							}else{
								$keys['company_image']='';
							}
							$keys['company_name']=$value->sub_admin_detail->company_name;

							$finalConnections[] = $keys;
						}	

						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['job_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No jobs found.';
						echo json_encode($result);
					}	

            	}
            }else{
					$result['code']=404;
					$result['message']= 'No jobs found.';
					echo json_encode($result);
			}	

    }


    /***
    * deactivatedJobLists Method
    *
    *
    ****/
    public function deactivatedJobLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['user_id'])){
            	
            	$UserId=$_REQUEST['user_id'];
            	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
				$config = 	[
								'limit' => 20,
								'page'=>$page_no,
								'order' => [
									'Jobs.id' => 'DESC'
								]
							];

            	if(!empty($_REQUEST['search_text']) || !empty($_REQUEST['country_id']) || !empty($_REQUEST['state_id'])){

            		$searchKeyword=$_REQUEST['search_text'];
		            if (strpos($searchKeyword, "'") !== false) {
		                $searchKeywordArray=explode("'", $searchKeyword);
		                $searchKeyword=$searchKeywordArray[0];
		            } 
		            $country=$_REQUEST['country_id'];
		            $state=$_REQUEST['state_id'];


            		if(!empty($searchKeyword)){

	                    $connection = ConnectionManager::get('default');
	                    $qq = "SELECT SU.id FROM job_posting_keywords as KY INNER JOIN jobs as SU ON FIND_IN_SET(KY.id, SU.posting_keywords) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
	                    $sql = $connection->execute ($qq);
	                    $startup_ids = $sql->fetchAll('assoc');

	                    $qq2 = "SELECT JB.id FROM sub_admin_details as SAD INNER JOIN jobs as JB ON FIND_IN_SET(SAD.id, JB.company_id) where SAD.company_name like  '%".$searchKeyword."%' GROUP BY JB.id";
	                    
	                    $sql2 = $connection->execute ($qq2);
	                    $startup_ids2 = $sql2->fetchAll('assoc');


	                    $finalArray =array_merge($startup_ids, $startup_ids2);
	                    $startupIDs=[];
	                    foreach($finalArray as $SingleUser):
	                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
	                                $startupIDs[] = $SingleUser['id'];
	                            }
	                    endforeach;

	                }else{
	                    $startupIDs=[];
	                } 

	                if(!empty($startupIDs)){
	                    
	                    $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                        ['conditions'=>
	                            [
	                                'Jobs.user_id'=>$UserId, 'Jobs.status'=>3,

	                                'OR' =>[
	                                            ['Jobs.country_id' => $country],
	                                            ['Jobs.state_id' => $state],
	                                            ['Jobs.id IN' =>$startupIDs]
	                                        ]        
	                            ]

	                        ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	    
	                }else{

	                    if(!empty($searchKeyword)){

	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>3,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state],
	                                                ['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);

	                    }else{
	                        $myJobs= $this->Paginator->paginate( $this->Jobs->find('all',
	                            ['conditions'=>
	                                [
	                                    'Jobs.user_id'=>$UserId, 'Jobs.status'=>1,

	                                    'OR' =>[
	                                                ['Jobs.country_id' => $country],
	                                                ['Jobs.state_id' => $state]
	                                                //['Jobs.job_title LIKE' => '%'.$searchKeyword.'%']
	                                            ]        
	                                ]

	                            ])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
	                    }
	                }

		                $TotalItems= $myJobs->count();

			            if(!empty($TotalItems)){
	            			foreach ($myJobs as $key => $value) 
	            			{

			            		$keys['job_id']= $value->id;
								$keys['job_title']= $value->job_title;
								$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
								
								//check job followed or not
					            $this->loadModel('JobFollowers');
					            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
					            if(!empty($exists)){
									$keys['is_follwed_by_user']='1';
								}else{
									$keys['is_follwed_by_user']='0';
								}

								if(!empty($value->country)){
									$keys['country']= $value->country->name;
								}else{
									$keys['country']='';
								}	

								if(!empty($value->state)){
									$keys['state']= $value->state->name;
								}else{
									$keys['state']='';
								}

								$keys['location']= $value->location;
								$keys['start_date']= $value->start_date;
								if($value->job_followers)
								{ 
									$keys['followers']= count($value->job_followers);
								}else{ 
									$keys['followers']= '0';
								}

								if(!empty($value->sub_admin_detail->profile_image)){
									$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
								}else{
									$keys['company_image']='';
								}
								$keys['company_name']=$value->sub_admin_detail->company_name;

								$finalConnections[] = $keys;
							}	

							$result['code']=200;
							$result['TotalItems']=$TotalItems;
							$result['job_list']= $finalConnections;
							echo json_encode($result);

						}else{

							$result['code']=404;
							$result['message']= 'No jobs found.';
							echo json_encode($result);
						}

            	}else{

            		$jobLists= $this->Paginator->paginate( $this->Jobs->find('all',['conditions'=>['Jobs.user_id'=>$UserId, 'Jobs.status'=>3]])->contain(['SubAdminDetails','Countries','States','JobFollowers']),$config);
            		
            		$TotalItems= $jobLists->count();

		            if(!empty($TotalItems)){
            			foreach ($jobLists as $key => $value) 
            			{

		            		$keys['job_id']= $value->id;
							$keys['job_title']= $value->job_title;
							$keys['posted_by']= $this->Contractor->contractorName($value->user_id);
							
							//check job followed or not
				            $this->loadModel('JobFollowers');
				            $exists = $this->JobFollowers->exists(['job_id' => $value->id, 'user_id'=>$UserId]);
				            if(!empty($exists)){
								$keys['is_follwed_by_user']='1';
							}else{
								$keys['is_follwed_by_user']='0';
							}

							if(!empty($value->country)){
								$keys['country']= $value->country->name;
							}else{
								$keys['country']='';
							}	

							if(!empty($value->state)){
								$keys['state']= $value->state->name;
							}else{
								$keys['state']='';
							}

							$keys['location']= $value->location;
							$keys['start_date']= $value->start_date;
							if($value->job_followers)
							{ 
								$keys['followers']= count($value->job_followers);
							}else{ 
								$keys['followers']= '0';
							}

							if(!empty($value->sub_admin_detail->profile_image)){
								$keys['company_image']= 'img/subadmin_profile_image/'.$value->sub_admin_detail->profile_image;
							}else{
								$keys['company_image']='';
							}
							$keys['company_name']=$value->sub_admin_detail->company_name;

							$finalConnections[] = $keys;
						}	

						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['job_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No jobs found.';
						echo json_encode($result);
					}	

            	}
            }else{
					$result['code']=404;
					$result['message']= 'No jobs found.';
					echo json_encode($result);
			}	

    }

    /**
    * jobIndustrieLists Method
    *
    *
    ***/
    public function jobIndustrieLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobIndustries');

            $JobIndustries= $this->JobIndustries->find('all');

            $TotalItems= $JobIndustries->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($JobIndustries as $JobIndustrie){

                    $keys['job_industry_id']= $JobIndustrie->id;
					$keys['job_industry_name']= $JobIndustrie->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['job_industry_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Job Industries list found.';
				echo json_encode($result);
			}	       	
    }


    /**
    * keywordTypeLits Method
    *
    *
    ***/
    public function jobTypeLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobTypes');

            $JobTypes= $this->JobTypes->find('all');

            $TotalItems= $JobTypes->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($JobTypes as $JobType){

                    $keys['job_type_id']= $JobType->id;
					$keys['job_type_name']= $JobType->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['job_type_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Job Industries list found.';
				echo json_encode($result);
			}	       	
    }

    /**
    * hiredCompanyList Method
    *
    *
    ***/
    public function hiredCompanyList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SubAdminRelations'); 

            if(isset($_REQUEST['user_id'])){
            	$UserId = $_REQUEST['user_id'];
	            $companyDetails= $this->SubAdminRelations->find('all',['conditions' => ['SubAdminRelations.contractor_id' => $UserId]])->contain(['SubAdminDetails']);

	            $TotalItems= $companyDetails->count();
	        	
	        	if(!empty($TotalItems)){
		
					foreach($companyDetails as $companyDetail){

	                    $keys['company_id']= $companyDetail->sub_admin_detail->id;
						$keys['company_name']= $companyDetail->sub_admin_detail->company_name;

						$finalConnections[] = $keys;
					}
					$result['code']=200;
					$result['TotalItems']=$TotalItems;
					$result['company_list']= $finalConnections;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No company list found.';
					echo json_encode($result);
				}

			}else{
				$result['code']=404;
				$result['message']= 'No company list found.';
				echo json_encode($result);
			}		       	
    }



    /***
    * addJobs Method
    *
    *
    ****/
    public function addJobs()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            $jobs = $this->Jobs->newEntity();

            if($this->request->is('post')){
				
				/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				    $UserId= $this->request->data['user_id'];
				    $job_type= $this->request->data['job_type'];


				    if(!empty($this->request->data['docs'])):
						$files = $this->Multiupload->jobsUploadApi($this->request->data['docs']);
					else:
						$files = '';
					endif;

	                $uploadDocError='';
	                $uploadDocName='';
	                $flag=0;

	                $uploadMp3Name='';
	                $uploadMp3Error='';

	                $uploadMp4Name='';
	                $uploadMp4Error='';

	                if(!empty($files)){

	                	//Get uploaded doc name
	                	$imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='doc' || $singleFile['file_type'] =='docx' || $singleFile['file_type'] =='pdf'){
									$uploadDocName= $singleFile['name'];
								}
							}
						}
						//Get erros
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='doc' || $singleError['file_type'] =='docx' || $singleError['file_type'] =='pdf'){
									$flag=1;
	                                $uploadDocError=$singleError['name'];
								}
							}
	                    }



	                    //Get uploaded mp3 name
	                    $imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='mp3'){
									$uploadMp3Name = $singleFile['name'];
								}
							}
						}
						//Get erros for mp3
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='mp3'){
									$flag=1;
	                                $uploadMp3Error=$singleError['name'];
								}
							}
	                    }


	                    //Get uploaded mp4 name
	                    $imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='mp4'){
									$uploadMp4Name = $singleFile['name'];
								}
							}
						}
						//Get erros for mp3
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='mp4'){
									$flag=1;
	                                $uploadMp4Error=$singleError['name'];
								}
							}
	                    }
	                }  

                if(!empty($flag)){

                    if(!empty($uploadDocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadDocError;
						echo json_encode($result);
                    }
                    if(!empty($uploadMp3Error)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadMp3Error;
						echo json_encode($result);
                    }
                    if(!empty($uploadMp4Error)){
                      	$result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadMp4Error;
						echo json_encode($result);
                    }  

                }else{
                	//$this->request->data['job_type']=$job_type;
                    $this->request->data['user_id']=$UserId;
                    $this->request->data['audio']=$uploadMp3Name;
                    $this->request->data['video']=$uploadMp4Name;
                    $this->request->data['document']=$uploadDocName;
                    $this->request->data['status']=1;

                    $jobs = $this->Jobs->patchEntity($jobs, $this->request->data);
					$jobs->job_type=$job_type;
                    $resultSave = $this->Jobs->save($jobs);
                        if($resultSave)
                        {	
                        	//Save Feeds
                        	$this->Feeds->saveJobFeeds($this->request->data['user_id'],'feeds_job_added',$resultSave->id);

                            $result['code']=200;
							$result['message']= 'Job has been saved successfully.';
							echo json_encode($result);

                        }else{
                        	$errors = $jobs->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
                            $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result);
                        }
                }    

            }else{
                  	$result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					echo json_encode($result);
           }

    }

    /**
    * editJob method
    *
    *
    */
    public function editJob()
    {

            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            $jobs = $this->Jobs->newEntity();

            if($this->request->is('post')){
				
				/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				$jobId = $this->request->data['job_id'];
            	$UserId= $this->request->data['user_id'];
				$job_type= $this->request->data['job_type'];

            	$jobDetails = $this->Jobs->find('all',['conditions' => ['Jobs.id' => $jobId, 'Jobs.user_id' => $UserId]])->contain(['SubAdminDetails','Countries','States','JobTypes'])->first();


				    


				    if(!empty($this->request->data['docs'])):
						$files = $this->Multiupload->jobsUploadApi($this->request->data['docs']);
					else:
						$files = '';
					endif;

	                $uploadDocError='';
	                $uploadDocName=$jobDetails->document;
	                $flag=0;

	                $uploadMp3Name=$jobDetails->audio;
	                $uploadMp3Error='';

	                $uploadMp4Name=$jobDetails->video;
	                $uploadMp4Error='';

	                if(!empty($files)){

	                	//Get uploaded doc name
	                	$imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='doc' || $singleFile['file_type'] =='docx' || $singleFile['file_type'] =='pdf'){
									$uploadDocName= $singleFile['name'];
								}
							}
						}
						//Get erros
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='doc' || $singleError['file_type'] =='docx' || $singleError['file_type'] =='pdf'){
									$flag=1;
	                                $uploadDocError=$singleError['name'];
								}
							}
	                    }



	                    //Get uploaded mp3 name
	                    $imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='mp3'){
									$uploadMp3Name = $singleFile['name'];
								}
							}
						}
						//Get erros for mp3
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='mp3'){
									$flag=1;
	                                $uploadMp3Error=$singleError['name'];
								}
							}
	                    }


	                    //Get uploaded mp4 name
	                    $imgArray=$files['imgArray'];
	                	if(!empty($imgArray)){
							foreach($imgArray as $key=>$singleFile){
								if($singleFile['file_type'] =='mp4'){
									$uploadMp4Name = $singleFile['name'];
								}
							}
						}
						//Get erros for mp3
						$errors=$files['errors'];	
	                    if(empty($errors)){
	                    	foreach($errors as $key=>$singleError){
								if($singleError['file_type'] =='mp4'){
									$flag=1;
	                                $uploadMp4Error=$singleError['name'];
								}
							}
	                    }
	                }  

                if(!empty($flag)){

                    if(!empty($uploadDocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadDocError;
						echo json_encode($result);
                    }
                    if(!empty($uploadMp3Error)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadMp3Error;
						echo json_encode($result);
                    }
                    if(!empty($uploadMp4Error)){
                      	$result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadMp4Error;
						echo json_encode($result);
                    }  

                }else{
                	//$this->request->data['job_type']=$job_type;
                    $this->request->data['user_id']=$UserId;
                    $this->request->data['audio']=$uploadMp3Name;
                    $this->request->data['video']=$uploadMp4Name;
                    $this->request->data['document']=$uploadDocName;
                    $this->request->data['status']=$jobDetails->status;

                    $jobs = $this->Jobs->patchEntity($jobs, $this->request->data);
					$jobs->job_type=$job_type;
					$jobs->id= $jobDetails->id;

                    $resultSave = $this->Jobs->save($jobs);
                        if($resultSave)
                        {
                            $result['code']=200;
							$result['message']= 'Job has been updated successfully.';
							echo json_encode($result);

                        }else{
                        	$errors = $jobs->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
                            $result['code']=404;
							$result['message']= $message;
							//$result['message']= 'Oops somthing wrong! Please try again.';
							//$result['errors']= $errorData;
							echo json_encode($result);
                        }
                }    

            }else{
                  	$result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					echo json_encode($result);
           }
    }

    /**
    * viewJob Method
    *
    *
    ***/
    public function viewJob()
    {
    		
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['job_id'])){
            	
            	$jobId = $_REQUEST['job_id'];
            	$UserId = $_REQUEST['user_id'];


	            $this->loadModel('Jobs'); 
	            $JobsDetails = $this->Jobs->find('all',['conditions' => ['Jobs.id' => $jobId]])->contain(['SubAdminDetails','Countries','States','JobIndustries','JobTypes'])->first();
	            
	            if(!empty($JobsDetails)){

					
						
						$finalDetails['job_id']=$JobsDetails->id;
						$finalDetails['user_id']=$JobsDetails->user_id;
						$finalDetails['job_title']=$JobsDetails->job_title;
						$finalDetails['role']=$JobsDetails->role;
						$finalDetails['posted_by']= $this->Contractor->contractorName($JobsDetails->user_id);
						
						//check job followed or not
			            $this->loadModel('JobFollowers');
			            $exists = $this->JobFollowers->exists(['job_id' => $JobsDetails->id, 'user_id'=>$UserId]);
			            if(!empty($exists)){
							$finalDetails['is_follwed_by_user']='1';
						}else{
							$finalDetails['is_follwed_by_user']='0';
						}

						$finalDetails['posted_by_userid']=$JobsDetails->user_id;
						$finalDetails['company_id']=$JobsDetails->company_id;
						$finalDetails['country_id']=$JobsDetails->country_id;
						$finalDetails['state_id']=$JobsDetails->state_id;
						$finalDetails['job_type_id']=$JobsDetails->job_type->id;

						$finalDetails['job_type']=$JobsDetails->job_type->name;

						$finalDetails['min_work_nps']=$JobsDetails->min_work_nps;
						if(!empty($JobsDetails->country_id)){
							$finalDetails['country']=$JobsDetails->country->name;
						}else{
							$finalDetails['country']='';
						}
						
						if(!empty($JobsDetails->state_id)){
							$finalDetails['state']=$JobsDetails->state->name;
						}else{
							$finalDetails['state']='';
						}

						$finalDetails['location']=$JobsDetails->location;
						$finalDetails['travel']=$JobsDetails->travel;

						$finalDetails['description']=$JobsDetails->description;
						$finalDetails['start_date']=$JobsDetails->start_date;
						$finalDetails['end_date']=$JobsDetails->end_date;
						$finalDetails['requirements']=$JobsDetails->requirements;
						$finalDetails['status']=$JobsDetails->status;

						
						$finalDetails['company_name']=$JobsDetails->sub_admin_detail->company_name;

						if(!empty($JobsDetails->sub_admin_detail->profile_image)){
							$finalDetails['company_image']='img/subadmin_profile_image/'.$JobsDetails->sub_admin_detail->profile_image;
						}else{
							$finalDetails['company_image']='';
						}

						if(!empty($JobsDetails->audio)){
							$finalDetails['audio']='img/jobs/'.$JobsDetails->audio;
						}else{
							$finalDetails['audio']='';
						}

						if(!empty($JobsDetails->video)){
							$finalDetails['video']='img/jobs/'.$JobsDetails->video;
						}else{
							$finalDetails['video']='';
						}

						if(!empty($JobsDetails->document)){
							$finalDetails['document']='img/jobs/'.$JobsDetails->document;
						}else{
							$finalDetails['document']='';
						}
						

						
						
						

					if(!empty($JobsDetails->skills)):					
						$userSkills = $this->Contractor->contractorSkills($JobsDetails->skills);
						if(!empty($userSkills)):
							
							foreach($userSkills as $key=>$value){
								$keys['id'] = ($key!='')?$key:' ';
								$keys['name'] = ($value!=' ')?$value:' ';
								
								$finalSkills[] = $keys;
							}
							$finalDetails['skills'] = $finalSkills;
						endif;
					else:
							$finalDetails['skills'] = [];
					endif;

					if(!empty($JobsDetails->posting_keywords)):	

						$userposting_keywords = $this->Contractor->jobPostKeword($JobsDetails->posting_keywords);

						if(!empty($userposting_keywords)):
							
							foreach($userposting_keywords as $key=>$value){
								$keys['id'] = ($key!='')?$key:' ';
								$keys['name'] = ($value!=' ')?$value:' ';
								
								$finalPostKeywords[] = $keys;
							}
							$finalDetails['posting_keywords'] = $finalPostKeywords;
						endif;
					else:
							$finalDetails['posting_keywords'] = [];
					endif;


					if(!empty($JobsDetails->industry_id)):	

						$userindustry_id = $this->Contractor->jobIndustryIdname($JobsDetails->industry_id);

						if(!empty($userindustry_id)):
							
							foreach($userindustry_id as $key=>$value){
								$keys['id'] = ($key!='')?$key:' ';
								$keys['name'] = ($value!=' ')?$value:' ';
								
								$finalPostindustry_id[] = $keys;
							}
							$finalDetails['job_industry'] = $finalPostindustry_id;
						endif;
					else:
							$finalDetails['job_industry'] = [];
					endif;
	        	

					$result['code']=200;
					$result['job_details']= $finalDetails;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No Job details found.';
					echo json_encode($result);
				}

			}else{
					$result['code']=404;
					$result['message']= 'No Job details found.';
					echo json_encode($result);
			}	       	
    }


    /**
    * deleteJob Method
    *
    *
    ***/
    public function deleteJob()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['job_id'])){

            	$id=$_REQUEST['job_id'];
            	$Jobs = $this->Jobs->get($id);
            	if ($this->Jobs->delete($Jobs)) {
            			
            		$result['code']=200;
					$result['message']='The job has been deleted successfully';
					echo json_encode($result);

            	}else{

            		$result['code']=404;
					$result['message']= 'The job could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The job could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /**
    * archiveJob Method
    *
    *
    ***/
    public function archiveJob()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['job_id'])){

            	$id=$_REQUEST['job_id'];
            	$res= $this->Jobs->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The job has been archived successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The job could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The job could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /**
    * deactivateJob Method
    *
    *
    ***/
    public function deactivateJob()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['job_id'])){

            	$id=$_REQUEST['job_id'];
            	$res= $this->Jobs->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $id])
                      ->execute();
                      
            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The job has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The job could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The job could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /**
    * activateJob Method
    *
    *
    ***/
    public function activateJob()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Jobs');

            if(isset($_REQUEST['job_id'])){

            	$id=$_REQUEST['job_id'];
            	$res= $this->Jobs->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $id])
                      ->execute();
                      
            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The job has been activated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The job could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The job could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*
     *  followJob method for follow job
     *
     *
     *
     *
     ***/
     public function followJob($id = null)
    {       
            $this->viewBuilder()->layout(false);
            $this->render(false);

            //if(isset($_REQUEST['job_id'])){
            if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;	

                    $this->loadModel('Jobs');
                    $this->loadModel('JobFollowers');
                    $UserId = $this->request->data['user_id'];
                    $Id = $this->request->data['job_id'];

                    $exists = $this->Jobs->exists(['id' => $Id, 'user_id !='=>$UserId]);
                    
                    $jobDetails = $this->Jobs->get($Id);
                    $jobOwnerId =$jobDetails->user_id;
                    $jobName =$jobDetails->job_title;

                    $follow = $this->JobFollowers->newEntity(); 

                    $follow = $this->JobFollowers->patchEntity($follow, $this->request->data);
                    $follow->job_id=$Id;
                    $follow->user_id=$UserId;
                   // $campaign = $this->Campaigns->get($Id);
                    if(!empty($exists)){
                       $result = $this->JobFollowers->save($follow);
                        if ($result) {

                        	//Save Feeds
                            $this->Feeds->saveJobFeeds($UserId,'feeds_job_following',$Id);

                            //Save user notification
                            //$values = [];
                            $values = ['job_id'=>$Id,'job_title'=>$jobName];
                            //,json_encode((object)$values)
                            $link= Router::url(['controller' => 'Opportunities', 'action' => 'viewJobDetails',base64_encode($Id)]);

                            $this->WebNotification->sendNotification($UserId,$jobOwnerId,'Follow_Job','has started following your job <strong>'.$jobName.'</strong>',$link,$values);
                            
                             $result['code']=200;
							 $result['message']='Job has been followed successfully.';
							 echo json_encode($result);

   
                        }
                    }else {

                        $result['code']=404;
						$result['message']= 'There is some problem can not follow job now.';
						echo json_encode($result);
                    }
            }else{
            	$result['code']=404;
				$result['message']= 'There is some problem can not follow job now.';
				echo json_encode($result);
            }       
    }



    /*
     *  unfollowJob method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function unfollowJob($id = null)
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            
            //if(isset($_REQUEST['job_id'])){
            if($this->request->is('post')){
				
				$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;	

                    $this->loadModel('Jobs');
                    $this->loadModel('JobFollowers');
                    $UserId = $this->request->data['user_id'];
                    $Id = $this->request->data['job_id'];

                    $exists = $this->Jobs->exists(['id' => $Id, 'user_id !='=>$UserId]);
                    $jobDetails = $this->Jobs->get($Id);
                    $jobOwnerId =$jobDetails->user_id;
                    $jobName =$jobDetails->job_title;

                    if(!empty($exists)){
                        $query = $this->JobFollowers->query();
                        $query->delete()
                            ->where(['job_id' => $Id, 'user_id'=>$UserId])
                            ->execute();

                            //Save user notification
                            //$values = [];
                            $values = ['job_id'=>$Id,'job_title'=>$jobName];
                            //,json_encode($values);
                            $link= Router::url(['controller' => 'Opportunities', 'action' => 'viewJobDetails',base64_encode($id)]);
                            $this->WebNotification->sendNotification($UserId,$jobOwnerId,'UnFollow_Job','has un-followed your job <strong>'.$jobName.'.</strong>',$link,$values);

                            $result['code']=200;
							$result['message']='Job has been unfollowed successfully.';
							echo json_encode($result); 
            
                    }else{

                        $result['code']=404;
						$result['message']= 'There is some problem can not unfollow job now.';
						echo json_encode($result);  

                    }
            }else{
            	$result['code']=404;
				$result['message']= 'There is some problem can not unfollow job now.';
				echo json_encode($result);
            }        

    }


    /*
     *  unfollowJob method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function jobFollowerLists($id = null)
    { 
    		$this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['job_id'])){

                    $this->loadModel('Jobs');
                    $this->loadModel('JobFollowers');
                    $this->loadModel('Keywords');
                    $Keywords = $this->Keywords->find('list')->toArray();
                    $this->set('Keywords',$Keywords);

                    $UserId = $_REQUEST['user_id'];  
                    $Id = $_REQUEST['job_id'];

                    $JobFollowers = $this->Jobs->find('all',['conditions' => ['Jobs.id' => $Id]])->contain(['SubAdminDetails','Countries','States','JobIndustries','JobTypes','JobFollowers'=>['Users'=>['ContractorBasics','ContractorProfessionals']]])->first();

	    		if(!empty($JobFollowers)){
					
					foreach($JobFollowers->job_followers as $singleUser){


						$keys = [];
						$keys['id'] = ($singleUser->user->id!='')?$singleUser->user->id:' ';


						
						if((isset($singleUser->user->contractor_basic->first_name)
							&&($singleUser->user->contractor_basic->first_name!='')
						   )
						   ||
						   (isset($singleUser->user->contractor_basic->first_name)
							&&($singleUser->user->contractor_basic->first_name!='')
						   )
						  ){
							
							$first_name = (isset($singleUser->user->contractor_basic->first_name)
							&&($singleUser->user->contractor_basic->first_name!=''))?$singleUser->user->contractor_basic->first_name:"";
							
							$last_name = (isset($singleUser->user->contractor_basic->last_name)
							&&($singleUser->user->contractor_basic->last_name!=''))?$singleUser->user->contractor_basic->last_name:"";
							
							$name = $first_name.' '.$last_name;
						  }
						else{
							
							$first_name = (isset($singleUser->user->first_name)
							&&($singleUser->user->first_name!=''))?$singleUser->user->first_name:"";
							
							$last_name = (isset($singleUser->user->last_name)
							&&($singleUser['last_name']!=''))?$singleUser->user->last_name:"";
							
							$name = $first_name.' '.$last_name;
						}
						 
						$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser->user->id);
						$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
						$keys['image'] = $this->Contractor->contractorImage($singleUser->user->id);
						$keys['bio'] = (isset($singleUser->user->contractor_basic->bio)
										&&($singleUser->user->contractor_basic->bio!=''))?$singleUser->user->contractor_basic->bio:"";
						
						$keys['rate'] =  (isset($singleUser->user->contractor_basic->price)
										&&($singleUser->user->contractor_basic->price!=''))?$singleUser->user->contractor_basic->price:"0";
						
						$finalSkills = []; 

						if(isset($singleUser->user->contractor_professional->skills)&&
								 $singleUser->user->contractor_professional->skills!=''):
							
							$userSkills = $this->Contractor->contractorSkills($singleUser->user->contractor_professional->skills);
							
							
							if(!empty($userSkills)):
								
								foreach($userSkills as $key=>$value){
									$skills['id'] = ($key!='')?$key:' ';
									$skills['name'] = ($value!=' ')?$value:' ';
									
									$finalSkills[] = $skills;
								}
								
								$keys['skills'] = $finalSkills;
							else:
								$keys['skills'] = [];
							endif;
						else:
								$keys['skills'] = [];
						endif;
						 
						 $finalKeywords = [];

						if(isset($singleUser->user->contractor_professional->keywords)&&
								 $singleUser->user->contractor_professional->keywords!=''):
							
							$userKeywords = $this->Contractor->contractorKeywords($singleUser->user->contractor_professional->keywords);
							
							if(!empty($userKeywords)):
							 
								foreach($userKeywords as $key=>$value){
									$keywords['id'] = ($key!='')?$key:' ';
									$keywords['name'] = ($value!=' ')?$value:' ';
									
									$finalKeywords[] = $keywords;
								}
								$keys['keywords'] = $finalKeywords;
							else:
								$keys['keywords'] = [];
							endif;
						else:
								$keys['keywords'] = [];
						endif;
						
						$finalDocs[] = $keys;
						
					}
					
					$result['followersList'] = $finalDocs;
					$result['code'] = 200;
					echo json_encode($result);
				}else{
					$result['code']=404;
					$result['message']= 'No Followers found.';
					echo json_encode($result);
				}
			}else{
					$result['code']=404;
					$result['message']= 'No Followers found.';
					echo json_encode($result);
			}
	}	


	/**
    * jobAchievementLists Method
    *
    *
    ***/
    public function jobAchievementLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobAchievements');

            $JobAchievements= $this->JobAchievements->find('all');

            $TotalItems= $JobAchievements->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($JobAchievements as $JobAchievement){

                    $keys['job_achievement_id']= $JobAchievement->id;
					$keys['job_achievement_name']= $JobAchievement->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['job_achievement_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Job Achievements list found.';
				echo json_encode($result);
			}	       	
    }


    /**
    * jobRoleLists Method
    *
    *
    ***/
    public function jobRoleLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobRoles');

            $JobRoles= $this->JobRoles->find('all');

            $TotalItems= $JobRoles->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($JobRoles as $JobRole){

                    $keys['job_role_id']= $JobRole->id;
					$keys['job_role_name']= $JobRole->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['job_role_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Job Roles list found.';
				echo json_encode($result);
			}	       	
    }


    /**
    * jobDutiesLists Method
    *
    *
    ***/
    public function jobDutiesLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('JobDuties');

            $JobDuties= $this->JobDuties->find('all');

            $TotalItems= $JobDuties->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($JobDuties as $JobDutie){

                    $keys['job_duty_id']= $JobDutie->id;
					$keys['job_duty_name']= $JobDutie->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['job_duty_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Job Duties list found.';
				echo json_encode($result);
			}	       	
    }


    /*
     *  addExperiences method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function addExperiences()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post')){
            		
            		$json = file_get_contents('php://input');
					$jsonData = json_decode($json, true);
					$this->request->data = $jsonData;

					$this->loadModel('JobExperiences');

                    $JobExperiences = $this->JobExperiences->newEntity(); 

                    	$this->request->data['user_id']=$this->request->data['user_id'];
                    	$this->request->data['experience_details']=json_encode($this->request->data['experience_details']);
                    	$this->request->data['status']=1;
                        //$experience_details =json_encode($preQdata);
                        //pr($this->request->data); die;

                        $JobExperiences = $this->JobExperiences->patchEntity($JobExperiences, $this->request->data);
                        if(!empty($this->request->data['job_experience_id'])){
                        	$JobExperiences->id=$this->request->data['job_experience_id'];
                        }

                        $resultSave = $this->JobExperiences->save($JobExperiences);

                        if($resultSave)
                        {
                            $result['code']=200;
							$result['message']= 'Experience added successfully.';
							echo json_encode($result);

                        }else{
                            $result['code']=404;
							$result['message']= 'Could not add experience.';
							echo json_encode($result);
                        }


            }else{
            	$result['code']=404;
				$result['message']= 'Could not add experience.';
				echo json_encode($result);
            }

    }

     /*
     *  getUserExperiences method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function getUserExperiences($id = null)
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$this->loadModel('JobExperiences');
            		$experienceList = $this->JobExperiences->find('all',['conditions'=>['user_id '=>$UserId]])->first();

            		if(!empty($experienceList)){
            			$result['code']=200;
            			$result['job_experience_id']=$experienceList->id;
						$result['user_id']=$experienceList->user_id;
						$result['user_experience_list']= json_decode($experienceList->experience_details);
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No experience found.';
						echo json_encode($result);
		            }

            }else{
            	$result['code']=404;
				$result['message']= 'No experience found.';
				echo json_encode($result);
            }	
    }

    /*
     *  getUserExperiences method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editExperiences($id = null)
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$this->loadModel('JobExperiences');
            		$experienceList = $this->JobExperiences->find('all',['conditions'=>['user_id '=>$UserId]])->first();

            		if(!empty($experienceList)){
            			$experienceArray = json_decode($experienceList->experience_details);
            			$finalConnections=[];
            			foreach ($experienceArray as $key => $value) {

            				$keys['company_name']=$value->company_name;
            				$keys['job_title']=$value->job_title;
            				$keys['start_date']=$value->start_date;
            				$keys['end_date']=$value->end_date;
            				$keys['company_url']=$value->company_url;
            				
            				$roleIds= $value->job_role_id;
            				$achievementIds= $value->job_achievement_id;

            				//$keys['job_duty_id'] = $this->Contractor->JobDutyList($value->job_duty_id);
            				$keys['job_duty_id'] = $value->job_duty_id;
						

            				$keys['job_role_id'] = $this->Contractor->JobRoleList($roleIds);

            				//$keys['job_achievement_id']  = $this->Contractor->JobRoleList($achievementIds);
            				$keys['job_achievement_id']  = $achievementIds;

            				$finalConnections[] = $keys;
            			}

            			$result['code']=200;
            			$result['job_experience_id']=$experienceList->id;
						$result['user_id']=$experienceList->user_id;
						$result['user_experience_list']= $finalConnections;
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No experience list found.';
						echo json_encode($result);
		            }

            }else{
            	$result['code']=404;
				$result['message']= 'No experience list found.';
				echo json_encode($result);
            }	
    }


     /*
     *  applyForJob method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function applyForJob($id = null)
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

            		/*$json = file_get_contents('php://input');
					$jsonData = json_decode($json, true);
					$this->request->data = $jsonData;*/

                    $this->loadModel('Jobs');
                    $this->loadModel('JobFollowers');
                    $this->loadModel('JobApplies');

                    $UserId = $this->request->data['user_id'];  
                    $Id = $this->request->data['job_id'];
                    $job_experience_id=$this->request->data['job_experience_id'];

                    $this->loadModel('JobExperiences');
                    $experienceList = $this->JobExperiences->find('all',['conditions'=>['user_id '=>$UserId]])->first();
                    $this->set('experienceList',$experienceList);

                    $exists = $this->Jobs->exists(['id' => $Id, 'user_id !='=>$UserId]);
                    if(!empty($exists)){
                        $jobDetails = $this->Jobs->get($Id,['contain'=>['Countries','States']]);
                        $this->set('jobDetails',$jobDetails);
                        //pr($jobDetails); die;
                        $JobApplies = $this->JobApplies->newEntity(); 

                            //Upload Doc
                            $flag=0;
                            $uploadDocError='';
                            if(!empty($this->request->data['docs'][0]['name'])){
                                $doc_name = $this->request->data['docs'][0];
                                $docName = $this->Multiupload->jobsUploadApply($doc_name);
                                if(empty($docName['errors'])){
                                    $uploadDocName=$docName['fileName'];
                                }else{
                                    $flag=1;
                                    $uploadDocError=$docName['errors'];
                                }
                            }else{
                                $uploadDocName='';
                            }


                            //resume Doc
                            $flag=0;
                            $uploadresumeError='';
                            if(!empty($this->request->data['docs'][1]['name'])){
                                $resume_name = $this->request->data['docs'][1];
                                $resumeName = $this->Multiupload->jobsUploadApply($resume_name);
                                if(empty($resumeName['errors'])){
                                    $uploadresumeName=$resumeName['fileName'];
                                }else{
                                    $flag=1;
                                    $uploadresumeError=$resumeName['errors'];
                                }
                            }else{
                                $uploadresumeName='';
                            }

                            $this->request->data['job_id']=$Id;
                            $this->request->data['user_id']=$UserId;
                            $this->request->data['status']=1;
                            $this->request->data['coverletter_doc']=$uploadDocName;
                            $this->request->data['resume']=$uploadresumeName;
                            $this->request->data['job_experience_id']=$job_experience_id;

                            if(!empty($flag)){

                                if(!empty($uploadDocError)){

                                    $result['code']=404;
									$result['message']= $uploadDocError;
									echo json_encode($result); 
                                }
                                if(!empty($uploadresumeError)){
 
                                    $result['code']=404;
									$result['message']= $uploadresumeError;
									echo json_encode($result);
                                } 

                            }else{

                                $JobApplies = $this->JobApplies->patchEntity($JobApplies, $this->request->data);

                                $resultSave = $this->JobApplies->save($JobApplies);
                                if ($resultSave){

                                    $result['code']=200;
									$result['message']= 'Job applied successfully.';
									echo json_encode($result);

                                }else{
                                    $errors = $JobApplies->errors();
                                    $message='Could not apply for job. Please try again.';
								 	foreach($errors as $key=>$value){
										foreach($value as $keytwo=>$message){
											$errorData[$key] = $message;
										}
									}
		                            $result['code']=404;
									$result['message']= $message;
									//$result['errors']= $errorData;
									echo json_encode($result); 
                                }
                            }     


                    }else{
		            	$result['code']=404;
						$result['message']= 'Could not apply for job.';
						echo json_encode($result);
		            }

            }else{
            	$result['code']=404;
				$result['message']= 'Could not apply for job.';
				echo json_encode($result);
            }
    }

     //*************************** Funds Module ***********************//

    /****
     *  fundsManagerLists method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function fundsManagerLists()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$this->loadModel('Users');
            		$Usrlists = $this->Users->find('all',['conditions'=>['id != '=>$UserId]]);
            		
            		$TotalItems= $Usrlists->count();

            		if(!empty($TotalItems)){
            			
            			foreach ($Usrlists as $key => $value) {

		                    $keys['id']= $value->id;
							$keys['name']= $value->first_name.' '.$value->last_name;

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['fund_manager_list']= $finalConnections;
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No funds manager list found.';
						echo json_encode($result);
		            }

            }else{
            	$result['code']=404;
				$result['message']= 'No funds manager list found.';
				echo json_encode($result);
            }
    }


  	/****
     *  sponsorsList method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function sponsorsList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$this->loadModel('SubAdminDetails');
            		$Sponsors = $this->SubAdminDetails->find('all',['conditions'=>['user_id != '=>$UserId]]);
            		
            		$TotalItems= $Sponsors->count();

            		if(!empty($TotalItems)){
            			
            			foreach ($Sponsors as $key => $value) {

		                    $keys['id']= $value->id;
							$keys['company_name']= $value->company_name;

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['sponsor_list']= $finalConnections;
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No sponsor list found.';
						echo json_encode($result);
		            }



            }else{
            	$result['code']=404;
				$result['message']= 'No sponsor list found.';
				echo json_encode($result);
            }
    }


    /**
    * fundIndustryLists Method
    *
    *
    ***/
    public function fundIndustryLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FundIndustries');

            $FundIndustries= $this->FundIndustries->find('all');

            $TotalItems= $FundIndustries->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($FundIndustries as $FundIndustrie){

                    $keys['fund_industry_id']= $FundIndustrie->id;
					$keys['fund_industry_name']= $FundIndustrie->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['fund_industry_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Fund Industries list found.';
				echo json_encode($result);
			}	       	
    }


    /**
    * fundsKeywordList Method
    *
    *
    ***/
    public function fundsKeywordList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('KeywordFunds');

            $KeywordFunds= $this->KeywordFunds->find('all');

            $TotalItems= $KeywordFunds->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($KeywordFunds as $KeywordFund){

                    $keys['fund_keyword_id']= $KeywordFund->id;
					$keys['fund_keyword_name']= $KeywordFund->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['fund_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Fund Keyword list found.';
				echo json_encode($result);
			}	       	
    }



    /*
     *  fundPortfolioList method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function fundPortfolioList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$this->loadModel('Startups');
            		$this->loadModel('Funds');
            		//$PortfolioLists = $this->Startups->find('all',['conditions'=>['user_id != '=>$UserId]]);
            		$PortfolioLists = $this->Startups->find('all');

            		$TotalItems= $PortfolioLists->count();

            		if(!empty($TotalItems)){
            			$customCount=0;
            			foreach ($PortfolioLists as $key => $value) {

            				$isFunded= $this->Funds->find('all',['conditions'=>["FIND_IN_SET($value->id,Funds.portfolios_id)"]])->first();

            				if(empty($isFunded)){

            					$customCount++;
			                    $keys['startup_id']= $value->id;
								$keys['startup_name']= $value->name;

								$finalConnections[] = $keys;
							}
						}
						if(empty($customCount)){
							$finalConnections=[];
						}
						$result['code']=200;
						$result['TotalItems']=$customCount;
						$result['portfolio_list']= $finalConnections;
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No Portfolio list found.';
						echo json_encode($result);
		            }



            }else{
            	$result['code']=404;
				$result['message']= 'No Portfolio list found.';
				echo json_encode($result);
            }
    }


    /*
     *  fundPortfolioList method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function fundEditPortfolioList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if(isset($_REQUEST['user_id']))
            {
            		$UserId=$_REQUEST['user_id'];
            		$fundId=$_REQUEST['fund_id'];

            		$this->loadModel('Startups');
            		$this->loadModel('Funds');

            		$fundDetails= $this->Funds->get($fundId);
            		$portfolio_idArray= explode(',', $fundDetails->portfolios_id);

            		//$PortfolioLists = $this->Startups->find('all',['conditions'=>['user_id != '=>$UserId]]);
            		$PortfolioLists = $this->Startups->find('all');

            		$TotalItems= $PortfolioLists->count();

            		if(!empty($TotalItems)){
            			$customCount=0;
            			foreach ($PortfolioLists as $key => $value) {

            				if (!in_array($value->id, $portfolio_idArray)) {
						    	$isFunded= $this->Funds->find('all',['conditions'=>["FIND_IN_SET($value->id,Funds.portfolios_id)"]])->first();
							}else{
								$isFunded='';
							}
            				if(empty($isFunded)){

            					$customCount++;
			                    $keys['startup_id']= $value->id;
								$keys['startup_name']= $value->name;

								$finalConnections[] = $keys;
							}
						}
						if(empty($customCount)){
							$finalConnections=[];
						}
						$result['code']=200;
						$result['TotalItems']=$customCount;
						$result['portfolio_list']= $finalConnections;
						echo json_encode($result);

            		}else{
		            	$result['code']=404;
						$result['message']= 'No Portfolio list found.';
						echo json_encode($result);
		            }



            }else{
            	$result['code']=404;
				$result['message']= 'No Portfolio list found.';
				echo json_encode($result);
            }
    }



    /*
     *  addFunds method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function addFunds()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Funds');
				$addfunds = $this->Funds->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->FundsUpload->uploadFundImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->FundsUpload->uploadFundDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->FundsUpload->uploadFundAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->FundsUpload->uploadFundVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $DateBegin = date('Y-m-d', strtotime($this->request->data['start_date']));
                $DateEnd = date('Y-m-d', strtotime($this->request->data['end_date']));
                $DateClose = date('Y-m-d', strtotime($this->request->data['close_date']));

                $flashMsg = '';
                if($DateBegin <= $DateEnd)
                {
                    $dateflag= 1;
                }else{
                    
                    $dateflag= 0;
                    $flashMsg= 'End Date can not be before Start Date';
                } 

                if($DateEnd <= $DateClose){
                    if($dateflag == 0){
                        $dateflag= 0;
                    }else{
                        $dateflag= 1;
                    }   
                }else{

                    $dateflag= 0;
                    $flashMsg= 'Close Date can not be before End Date.';
                    
                }

                if($dateflag)
                {
                    $addfunds = $this->Funds->patchEntity($addfunds, $this->request->data);

                    $resultSave = $this->Funds->save($addfunds);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveFundsFeeds($this->request->data['user_id'],'feeds_fund_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Fund saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not save Funds. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    }   
                }else{
	            	$result['code']=404;
					$result['message']= $flashMsg;
					echo json_encode($result);
	            }    
            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Funds.';
				echo json_encode($result);
            }
    }


    /*
     *  editFunds method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editFunds()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Funds');
				$addfunds = $this->Funds->newEntity(); 
				
				$user_id= $this->request->data['user_id'];
				$fund_id= $this->request->data['fund_id'];

				$exists = $this->Funds->exists(['id'=>$fund_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Funds->get($fund_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->FundsUpload->uploadFundImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->FundsUpload->uploadFundDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->FundsUpload->uploadFundAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->FundsUpload->uploadFundVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;

	                $DateBegin = date('Y-m-d', strtotime($this->request->data['start_date']));
                    $DateEnd = date('Y-m-d', strtotime($this->request->data['end_date']));
                    $DateClose = date('Y-m-d', strtotime($this->request->data['close_date']));

                    $flashMsg = '';
                    if($DateBegin <= $DateEnd)
                    {
                        $dateflag= 1;
                    }else{
                        
                        $dateflag= 0;
                        $flashMsg= 'End Date can not be before Start Date';
                    } 

                    if($DateEnd <= $DateClose){
                        if($dateflag == 0){
                            $dateflag= 0;
                        }else{
                            $dateflag= 1;
                        }   
                    }else{

                        $dateflag= 0;
                        $flashMsg= 'Close Date can not be before End Date.';
                        
                    }

                    if($dateflag)
                    {
	                    $addfunds = $this->Funds->patchEntity($addfunds, $this->request->data);
	                    $addfunds->id=$fund_id;
	                    $resultSave = $this->Funds->save($addfunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Fund updated successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $addfunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not edit Funds. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    } 

	                }else{
	            		$result['code']=404;
						$result['message']= $flashMsg;
						echo json_encode($result);
	            	}

                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit fund.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit Funds.';
				echo json_encode($result);
            }
    }

    /**
    * findFunds Method
    *
    *
    ***/
    public function findFunds()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Funds.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM keyword_funds as KY INNER JOIN funds as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id !='=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id !='=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id !='=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id !='=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Funds->find('all',['conditions'=>['Funds.user_id !='=>$user_id,'Funds.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Funds->find('all',['conditions'=>['Funds.user_id !='=>$user_id,'Funds.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['fund_title']= $myFundsList->title;
						$keys['fund_start_date']= $myFundsList->start_date;
						$keys['fund_end_date']= $myFundsList->end_date;
						$keys['fund_close_date']= $myFundsList->close_date;

						$keys['fund_description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['fund_image']= "/img/funds/".$myFundsList->image;
						}else{
							$keys['fund_image']= '';
						}
						$keys['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($myFundsList->id);
						$keys['fund_likes']= $this->FundsUpload->getFundLikeCount($myFundsList->id);
						$keys['fund_created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;

						$keys['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_funds_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Fund list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Fund list found.';
					echo json_encode($result);
				}	       	
    }

    /**
    * myFunds Method
    *
    *
    ***/
    public function myFunds()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Funds.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM keyword_funds as KY INNER JOIN funds as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>1,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['fund_title']= $myFundsList->title;
						$keys['fund_start_date']= $myFundsList->start_date;
						$keys['fund_end_date']= $myFundsList->end_date;
						$keys['fund_close_date']= $myFundsList->close_date;
						$keys['fund_description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['fund_image']= "/img/funds/".$myFundsList->image;
						}else{
							$keys['fund_image']= '';
						}
						$keys['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($myFundsList->id);
						$keys['fund_likes']= $this->FundsUpload->getFundLikeCount($myFundsList->id);
						$keys['fund_created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;

						$keys['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_funds_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Fund list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Fund list found.';
					echo json_encode($result);
				}	       	
    }

    /**
    * deactivateFundList Method
    *
    *
    ***/ 
    public function deactivateFundList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Funds.modified' => 'DESC'
							]
						];

				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM keyword_funds as KY INNER JOIN funds as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>0,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>0,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>0,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);
	                	
	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>0,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>0]])->contain(['Users']), $config);
	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['fund_title']= $myFundsList->title;
						$keys['fund_start_date']= $myFundsList->start_date;
						$keys['fund_end_date']= $myFundsList->end_date;
						$keys['fund_close_date']= $myFundsList->close_date;
						$keys['fund_description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['fund_image']= "/img/funds/".$myFundsList->image;
						}else{
							$keys['fund_image']= '';
						}
						$keys['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($myFundsList->id);
						$keys['fund_likes']= $this->FundsUpload->getFundLikeCount($myFundsList->id);
						$keys['fund_created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;

						$keys['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_funds_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Deactivate Fund list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Deactivate Fund list found.';
					echo json_encode($result);
				}	       	
    }

    /**
    * archiveFundList Method
    *
    *
    ***/
    public function archiveFundList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Funds.modified' => 'DESC'
							]
						];

				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM keyword_funds as KY INNER JOIN funds as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>2,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id '=>$user_id, 'Funds.status'=>2,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Funds.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{
	                	
	                	$myFundsLists= $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>2,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);
	                	
	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Funds->find('all',
									                        ['conditions'=>
									                            [
									                                'Funds.user_id'=>$user_id, 'Funds.status'=>2,

									                                'OR' =>[
									                                            ['Funds.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }    
                }else{

		            $myFundsLists= $this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Funds->find('all',['conditions'=>['Funds.user_id'=>$user_id,'Funds.status'=>2]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['fund_title']= $myFundsList->title;
						$keys['fund_start_date']= $myFundsList->start_date;
						$keys['fund_end_date']= $myFundsList->end_date;
						$keys['fund_close_date']= $myFundsList->close_date;
						$keys['fund_description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['fund_image']= "/img/funds/".$myFundsList->image;
						}else{
							$keys['fund_image']= '';
						}
						$keys['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($myFundsList->id);
						$keys['fund_likes']= $this->FundsUpload->getFundLikeCount($myFundsList->id);
						$keys['fund_created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;

						$keys['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_funds_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Archive Fund list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Archive Fund list found.';
					echo json_encode($result);
				}	       	
    }

    /**
    * fundDetails Method
    *
    *
    ***/
    public function fundDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['fund_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id]])->contain(['Users'])->first();
	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['fund_id']=$fundetail->id;
						$result['fund_created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['fund_created_by_userid']= $fundetail->user->id;
						$result['fund_user_id']=$fundetail->user_id;
						$result['fund_title']=$fundetail->title;
						$result['fund_description']=$fundetail->description;
						$result['fund_mangers']= $this->FundsUpload->fundManagers($fundetail->managers_id);
						$result['fund_sponsors']= $this->FundsUpload->fundSponsors($fundetail->sponsors_id);
						$result['fund_portfolios']= $this->FundsUpload->fundPortfolio($fundetail->portfolios_id);
						$result['fund_industries']= $this->FundsUpload->fundIndustriesList($fundetail->indusries_id);
						$result['fund_keywords']= $this->FundsUpload->fundKeywords($fundetail->keywords_id);
						$result['fund_start_date']=$fundetail->start_date;
						$result['fund_end_date']=$fundetail->end_date;
						$result['fund_close_date']=$fundetail->close_date;
						if(!empty($fundetail->document)){
							$result['fund_document']="img/funds/".$fundetail->document;
						}else{
							$result['fund_document']='';
						}
						if(!empty($fundetail->image)){
							$result['fund_image']= "/img/funds/".$fundetail->image;
						}else{
							$result['fund_image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['fund_audio']= "/img/funds/".$fundetail->audio;
						}else{
							$result['fund_audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['fund_video']= "/img/funds/".$fundetail->video;
						}else{
							$result['fund_video']= '';
						}

						$result['fund_likes']= $this->FundsUpload->getFundLikeCount($fundetail->id);
						$result['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->FundsUpload->isFundFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($fundetail->id,$user_id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Fund list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Fund list found.';
					echo json_encode($result);
				}	       	
    }

    /**
    * archiveFund Method
    *
    *
    ***/
    public function archiveFund()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['fund_id'];

            	$res= $this->Funds->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The fund has been archived successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The fund could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The fund could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /**
    * deleteFund Method
    *
    *
    ***/
    public function deleteFund()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['fund_id'];

            	$res= $this->Funds->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The fund has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The fund could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The fund could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    
    /**
    * deactivateFund Method
    *
    *
    ***/
    public function deactivateFund()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['fund_id'];

            	$res= $this->Funds->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The fund has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The fund could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The fund could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /**
    * activateFund Method
    *
    *
    ***/
    public function activateFund()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['fund_id'];

            	$res= $this->Funds->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The fund has been activated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The fund could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The fund could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*
     *  likeFund method 
     *
     *
     *
     *
     ***/
    public function likeFund()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['fund_id'];

				$exists= $this->Funds->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('FundDislikes');
					$likeExists= $this->FundDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'fund_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->FundDislikes->get($likeExists->id);
						$this->FundDislikes->delete($entity);
					}

	                $this->loadModel('FundLikes');
					$likefunds = $this->FundLikes->newEntity(); 

					
	                $likefunds = $this->FundLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->FundLikes->find('all',['conditions'=>['like_by'=>$likeBy,'fund_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->FundLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Fund liked successfully.';
							$result['fund_likes']= $this->FundsUpload->getFundLikeCount($fundId);
							$result['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($fundId);
							$result['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like Funds. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Funds.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Funds.';
				echo json_encode($result);
            }
    }

    /*
     *  disLikeFund method 
     *
     *
     *
     *
     ***/
    public function disLikeFund()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['fund_id'];

				$exists= $this->Funds->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('FundLikes');
					$likeExists= $this->FundLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'fund_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->FundLikes->get($likeExists->id);
						$this->FundLikes->delete($entity);
					}

	                $this->loadModel('FundDislikes');
					$dislikefunds = $this->FundDislikes->newEntity(); 

					
	                $dislikefunds = $this->FundDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->FundDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'fund_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->FundDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Fund disliked successfully.';
							$result['fund_dislikes']= $this->FundsUpload->getFundDislikeCount($fundId);
							$result['fund_likes']= $this->FundsUpload->getFundLikeCount($fundId);
							$result['is_liked_by_user']= $this->FundsUpload->isFundLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->FundsUpload->isFundDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Funds. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Funds.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Funds.';
				echo json_encode($result);
            }
    }

     /*
     *  fundLikeList method 
     *
     *
     *
     *
     ***/
    public function fundLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['fund_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('FundLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->FundLikes->find('all',['conditions'=>['fund_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->FundLikes->find('all',['conditions'=>['fund_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Fund like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Fund like list found.';
				echo json_encode($result);
            }
    }


     /*
     *  fundDislikeList method 
     *
     *
     *
     *
     ***/
    public function fundDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['fund_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('FundDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->FundDislikes->find('all',['conditions'=>['fund_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);
	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->FundDislikes->find('all',['conditions'=>['fund_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Fund dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Fund dislike list found.';
				echo json_encode($result);
            }
    }


    /*
     *  followFund method 
     *
     *
     *
     *
     ***/
    public function followFund()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['fund_id'];

				$exists= $this->Funds->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('FundFollowers');
					$FundFollowers = $this->FundFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->FundFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->FundFollowers->find('all',['conditions'=>['user_id'=>$followBy,'fund_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->FundFollowers->save($likefunds);
	                    if ($resultSave){
	                    	//Save Feeds
                        	$this->Feeds->saveFundsFeeds($followBy,'feeds_fund_following',$fundId);
                        	
	                        $result['code']=200;
							$result['message']= 'Fund followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Funds. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Funds.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Funds.';
				echo json_encode($result);
            }
    }

    /*
     *  unfollowFund method 
     *
     *
     *
     *
     ***/
    public function unfollowFund()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Funds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['fund_id'];

				$exists= $this->Funds->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('FundFollowers');
					$likeExists= $this->FundFollowers->find('all',['conditions'=>['user_id'=>$followBy,'fund_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->FundFollowers->get($likeExists->id);
						$this->FundFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Fund unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Funds.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Funds.';
				echo json_encode($result);
            }
    }




    //*************************** Beta Test ***********************//

    /**  1>
    *    betaInterestKeywordLists Method
    *
    *
    ***/
    public function betaInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaInterestKeywords');

            $BetaInterestKeywords= $this->BetaInterestKeywords->find('all');

            $TotalItems= $BetaInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BetaInterestKeywords as $BetaInterestKeyword){

                    $keys['id']= $BetaInterestKeyword->id;
					$keys['name']= $BetaInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['beta_test_interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Beta Test Interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   betaTestKeywordsList Method
    *
    *
    ***/
    public function betaTestKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTestKeywords');

            $BetaTestKeywords= $this->BetaTestKeywords->find('all');

            $TotalItems= $BetaTestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BetaTestKeywords as $BetaTestKeyword){

                    $keys['id']= $BetaTestKeyword->id;
					$keys['name']= $BetaTestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['beta_test_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Beta Test Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   betaTestTargetMarketsList Method
    *
    *
    ***/
    public function betaTestTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTestTargetMarkets');

            $BetaTestTargetMarkets= $this->BetaTestTargetMarkets->find('all');

            $TotalItems= $BetaTestTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BetaTestTargetMarkets as $BetaTestTargetMarket){

                    $keys['id']= $BetaTestTargetMarket->id;
					$keys['name']= $BetaTestTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['beta_test_target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Beta Test Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addBetaTest method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function addBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('BetaTests');
				$addBetaTests = $this->BetaTests->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->BetaUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->BetaUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->BetaUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->BetaUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBetaTests = $this->BetaTests->patchEntity($addBetaTests, $this->request->data);

                    $resultSave = $this->BetaTests->save($addBetaTests);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Beta Test saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBetaTests->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not save Beta Test. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Beta Test.';
				echo json_encode($result);
            }
    }


    /*  5>
     *  editBetaTest method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('BetaTests');
				$addfunds = $this->BetaTests->newEntity();
				$this->BetaTests->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['beta_id'];

				$exists = $this->BetaTests->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->BetaTests->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->BetaUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->BetaUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->BetaUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->BetaUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->BetaTests->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->BetaTests->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Beta Test updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not edit Beta Test. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit Beta Test.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit Beta Test.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    betaTestDetails Method
    *
    *
    ***/
    public function betaTestDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['beta_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->BetaTests->find('all',['conditions'=>['BetaTests.id'=>$fund_id]])->contain(['Users'])->first();
	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['interest_keyword']= $this->BetaUpload->interestKeywordList($fundetail->beta_interest_keywords_id);
						$result['keywords']= $this->BetaUpload->keywordList($fundetail->beta_test_keywords_id);
						$result['target_market']= $this->BetaUpload->targetMarketList($fundetail->target_market);
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						if(!empty($fundetail->document)){
							$result['document']="img/beta_test/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/beta_test/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/beta_test/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/beta_test/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->BetaUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->BetaUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->BetaUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->BetaUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->BetaUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta Test list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }

    /**  7>
    *    myBetaTest Method
    *
    *
    ***/
    public function myBetaTest()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BetaTests.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM beta_test_keywords as KY INNER JOIN beta_tests as SU ON FIND_IN_SET(KY.id, SU.beta_test_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/beta_test/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BetaUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BetaUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_beta_test_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta Test list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveBetaTestList Method
    *
    *
    ***/
    public function archiveBetaTestList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BetaTests.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM beta_test_keywords as KY INNER JOIN beta_tests as SU ON FIND_IN_SET(KY.id, SU.beta_test_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>2,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>2,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>2,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>2,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/beta_test/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BetaUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BetaUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_beta_test_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta Test list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateBetaTestList Method
    *
    *
    ***/
    public function deactivateBetaTestList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BetaTests.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM beta_test_keywords as KY INNER JOIN beta_tests as SU ON FIND_IN_SET(KY.id, SU.beta_test_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>0,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id '=>$user_id, 'BetaTests.status'=>0,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>0,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id'=>$user_id, 'BetaTests.status'=>0,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BetaTests->find('all',['conditions'=>['BetaTests.user_id'=>$user_id,'BetaTests.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/beta_test/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BetaUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BetaUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['my_beta_test_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta Test list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findBetaTests Method
    *
    *
    ***/
    public function findBetaTests()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BetaTests.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM beta_test_keywords as KY INNER JOIN beta_tests as SU ON FIND_IN_SET(KY.id, SU.beta_test_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id !='=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id !='=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BetaTests.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id !='=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BetaTests->find('all',
									                        ['conditions'=>
									                            [
									                                'BetaTests.user_id !='=>$user_id, 'BetaTests.status'=>1,

									                                'OR' =>[
									                                            ['BetaTests.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BetaTests->find('all',['conditions'=>['BetaTests.user_id !='=>$user_id,'BetaTests.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BetaTests->find('all',['conditions'=>['BetaTests.user_id !='=>$user_id,'BetaTests.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/beta_test/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BetaUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BetaUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['beta_test_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No beta test list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No beta test list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveBetaTest Method
    *
    *
    ***/
    public function archiveBetaTest()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['beta_id'];

            	$res= $this->BetaTests->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The beta test has been archived successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The beta test could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The beta test could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /**  12>
    *    deleteBetaTest Method
    *
    *
    ***/
    public function deleteBetaTest()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['beta_id'];

            	$res= $this->BetaTests->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The beta test has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The beta test could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The beta test  could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    
    /* 13>
    *  deactivateBetaTest Method
    *
    *
    ***/
    public function deactivateBetaTest()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['beta_id'];

            	$res= $this->BetaTests->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The beta test has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The beta test could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The beta test could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateBetaTest Method
    *
    *
    ***/
    public function activateBetaTest()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['beta_id'];

            	$res= $this->BetaTests->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The beta test has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The beta test could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The beta test could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeBetaTest method 
     *
     *
     *
     *
     ***/
    public function likeBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->BetaTests->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('BetaTestDislikes');
					$likeExists= $this->BetaTestDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'beta_test_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BetaTestDislikes->get($likeExists->id);
						$this->BetaTestDislikes->delete($entity);
					}

	                $this->loadModel('BetaTestLikes');
					$likefunds = $this->BetaTestLikes->newEntity(); 

					
	                $likefunds = $this->BetaTestLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BetaTestLikes->find('all',['conditions'=>['like_by'=>$likeBy,'beta_test_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->BetaTestLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Beta Test liked successfully.';
							$result['likes']= $this->BetaUpload->getLikeCount($fundId);
							$result['dislikes']= $this->BetaUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like Beta Test. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Beta test.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Beta test.';
				echo json_encode($result);
            }
    }

    /*  16>
     *  disLikeBetaTest method 
     *
     *
     *
     *
     ***/
    public function disLikeBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->BetaTests->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('BetaTestLikes');
					$likeExists= $this->BetaTestLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'beta_test_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BetaTestLikes->get($likeExists->id);
						$this->BetaTestLikes->delete($entity);
					}

	                $this->loadModel('BetaTestDislikes');
					$dislikefunds = $this->BetaTestDislikes->newEntity(); 

					
	                $dislikefunds = $this->BetaTestDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->BetaTestDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'beta_test_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->BetaTestDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Beta test disliked successfully.';
							$result['dislikes']= $this->BetaUpload->getDislikeCount($fundId);
							$result['likes']= $this->BetaUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->BetaUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->BetaUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike beta test. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find beta test.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike beta test.';
				echo json_encode($result);
            }
    }

     /* 17>
     *  betaTestLikeList method 
     *
     *
     *
     *
     ***/
    public function betaTestLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['beta_test_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('BetaTestLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BetaTestLikes->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BetaTestLikes->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta test like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Beta test like list found.';
				echo json_encode($result);
            }
    }


     /* 18> 
     *  betaTestDislikeList method 
     *
     *
     *
     *
     ***/
    public function betaTestDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['beta_test_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('BetaTestDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BetaTestDislikes->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BetaTestDislikes->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta test dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Beta test dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followBetaTest method 
     *
     *
     *
     *
     ***/
    public function followBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->BetaTests->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('BetaTestFollowers');
					$FundFollowers = $this->BetaTestFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->BetaTestFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BetaTestFollowers->find('all',['conditions'=>['user_id'=>$followBy,'beta_test_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->BetaTestFollowers->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Beta Test followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Beta Test. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Beta Test.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Beta Test.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowBetaTest method 
     *
     *
     *
     *
     ***/
    public function unfollowBetaTest()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->BetaTests->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('BetaTestFollowers');
					$likeExists= $this->BetaTestFollowers->find('all',['conditions'=>['user_id'=>$followBy,'beta_test_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->BetaTestFollowers->get($likeExists->id);
						$this->BetaTestFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Beta Test unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Beta Test.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Beta Test.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  betaCommitment method 
     *
     *
     *
     *
     ***/
    public function betaCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaTests');
            $this->loadModel('BetaCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->BetaTests->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->BetaCommitments->newEntity(); 
	                $likefunds = $this->BetaCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BetaCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'beta_test_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->BetaCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->BetaUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit no beta test found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  betaUncommitment method 
     *
     *
     *
     *
     ***/
    public function betaUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('betaTests');
            $this->loadModel('BetaCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['beta_test_id'];

				$exists= $this->betaTests->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->BetaCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'beta_test_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BetaCommitments->get($likeExists->id);
						$this->BetaCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->BetaUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Uncommitted no beta test found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Uncommitted. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  betaTestCommitmentList method 
     *
     *
     *
     *
     ***/
    public function betaTestCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['beta_test_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BetaCommitments->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BetaCommitments->find('all',['conditions'=>['beta_test_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Beta test commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Beta test commitment list found.';
				echo json_encode($result);
            }
    }





    //*************************** Board Memebr ***********************//

    /**  1>
    *    boardInterestKeywordLists Method
    *
    *
    ***/
    public function boardInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardInterestKeywords');

            $BoardInterestKeywords= $this->BoardInterestKeywords->find('all');

            $TotalItems= $BoardInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BoardInterestKeywords as $BoardInterestKeyword){

                    $keys['id']= $BoardInterestKeyword->id;
					$keys['name']= $BoardInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['board_interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Board Member Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   boardOppertunityKeywordsList Method
    *
    *
    ***/
    public function boardOppertunityKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardOppertunityKeywords');

            $BoardOppertunityKeywords= $this->BoardOppertunityKeywords->find('all');

            $TotalItems= $BoardOppertunityKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BoardOppertunityKeywords as $BoardOppertunityKeyword){

                    $keys['id']= $BoardOppertunityKeyword->id;
					$keys['name']= $BoardOppertunityKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['board_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No board member Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   boardMemberTargetMarketsList Method
    *
    *
    ***/
    public function boardMemberTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMemberTargetMarkets');

            $BoardMemberTargetMarkets= $this->BoardMemberTargetMarkets->find('all');

            $TotalItems= $BoardMemberTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($BoardMemberTargetMarkets as $BoardMemberTargetMarket){

                    $keys['id']= $BoardMemberTargetMarket->id;
					$keys['name']= $BoardMemberTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['board_target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Board Member Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addBetaTest method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function addBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('BoardMembers');
				$addBoardMembers = $this->BoardMembers->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->BoardUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->BoardUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->BoardUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->BoardUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->BoardMembers->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->BoardMembers->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveBoardMemberFeeds($this->request->data['user_id'],'feeds_boardmember_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors(); 
						foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


    /*  5>
     *  editBetaTest method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('BoardMembers');
				$addfunds = $this->BoardMembers->newEntity(); 
				$this->BoardMembers->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['board_id'];

				$exists = $this->BoardMembers->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->BoardMembers->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->BoardUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->BoardUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->BoardUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->BoardUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->BoardMembers->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    //pr($addfunds); die;
                    $resultSave = $this->BoardMembers->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    boardMemberDetails Method
    *
    *
    ***/
    public function boardMemberDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['board_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->BoardMembers->find('all',['conditions'=>['BoardMembers.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['board_interest_keywords']= $this->BoardUpload->interestKeywordList($fundetail->board_interest_keywords_id);
						$result['board_oppertunity_keywords']= $this->BoardUpload->keywordList($fundetail->board_oppertunity_keywords_id);
						$result['target_market']= $this->BoardUpload->targetMarketList($fundetail->target_market);
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						if(!empty($fundetail->document)){
							$result['document']="img/board_member/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/board_member/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/board_member/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/board_member/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->BoardUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->BoardUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->BoardUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->BoardUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->BoardUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myBoardMember Method
    *
    *
    ***/
    public function myBoardMember()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BoardMembers.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM board_oppertunity_keywords as KY INNER JOIN board_members as SU ON FIND_IN_SET(KY.id, SU.board_oppertunity_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/board_member/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BoardUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BoardUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveBetaTestList Method
    *
    *
    ***/
    public function archiveBoardMemberList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BoardMembers.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM board_oppertunity_keywords as KY INNER JOIN board_members as SU ON FIND_IN_SET(KY.id, SU.board_oppertunity_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>2,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>2,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>2,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>2,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/board_member/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BoardUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BoardUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateBoardMemberList Method
    *
    *
    ***/
    public function deactivateBoardMemberList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BoardMembers.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM board_oppertunity_keywords as KY INNER JOIN board_members as SU ON FIND_IN_SET(KY.id, SU.board_oppertunity_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>0,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id '=>$user_id, 'BoardMembers.status'=>0,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>0,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id'=>$user_id, 'BoardMembers.status'=>0,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id'=>$user_id,'BoardMembers.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/board_member/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BoardUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BoardUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findBoardMembers Method
    *
    *
    ***/
    public function findBoardMembers()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BoardMembers.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM board_oppertunity_keywords as KY INNER JOIN board_members as SU ON FIND_IN_SET(KY.id, SU.board_oppertunity_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id !='=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id !='=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['BoardMembers.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id !='=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->BoardMembers->find('all',
									                        ['conditions'=>
									                            [
									                                'BoardMembers.user_id !='=>$user_id, 'BoardMembers.status'=>1,

									                                'OR' =>[
									                                            ['BoardMembers.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id !='=>$user_id,'BoardMembers.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->BoardMembers->find('all',['conditions'=>['BoardMembers.user_id !='=>$user_id,'BoardMembers.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/board_member/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->BoardUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->BoardUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }



    /**  11>
    *    archiveBoardMember Method
    *
    *
    ***/
    public function archiveBoardMember()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['board_member_id'];

            	$res= $this->BoardMembers->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The board memebr has been archived successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The board member could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The board member could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /**  12>
    *    deleteBoardMember Method
    *
    *
    ***/
    public function deleteBoardMember()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['board_member_id'];

            	$res= $this->BoardMembers->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The board member has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The board member could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The board member  could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    
    /* 13>
    *  deactivateBoardMember Method
    *
    *
    ***/
    public function deactivateBoardMember()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['board_member_id'];

            	$res= $this->BoardMembers->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The board member has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The board member could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The board member could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateBoardMember Method
    *
    *
    ***/
    public function activateBoardMember()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['board_member_id'];

            	$res= $this->BoardMembers->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The board member has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The board member could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The board member could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /*  15>
     *  likeBoardMember method 
     *
     *
     *
     *
     ***/
    public function likeBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('BoardMemberDislikes');
					$likeExists= $this->BoardMemberDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'board_member_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BoardMemberDislikes->get($likeExists->id);
						$this->BoardMemberDislikes->delete($entity);
					}

	                $this->loadModel('BoardMemberLikes');
					$likefunds = $this->BoardMemberLikes->newEntity(); 

					
	                $likefunds = $this->BoardMemberLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BoardMemberLikes->find('all',['conditions'=>['like_by'=>$likeBy,'board_member_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->BoardMemberLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Beta Test liked successfully.';
							$result['likes']= $this->BoardUpload->getLikeCount($fundId);
							$result['dislikes']= $this->BoardUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find board member.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like board member.';
				echo json_encode($result);
            }
    }

    /*  16>
     *  disLikeBoardMember method 
     *
     *
     *
     *
     ***/
    public function disLikeBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('BoardMemberLikes');
					$likeExists= $this->BoardMemberLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'board_member_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BoardMemberLikes->get($likeExists->id);
						$this->BoardMemberLikes->delete($entity);
					}

	                $this->loadModel('BoardMemberDislikes');
					$dislikefunds = $this->BoardMemberDislikes->newEntity(); 

					
	                $dislikefunds = $this->BoardMemberDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->BoardMemberDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'board_member_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->BoardMemberDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Beta test disliked successfully.';
							$result['dislikes']= $this->BoardUpload->getDislikeCount($fundId);
							$result['likes']= $this->BoardUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->BoardUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->BoardUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike bboard member. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find board member.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike board member.';
				echo json_encode($result);
            }
    }

     /* 17>
     *  boardMemberLikeList method 
     *
     *
     *
     *
     ***/
    public function boardMemberLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['board_member_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('BoardMemberLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BoardMemberLikes->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BoardMemberLikes->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No board member like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No board member like list found.';
				echo json_encode($result);
            }
    }



     /* 18> 
     *  boardMemberDislikeList method 
     *
     *
     *
     *
     ***/
    public function boardMemberDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['board_member_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('BoardMemberDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BoardMemberDislikes->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BoardMemberDislikes->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Board Member dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Board Member dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followBoardMember method 
     *
     *
     *
     *
     ***/
    public function followBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('BoardMemberFollowers');
					$FundFollowers = $this->BoardMemberFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->BoardMemberFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BoardMemberFollowers->find('all',['conditions'=>['user_id'=>$followBy,'board_member_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->BoardMemberFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveBoardMemberFeeds($followBy,'feeds_boardmember_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Board Member followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Board Member. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Board Member.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Board Member.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowBetaTest method 
     *
     *
     *
     *
     ***/
    public function unfollowBoardMember()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('BoardMemberFollowers');
					$likeExists= $this->BoardMemberFollowers->find('all',['conditions'=>['user_id'=>$followBy,'board_member_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->BoardMemberFollowers->get($likeExists->id);
						$this->BoardMemberFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Board Member unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Board Member.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Board Member.';
				echo json_encode($result);
            }
    }


    /*  21>
     *  boardCommitment method 
     *
     *
     *
     *
     ***/
    public function boardCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');
            $this->loadModel('BoardCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->BoardCommitments->newEntity(); 
	                $likefunds = $this->BoardCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->BoardCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'board_member_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->BoardCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->BoardUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  betaUncommitment method 
     *
     *
     *
     *
     ***/
    public function boardUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardMembers');
            $this->loadModel('BoardCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['board_member_id'];

				$exists= $this->BoardMembers->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->BoardCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'board_member_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->BoardCommitments->get($likeExists->id);
						$this->BoardCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->BoardUpload->getCommitCount($fundId);
					$result['message']= 'Uncommited successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  betaTestCommitmentList method 
     *
     *
     *
     *
     ***/
    public function boardCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BoardCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['board_member_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->BoardCommitments->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->BoardCommitments->find('all',['conditions'=>['board_member_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Board members commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Board members commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Early Adopter ***********************//

    /**  1>
    *    earlyAdopterInterestKeywordLists Method
    *
    *
    ***/
    public function earlyAdopterInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopterInterestKeywords');

            $EarlyAdopterInterestKeywords= $this->EarlyAdopterInterestKeywords->find('all');

            $TotalItems= $EarlyAdopterInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EarlyAdopterInterestKeywords as $EarlyAdopterInterestKeyword){

                    $keys['id']= $EarlyAdopterInterestKeyword->id;
					$keys['name']= $EarlyAdopterInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['early_interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Early Adopter Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   earlyAdopterKeywordsKeywordsList Method
    *
    *
    ***/
    public function earlyAdopterKeywordsKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopterKeywords');

            $EarlyAdopterKeywords= $this->EarlyAdopterKeywords->find('all');

            $TotalItems= $EarlyAdopterKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EarlyAdopterKeywords as $EarlyAdopterKeyword){

                    $keys['id']= $EarlyAdopterKeyword->id;
					$keys['name']= $EarlyAdopterKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['early_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Early Adopter Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   earlyAdopterTargetMarketsList Method
    *
    *
    ***/
    public function earlyAdopterTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopterTargetMarkets');

            $EarlyAdopterTargetMarkets= $this->EarlyAdopterTargetMarkets->find('all');

            $TotalItems= $EarlyAdopterTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EarlyAdopterTargetMarkets as $EarlyAdopterTargetMarket){

                    $keys['id']= $EarlyAdopterTargetMarket->id;
					$keys['name']= $EarlyAdopterTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['early_target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Early Adopter Target Market list found.';
				echo json_encode($result);
			}	       	
    }


     /*  4>
     *  addEarlyAdopter method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function addEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('EarlyAdopters');
				$addBoardMembers = $this->EarlyAdopters->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->EarlyUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->EarlyUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->EarlyUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->EarlyUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->EarlyAdopters->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->EarlyAdopters->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveEarlyAdopterFeeds($this->request->data['user_id'],'feeds_earlyadopter_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editEarlyAdopter method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('EarlyAdopters');
				$addfunds = $this->EarlyAdopters->newEntity(); 
				$this->EarlyAdopters->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['early_adopter_id'];

				$exists = $this->EarlyAdopters->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->EarlyAdopters->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->EarlyUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->EarlyUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->EarlyUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->EarlyUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->EarlyAdopters->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->EarlyAdopters->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    earlyAdopterDetails Method
    *
    *
    ***/
    public function earlyAdopterDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['early_adopter_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['early_interest_keywords_id']= $this->EarlyUpload->interestKeywordList($fundetail->early_interest_keywords_id	);
						$result['early_keywords_id']= $this->EarlyUpload->keywordList($fundetail->early_keywords_id);
						$result['target_market']= $this->EarlyUpload->targetMarketList($fundetail->target_market);
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						if(!empty($fundetail->document)){
							$result['document']="img/early_adopter/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/early_adopter/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/early_adopter/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/early_adopter/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->EarlyUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->EarlyUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->EarlyUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->EarlyUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->EarlyUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }



    /**  7>
    *    myEarlyAdopter Method
    *
    *
    ***/
    public function myEarlyAdopter()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'EarlyAdopters.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM early_adopter_keywords as KY INNER JOIN early_adopters as SU ON FIND_IN_SET(KY.id, SU.early_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/early_adopter/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EarlyUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EarlyUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Beta Test list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveEarlyAdopterList Method
    *
    *
    ***/
    public function archiveEarlyAdopterList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'EarlyAdopters.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM early_adopter_keywords as KY INNER JOIN early_adopters as SU ON FIND_IN_SET(KY.id, SU.early_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>2,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>2,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>2,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>2,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/early_adopter/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EarlyUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EarlyUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateEarlyAdopterList Method
    *
    *
    ***/
    public function deactivateEarlyAdopterList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'EarlyAdopters.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM early_adopter_keywords as KY INNER JOIN early_adopters as SU ON FIND_IN_SET(KY.id, SU.early_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>0,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id '=>$user_id, 'EarlyAdopters.status'=>0,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>0,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id'=>$user_id, 'EarlyAdopters.status'=>0,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id'=>$user_id,'EarlyAdopters.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/early_adopter/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EarlyUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EarlyUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findEarlyAdopters Method
    *
    *
    ***/
    public function findEarlyAdopters()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'EarlyAdopters.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM early_adopter_keywords as KY INNER JOIN early_adopters as SU ON FIND_IN_SET(KY.id, SU.early_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id !='=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id !='=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['EarlyAdopters.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id !='=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->EarlyAdopters->find('all',
									                        ['conditions'=>
									                            [
									                                'EarlyAdopters.user_id !='=>$user_id, 'EarlyAdopters.status'=>1,

									                                'OR' =>[
									                                            ['EarlyAdopters.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id !='=>$user_id,'EarlyAdopters.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->EarlyAdopters->find('all',['conditions'=>['EarlyAdopters.user_id !='=>$user_id,'EarlyAdopters.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/early_adopter/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EarlyUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EarlyUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveEarlyAdopter Method
    *
    *
    ***/
    public function archiveEarlyAdopter()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['early_adopter_id'];

            	$res= $this->EarlyAdopters->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The early adopter has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The early adopter could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The early adopter could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /**  12>
    *    deleteEarlyAdopter Method
    *
    *
    ***/
    public function deleteEarlyAdopter()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['early_adopter_id'];

            	$res= $this->EarlyAdopters->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The early adopter has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The early adopter could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The early adopter  could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    
    /* 13>
    *  deactivateBoardMember Method
    *
    *
    ***/
    public function deactivateEarlyAdopter()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['early_adopter_id'];

            	$res= $this->EarlyAdopters->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The early adopter has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The early adopter could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The early adopter could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateBoardMember Method
    *
    *
    ***/
    public function activateEarlyAdopter()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['early_adopter_id'];

            	$res= $this->EarlyAdopters->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The early adopter has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The early adopter could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The early adopter could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /*  15>
     *  likeEarlyAdopter method 
     *
     *
     *
     *
     ***/
    public function likeEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('EarlyAdopterDislikes');
					$likeExists= $this->EarlyAdopterDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'early_adopter_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EarlyAdopterDislikes->get($likeExists->id);
						$this->EarlyAdopterDislikes->delete($entity);
					}

	                $this->loadModel('EarlyAdopterLikes');
					$likefunds = $this->EarlyAdopterLikes->newEntity(); 

					
	                $likefunds = $this->EarlyAdopterLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EarlyAdopterLikes->find('all',['conditions'=>['like_by'=>$likeBy,'early_adopter_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->EarlyAdopterLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Early Adopter liked successfully.';
							$result['likes']= $this->EarlyUpload->getLikeCount($fundId);
							$result['dislikes']= $this->EarlyUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find early adopter.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like early adopter.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeEarlyAdopter method 
     *
     *
     *
     *
     ***/
    public function disLikeEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('EarlyAdopterLikes');
					$likeExists= $this->EarlyAdopterLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'early_adopter_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EarlyAdopterLikes->get($likeExists->id);
						$this->EarlyAdopterLikes->delete($entity);
					}

	                $this->loadModel('EarlyAdopterDislikes');
					$dislikefunds = $this->EarlyAdopterDislikes->newEntity(); 

					
	                $dislikefunds = $this->EarlyAdopterDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->EarlyAdopterDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'early_adopter_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->EarlyAdopterDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Early adopter disliked successfully.';
							$result['dislikes']= $this->EarlyUpload->getDislikeCount($fundId);
							$result['likes']= $this->EarlyUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->EarlyUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->EarlyUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike early adopter. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find early adopter.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike early adopter.';
				echo json_encode($result);
            }
    }

     /* 17>
     *  earlyAdopterLikeList method 
     *
     *
     *
     *
     ***/
    public function earlyAdopterLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['early_adopter_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('EarlyAdopterLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EarlyAdopterLikes->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EarlyAdopterLikes->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No early adopter like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No early adopter like list found.';
				echo json_encode($result);
            }
    }



     /* 18> 
     *  earlyAdopterDislikeList method 
     *
     *
     *
     *
     ***/
    public function earlyAdopterDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['early_adopter_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('EarlyAdopterDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EarlyAdopterDislikes->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EarlyAdopterDislikes->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No early adopter dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No early adopter dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followEarlyAdopter method 
     *
     *
     *
     *
     ***/
    public function followEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('EarlyAdopterFollowers');
					$FundFollowers = $this->EarlyAdopterFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->EarlyAdopterFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EarlyAdopterFollowers->find('all',['conditions'=>['user_id'=>$followBy,'early_adopter_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->EarlyAdopterFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveEarlyAdopterFeeds($followBy,'feeds_earlyadopter_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Early adopter followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow early adopter. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find early adopter.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow early adopter.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowEarlyAdopter method 
     *
     *
     *
     *
     ***/
    public function unfollowEarlyAdopter()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('EarlyAdopterFollowers');
					$likeExists= $this->EarlyAdopterFollowers->find('all',['conditions'=>['user_id'=>$followBy,'early_adopter_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->EarlyAdopterFollowers->get($likeExists->id);
						$this->EarlyAdopterFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Early adopter unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find early adopter.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow early adopter.';
				echo json_encode($result);
            }
    }


     /*  21>
     *  earlyCommitment method 
     *
     *
     *
     *
     ***/
    public function earlyCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');
            $this->loadModel('EarlyCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->EarlyCommitments->newEntity(); 
	                $likefunds = $this->EarlyCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EarlyCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'early_adopter_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->EarlyCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->EarlyUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  earlyUncommitment method 
     *
     *
     *
     *
     ***/
    public function earlyUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');
            $this->loadModel('EarlyCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['early_adopter_id'];

				$exists= $this->EarlyAdopters->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->EarlyCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'early_adopter_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EarlyCommitments->get($likeExists->id);
						$this->EarlyCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->EarlyUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  earlyCommitmentList method 
     *
     *
     *
     *
     ***/
    public function earlyCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['early_adopter_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EarlyCommitments->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EarlyCommitments->find('all',['conditions'=>['early_adopter_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Early adopter commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Early adopter commitment list found.';
				echo json_encode($result);
            }
    }




    //*************************** Endorsors ***********************//

    /**  1>
    *    endorsorInterestKeywordLists Method
    *
    *
    ***/
    public function endorsorInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EndorsorInterestKeywords');

            $EndorsorInterestKeywords= $this->EndorsorInterestKeywords->find('all');

            $TotalItems= $EndorsorInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EndorsorInterestKeywords as $EndorsorInterestKeyword){

                    $keys['id']= $EndorsorInterestKeyword->id;
					$keys['name']= $EndorsorInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['endorsor_interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No endorsor Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   endorsorKeywordsList Method
    *
    *
    ***/
    public function endorsorKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EndorsorKeywords');

            $EndorsorKeywords= $this->EndorsorKeywords->find('all');

            $TotalItems= $EndorsorKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EndorsorKeywords as $EndorsorKeyword){

                    $keys['id']= $EndorsorKeyword->id;
					$keys['name']= $EndorsorKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['endorsor_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No endorsor Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   endorsorTargetMarketsList Method
    *
    *
    ***/
    public function endorsorTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EndorsorTargetMarkets');

            $EndorsorTargetMarkets= $this->EndorsorTargetMarkets->find('all');

            $TotalItems= $EndorsorTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($EndorsorTargetMarkets as $EndorsorTargetMarket){

                    $keys['id']= $EndorsorTargetMarket->id;
					$keys['name']= $EndorsorTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['endorsor_target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No endorsor Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addEndorsor method 
     *
     *
     *
     *
     ***/
    public function addEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Endorsors');
				$addBoardMembers = $this->Endorsors->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->EndorsorUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->EndorsorUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->EndorsorUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->EndorsorUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Endorsors->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Endorsors->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveEndorsorFeeds($this->request->data['user_id'],'feeds_endorser_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editEndorsor method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Endorsors');
				$addfunds = $this->Endorsors->newEntity(); 
				$this->Endorsors->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['endorsor_id'];

				$exists = $this->Endorsors->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Endorsors->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->EndorsorUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->EndorsorUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->EndorsorUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->EndorsorUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Endorsors->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Endorsors->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    endorsorDetails Method
    *
    *
    ***/
    public function endorsorDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['endorsor_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Endorsors->find('all',['conditions'=>['Endorsors.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['endorsor_interest_keywords_id']= $this->EndorsorUpload->interestKeywordList($fundetail->endorsor_interest_keywords_id);
						$result['endorsor_keywords_id']= $this->EndorsorUpload->keywordList($fundetail->endorsor_keywords_id);
						$result['target_market']= $this->EndorsorUpload->targetMarketList($fundetail->target_market);
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						if(!empty($fundetail->document)){
							$result['document']="img/endorsor/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/endorsor/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/endorsor/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/endorsor/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->EndorsorUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->EndorsorUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->EndorsorUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->EndorsorUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->EndorsorUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myEndorsor Method
    *
    *
    ***/
    public function myEndorsor()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Endorsors.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM endorsor_keywords as KY INNER JOIN endorsors as SU ON FIND_IN_SET(KY.id, SU.endorsor_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/endorsor/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EndorsorUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EndorsorUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No EndorsorUpload list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveEndorsorList Method
    *
    *
    ***/
    public function archiveEndorsorList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Endorsors.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM endorsor_keywords as KY INNER JOIN endorsors as SU ON FIND_IN_SET(KY.id, SU.endorsor_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>2,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>2,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>2,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>2,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/endorsor/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EndorsorUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EndorsorUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateEndorsorList Method
    *
    *
    ***/
    public function deactivateEndorsorList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Endorsors.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM endorsor_keywords as KY INNER JOIN endorsors as SU ON FIND_IN_SET(KY.id, SU.endorsor_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>0,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id '=>$user_id, 'Endorsors.status'=>0,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>0,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id'=>$user_id, 'Endorsors.status'=>0,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Endorsors->find('all',['conditions'=>['Endorsors.user_id'=>$user_id,'Endorsors.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/endorsor/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EndorsorUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EndorsorUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findEndorsors Method
    *
    *
    ***/
    public function findEndorsors()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Endorsors.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM endorsor_keywords as KY INNER JOIN endorsors as SU ON FIND_IN_SET(KY.id, SU.endorsor_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id !='=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id !='=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Endorsors.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id !='=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Endorsors->find('all',
									                        ['conditions'=>
									                            [
									                                'Endorsors.user_id !='=>$user_id, 'Endorsors.status'=>1,

									                                'OR' =>[
									                                            ['Endorsors.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Endorsors->find('all',['conditions'=>['Endorsors.user_id !='=>$user_id,'Endorsors.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Endorsors->find('all',['conditions'=>['Endorsors.user_id !='=>$user_id,'Endorsors.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/endorsor/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->EndorsorUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->EndorsorUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveEndorsor Method
    *
    *
    ***/
    public function archiveEndorsor()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['endorsor_id'];

            	$res= $this->Endorsors->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The endorsor has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The endorsor could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The endorsor could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /**  12>
    *    deleteEndorsor Method
    *
    *
    ***/
    public function deleteEndorsor()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['endorsor_id'];

            	$res= $this->Endorsors->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The endorsor has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The endorsor could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The endorsor could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    
    /* 13>
    *  deactivateEndorsor Method
    *
    *
    ***/
    public function deactivateEndorsor()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['endorsor_id'];

            	$res= $this->Endorsors->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The endorsor has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The endorsor could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The endorsor could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateEndorsor Method
    *
    *
    ***/
    public function activateEndorsor()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['endorsor_id'];

            	$res= $this->Endorsors->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The endorsor has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The endorsor could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The endorsor could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeEndorsor method 
     *
     *
     *
     *
     ***/
    public function likeEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('EndorsorDislikes');
					$likeExists= $this->EndorsorDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'endorsor_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EndorsorDislikes->get($likeExists->id);
						$this->EndorsorDislikes->delete($entity);
					}

	                $this->loadModel('EndorsorLikes');
					$likefunds = $this->EndorsorLikes->newEntity(); 

					
	                $likefunds = $this->EndorsorLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EndorsorLikes->find('all',['conditions'=>['like_by'=>$likeBy,'endorsor_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->EndorsorLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Endorsor liked successfully.';
							$result['likes']= $this->EndorsorUpload->getLikeCount($fundId);
							$result['dislikes']= $this->EndorsorUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Endorsor.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Endorsor.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeEndorsor method 
     *
     *
     *
     *
     ***/
    public function disLikeEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('EndorsorLikes');
					$likeExists= $this->EndorsorLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'endorsor_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EndorsorLikes->get($likeExists->id);
						$this->EndorsorLikes->delete($entity);
					}

	                $this->loadModel('EndorsorDislikes');
					$dislikefunds = $this->EndorsorDislikes->newEntity(); 

					
	                $dislikefunds = $this->EndorsorDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->EndorsorDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'endorsor_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->EndorsorDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Endorsor disliked successfully.';
							$result['dislikes']= $this->EndorsorUpload->getDislikeCount($fundId);
							$result['likes']= $this->EndorsorUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->EndorsorUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->EndorsorUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Endorsor. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Endorsor.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Endorsor.';
				echo json_encode($result);
            }
    }


     /* 17>
     *  endorsorLikeList method 
     *
     *
     *
     *
     ***/
    public function endorsorLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['endorsor_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('EndorsorLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EndorsorLikes->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EndorsorLikes->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No ndorsor like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No ndorsor like list found.';
				echo json_encode($result);
            }
    }



     /* 18> 
     *  endorsorDislikeList method 
     *
     *
     *
     *
     ***/
    public function endorsorDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EarlyAdopters');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['endorsor_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('EndorsorDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EndorsorDislikes->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EndorsorDislikes->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No ndorsor dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No ndorsor dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followEndorsor method 
     *
     *
     *
     *
     ***/
    public function followEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('EndorsorFollowers');
					$FundFollowers = $this->EndorsorFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->EndorsorFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EndorsorFollowers->find('all',['conditions'=>['user_id'=>$followBy,'endorsor_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->EndorsorFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveEndorsorFeeds($followBy,'feeds_endorser_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Endorsor followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow endorsor. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find endorsor.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow endorsor.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowEarlyAdopter method 
     *
     *
     *
     *
     ***/
    public function unfollowEndorsor()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('EndorsorFollowers');
					$likeExists= $this->EndorsorFollowers->find('all',['conditions'=>['user_id'=>$followBy,'endorsor_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->EndorsorFollowers->get($likeExists->id);
						$this->EndorsorFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Endorsor unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find endorsor.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow endorsor.';
				echo json_encode($result);
            }
    }


    /*  21>
     *  endorsorCommitment method 
     *
     *
     *
     *
     ***/
    public function endorsorCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');
            $this->loadModel('EndorsorCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->EndorsorCommitments->newEntity(); 
	                $likefunds = $this->EndorsorCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->EndorsorCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'endorsor_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->EndorsorCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->EndorsorUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  earlyUncommitment method 
     *
     *
     *
     *
     ***/
    public function endorsorUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Endorsors');
            $this->loadModel('EndorsorCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['endorsor_id'];

				$exists= $this->Endorsors->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->EndorsorCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'endorsor_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->EndorsorCommitments->get($likeExists->id);
						$this->EndorsorCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->EndorsorUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  earlyCommitmentList method 
     *
     *
     *
     *
     ***/
    public function endorsorCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('EndorsorCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['endorsor_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->EndorsorCommitments->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->EndorsorCommitments->find('all',['conditions'=>['endorsor_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No endorsor commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No endorsor commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Focus Groups ***********************//

    /**  1>
    *    focusGroupInterestKeywordLists Method
    *
    *
    ***/
    public function focusGroupInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroupInterestKeywords');

            $FocusGroupInterestKeywords= $this->FocusGroupInterestKeywords->find('all');

            $TotalItems= $FocusGroupInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($FocusGroupInterestKeywords as $FocusGroupInterestKeyword){

                    $keys['id']= $FocusGroupInterestKeyword->id;
					$keys['name']= $FocusGroupInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['focus_group_interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Focus Group Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   focusGroupKeywordsList Method
    *
    *
    ***/
    public function focusGroupKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroupKeywords');

            $FocusGroupKeywords= $this->FocusGroupKeywords->find('all');

            $TotalItems= $FocusGroupKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($FocusGroupKeywords as $FocusGroupKeyword){

                    $keys['id']= $FocusGroupKeyword->id;
					$keys['name']= $FocusGroupKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['focus_group_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Focus Group Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   focusGroupTargetMarketsList Method
    *
    *
    ***/
    public function focusGroupTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroupTargetMarkets');

            $FocusGroupTargetMarkets= $this->FocusGroupTargetMarkets->find('all');

            $TotalItems= $FocusGroupTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($FocusGroupTargetMarkets as $FocusGroupTargetMarket){

                    $keys['id']= $FocusGroupTargetMarket->id;
					$keys['name']= $FocusGroupTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['focus_group_target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Focus Group Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addFocusGroup method 
     *
     *
     *
     *
     ***/
    public function addFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('FocusGroups');
				$addBoardMembers = $this->FocusGroups->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->FocusGroupUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->FocusGroupUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->FocusGroupUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->FocusGroupUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->FocusGroups->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->FocusGroups->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveFocusGroupFeeds($this->request->data['user_id'],'feeds_focusgroup_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editFocusGroup method for unfollowJob job
     *
     *
     *
     *
     ***/
    public function editFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('FocusGroups');
				$addfunds = $this->FocusGroups->newEntity(); 
				$this->FocusGroups->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['focus_group_id'];

				$exists = $this->FocusGroups->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->FocusGroups->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->FocusGroupUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->FocusGroupUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->FocusGroupUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->FocusGroupUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->FocusGroups->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->FocusGroups->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    focusGroupDetails Method
    *
    *
    ***/
    public function focusGroupDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['focus_group_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->FocusGroups->find('all',['conditions'=>['FocusGroups.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['focus_group_interest_keywords_id']= $this->FocusGroupUpload->interestKeywordList($fundetail->focus_group_interest_keywords_id);
						$result['focus_group_keywords_id']= $this->FocusGroupUpload->keywordList($fundetail->focus_group_keywords_id);
						$result['target_market']= $this->FocusGroupUpload->targetMarketList($fundetail->target_market);
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						if(!empty($fundetail->document)){
							$result['document']="img/focus_group/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/focus_group/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/focus_group/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/focus_group/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->FocusGroupUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->FocusGroupUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->FocusGroupUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->FocusGroupUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->FocusGroupUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }



    /**  7>
    *    myEndorsor Method
    *
    *
    ***/
    public function myFocusGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'FocusGroups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM focus_group_keywords as KY INNER JOIN focus_groups as SU ON FIND_IN_SET(KY.id, SU.focus_group_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/focus_group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->FocusGroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->FocusGroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No Focus Groups list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveFocusGroupList Method
    *
    *
    ***/
    public function archiveFocusGroupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'FocusGroups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM focus_group_keywords as KY INNER JOIN focus_groups as SU ON FIND_IN_SET(KY.id, SU.focus_group_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>2,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>2,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>2,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>2,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/focus_group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->FocusGroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->FocusGroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateFocusGroupList Method
    *
    *
    ***/
    public function deactivateFocusGroupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'FocusGroups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM focus_group_keywords as KY INNER JOIN focus_groups as SU ON FIND_IN_SET(KY.id, SU.focus_group_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>0,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id '=>$user_id, 'FocusGroups.status'=>0,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>0,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id'=>$user_id, 'FocusGroups.status'=>0,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id'=>$user_id,'FocusGroups.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/focus_group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->FocusGroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->FocusGroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findFocusGroups Method
    *
    *
    ***/
    public function findFocusGroups()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'FocusGroups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM focus_group_keywords as KY INNER JOIN focus_groups as SU ON FIND_IN_SET(KY.id, SU.focus_group_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id !='=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id !='=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['FocusGroups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id !='=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->FocusGroups->find('all',
									                        ['conditions'=>
									                            [
									                                'FocusGroups.user_id !='=>$user_id, 'FocusGroups.status'=>1,

									                                'OR' =>[
									                                            ['FocusGroups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id !='=>$user_id,'FocusGroups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->FocusGroups->find('all',['conditions'=>['FocusGroups.user_id !='=>$user_id,'FocusGroups.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/focus_group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->FocusGroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->FocusGroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveFocusGroup Method
    *
    *
    ***/
    public function archiveFocusGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['focus_group_id'];

            	$res= $this->FocusGroups->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Focus Groups has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Focus Groups could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Focus Groups could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /**  12>
    *    deleteFocusGroup Method
    *
    *
    ***/
    public function deleteFocusGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['focus_group_id'];

            	$res= $this->FocusGroups->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Focus Groups has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Focus Groups could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Focus Groups could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 13>
    *  deactivateFocusGroup Method
    *
    *
    ***/
    public function deactivateFocusGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['focus_group_id'];

            	$res= $this->FocusGroups->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Focus Group has been deactivated.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Focus Groups could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Focus Groups could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateFocusGroup Method
    *
    *
    ***/
    public function activateFocusGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['focus_group_id'];

            	$res= $this->FocusGroups->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Focus Group has been activated.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Focus Groups could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Focus Groups could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeFocusGroup method 
     *
     *
     *
     *
     ***/
    public function likeFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('FocusGroupDislikes');
					$likeExists= $this->FocusGroupDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'focus_group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->FocusGroupDislikes->get($likeExists->id);
						$this->FocusGroupDislikes->delete($entity);
					}

	                $this->loadModel('FocusGroupLikes');
					$likefunds = $this->FocusGroupLikes->newEntity(); 

					
	                $likefunds = $this->FocusGroupLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->FocusGroupLikes->find('all',['conditions'=>['like_by'=>$likeBy,'focus_group_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->FocusGroupLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Focus Group liked successfully.';
							$result['likes']= $this->FocusGroupUpload->getLikeCount($fundId);
							$result['dislikes']= $this->FocusGroupUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Focus Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Focus Group.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeFocusGroup method 
     *
     *
     *
     *
     ***/
    public function disLikeFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('FocusGroupLikes');
					$likeExists= $this->FocusGroupLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'focus_group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->FocusGroupLikes->get($likeExists->id);
						$this->FocusGroupLikes->delete($entity);
					}

	                $this->loadModel('FocusGroupDislikes');
					$dislikefunds = $this->FocusGroupDislikes->newEntity(); 

					
	                $dislikefunds = $this->FocusGroupDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->FocusGroupDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'focus_group_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->FocusGroupDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Endorsor disliked successfully.';
							$result['dislikes']= $this->FocusGroupUpload->getDislikeCount($fundId);
							$result['likes']= $this->FocusGroupUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->FocusGroupUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->FocusGroupUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Focus Groups. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Focus Groups.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Focus Groups.';
				echo json_encode($result);
            }
    }


    /* 17>
     *  focusGroupLikeList method 
     *
     *
     *
     *
     ***/
    public function focusGroupLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['focus_group_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('FocusGroupLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->FocusGroupLikes->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->FocusGroupLikes->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Focus Group like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Focus Group like list found.';
				echo json_encode($result);
            }
    }



     /* 18> 
     *  focusGroupDislikeList method 
     *
     *
     *
     *
     ***/
    public function focusGroupDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['focus_group_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('FocusGroupDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->FocusGroupDislikes->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->FocusGroupDislikes->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Focus Group dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Focus Group dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followFocusGroup method 
     *
     *
     *
     *
     ***/
    public function followFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('FocusGroupFollowers');
					$FundFollowers = $this->FocusGroupFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->FocusGroupFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->FocusGroupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'focus_group_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->FocusGroupFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveFocusGroupFeeds($followBy,'feeds_focusgroup_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Focus Group followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Focus Group. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Focus Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Focus Group.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowFocusGroup method 
     *
     *
     *
     *
     ***/
    public function unfollowFocusGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('FocusGroupFollowers');
					$likeExists= $this->FocusGroupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'focus_group_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->FocusGroupFollowers->get($likeExists->id);
						$this->FocusGroupFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Focus Group unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Focus Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Focus Group.';
				echo json_encode($result);
            }
    }


    /*  21>
     *  focusCommitment method 
     *
     *
     *
     *
     ***/
    public function focusCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusGroups');
            $this->loadModel('FocusCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->FocusCommitments->newEntity(); 
	                $likefunds = $this->FocusCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->FocusCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'focus_group_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->FocusCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->FocusGroupUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  focusUncommitment method 
     *
     *
     *
     *
     ***/
    public function focusUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
	        $this->loadModel('FocusGroups');
            $this->loadModel('FocusCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['focus_group_id'];

				$exists= $this->FocusGroups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->FocusCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'focus_group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->FocusCommitments->get($likeExists->id);
						$this->FocusCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->FocusGroupUpload->getCommitCount($fundId);
					$result['message']= 'uncommited successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  focusCommitmentList method 
     *
     *
     *
     *
     ***/
    public function focusCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('FocusCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['focus_group_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->FocusCommitments->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->FocusCommitments->find('all',['conditions'=>['focus_group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No focus group commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No focus group commitment list found.';
				echo json_encode($result);
            }
    }


    /******************* End ****************/
    /* 
     *  settingList method 
     *
     *
     *
     *
     ***/
    public function settingList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaSignups');
            $this->loadModel('Settings');
            

            if($this->request->is('post'))
            {
	            $json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$UserId= $this->request->data['user_id'];

				$betaSignuplists= $this->BetaSignups->find('all',['conditions'=>['BetaSignups.user_id =' => $UserId]]);
        		$TotalItems=$betaSignuplists->count();

        		//if empty save admin set default settings
		        if(empty($TotalItems))
		        { 
		          $this->loadModel('AdminBetaSignupSettings');
		          $adminSignupDeafultSetting= $this->AdminBetaSignupSettings->find('all');

		          foreach ($adminSignupDeafultSetting as $key => $value)
		          {
		              $settingdDefault= $this->BetaSignups->newEntity();

		              $settingdDefault->user_id = $UserId;
		              $settingdDefault->type = $value->type;
		              $settingdDefault->status = $value->status;
		              
		              $this->BetaSignups->save($settingdDefault);
		          }

		        }

		        $results1=[];

		        // Get user saved settings
            	$settingdata = $this->Settings->find('all', ['conditions' => ['Settings.user_id' => $UserId]])->first();

            	if(!empty($settingdata)){

            		//$keyss['type']='notification';
            		if(empty($settingdata->notification)){
            			$keyss['notification']=false;
            		}else{
            			$keyss['notification']=true;
            		}

            		//$keyss1['type']='public_profile';

            		if(empty($settingdata->public_profile)){
	            		$keyss['public_profile']=false;
	            	}else{
            			$keyss['public_profile']=true;
            		}
            			
            		$results1= $keyss;

            	}else{
            		//$keyss['type']='notification';
            		$keyss['notification']=1;

            		//$keyss1['type']='public_profile';
            		$keyss['public_profile']=1;

            		$results1= $keyss;
            	}
            	$results=[];
		        $betaSignuplists= $this->BetaSignups->find('all',['conditions'=>['BetaSignups.user_id =' => $UserId]])->toArray();
		        foreach ($betaSignuplists as $key => $value) {
		        	//$keys['type']=$value->type;
		        	$typ =$value->type;
		        	if(empty($value->status)){
		        		$keys[$typ]=false;
		        	}else{
		        		$keys[$typ]=true;
		        	}	
		        	$results=$keys;
		        	//$keys=[];

		        }

		        $result['code']=200;
				$result['setting_list']= array_merge($results1,$results);
				echo json_encode($result);

			}else{

				$result['code']=404;
				$result['message']= 'No setting list found.';
				echo json_encode($result);
			}	
    }



    /* 
     *  registerForRole method 
     *
     *
     *
     *
     ***/
    public function registerForRole()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaSignups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id= $this->request->data['user_id'];
				$type= $this->request->data['type'];

				if(!empty($type)){

					$registerBeta = $this->BetaSignups->newEntity(); 
	                $registerBeta = $this->BetaSignups->patchEntity($registerBeta, $this->request->data);

					$betaExists= $this->BetaSignups->find('all',['conditions'=>['user_id'=>$user_id,'type' => $type]])->first();
					$registerBeta->status =1;

					if(!empty($betaExists)){
						$registerBeta->id=$betaExists->id;
					}
					$saveResult = $this->BetaSignups->save($registerBeta); 
					if($saveResult){
						$result['code']=200;
						$result['message']= 'Registered successfully.';
						echo json_encode($result);
   					}else{
   						$result['code']=404;
						$result['message']= 'Could not register up please try again.';
						echo json_encode($result);
   					}	
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not register up type can not be left blank.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not register up please try again.';
				echo json_encode($result);
            }
    }


    /*  
     *  unRegisterForRole method 
     *
     *
     *
     *
     ***/
    public function unRegisterForRole()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
	        $this->loadModel('BetaSignups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id= $this->request->data['user_id'];
				$type= $this->request->data['type'];

				if(!empty($type))
				{

					//delete record from dislike table
					$betsList= $this->BetaSignups->find('all',['conditions'=>['user_id'=>$user_id,'type' => $type]])->first();
					
					if(!empty($betsList)){

						$registerBeta = $this->BetaSignups->newEntity(); 
	                	$registerBeta = $this->BetaSignups->patchEntity($registerBeta, $this->request->data);

						$registerBeta->status =0;
						$registerBeta->id= $betsList->id;

						$saveResult = $this->BetaSignups->save($registerBeta); 

						/*$entity = $this->BetaSignups->get($likeExists->id);
						$delResult=$this->BetaSignups->delete($entity);*/

						if($saveResult){
							$result['code']=200;
							$result['message']= 'Unregistered successfully.';
							echo json_encode($result);
						}else{
							$result['code']=404;
							$result['message']= 'Could not unregister. Please try again.';
							echo json_encode($result);
						}
	                     
					}else{
						$result['code']=404;
						$result['message']= 'Could not unregister. No record found.';
						echo json_encode($result);
					}	
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not unregister or type can not be left blank.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unregister. Please try again.';
				echo json_encode($result);
            }
    }





     /* 
     *  registerBetaTesterList method 
     *
     *
     *
     *
     ***/
    public function registerRoleList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('BetaSignups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$user_id= $this->request->data['user_id'];
					$type= $this->request->data['type'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            	
	            	$searchKeyword=trim($this->request->data['search']);
	            	//$searchKeyword=trim($this->request->query('search'));
	            	$aa= explode(' ', $searchKeyword);
	            	if(!empty($aa)){
	            		$searchKeyword=$aa[0];
	            	}
		            $searchKeyword = str_replace("'","",$searchKeyword);  

		            if(!empty($searchKeyword)){

		                $connection = ConnectionManager::get('default');
		                $qq = "SELECT CP.user_id FROM keywords as KY INNER JOIN contractor_professionals as CP
		                ON FIND_IN_SET(KY.id, CP.keywords) where KY.name like '%".$searchKeyword."%' GROUP BY CP.user_id
		                UNION SELECT CB.id FROM users as CB where CB.first_name like '%".$searchKeyword."%'
		                OR CB.last_name like '%".$searchKeyword."%' GROUP BY CB.id";
		                $sql = $connection->execute ($qq);
		                $user_ids = $sql->fetchAll('assoc');

		                  if(!empty($user_ids)){

		                    foreach($user_ids as $SingleUser):
		                        if(isset($SingleUser['user_id'])&&($SingleUser['user_id']!='')){
		                            $contractorIds[] = $SingleUser['user_id'];
		                        }
		                    endforeach; 
		                    
	                        $conditions = ['BetaSignups.user_id IN'=>$contractorIds,
	                        'BetaSignups.user_id !='=>$user_id,'BetaSignups.type' => $type];

	                        $betalists= $this->BetaSignups->find('all',['conditions'=>$conditions])->contain(['Users'=>['ContractorBasics']]);

	                        $TotalItems= $betalists->count();

	                        $betalists = $this->Paginator->paginate($this->BetaSignups->find('all',['conditions'=>$conditions])->contain(['Users'=>['ContractorBasics']]), $config);	

		                  }                                                        

	                }else{

		                $betalists= $this->BetaSignups->find('all',['conditions'=>['BetaSignups.user_id !=' => $user_id,'BetaSignups.type' => $type]])->contain(['Users'=>['ContractorBasics']]);

		                $TotalItems= $betalists->count();

		                $betalists = $this->Paginator->paginate($this->BetaSignups->find('all',['conditions'=>['BetaSignups.user_id !=' => $user_id,'BetaSignups.type' => $type]])->contain(['Users'=>['ContractorBasics']]), $config);
		            }

	                if(!empty($TotalItems)){
		
						foreach($betalists as $betalist){

		                    $keys['id']= $betalist->user->id;
		                    if(!empty($betalist->user)){
		                    	$keys['name']= $betalist->user->first_name.' '.$betalist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($betalist->user->contractor_basic)){

		                    	if(!empty($betalist->user->contractor_basic->bio)){
			                    	$keys['bio']= $betalist->user->contractor_basic->bio;
			                    }else{
			                    	$keys['bio']= '';
			                    }

			                    if(!empty($betalist->user->contractor_basic->image)){
			                    	$keys['image']= "/img/profile_pic/".$betalist->user->contractor_basic->image;
			                    }else{
			                    	$keys['image']= '';
			                    }
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No list found.';
				echo json_encode($result);
            }
    }



    //*************************** Audio Video ***********************//

    /**  1>
    *    audioInterestKeywordLists Method
    *
    *
    ***/
    public function audioInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioInterestKeywords');

            $AudioInterestKeywords= $this->AudioInterestKeywords->find('all');

            $TotalItems= $AudioInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($AudioInterestKeywords as $AudioInterestKeyword){

                    $keys['id']= $AudioInterestKeyword->id;
					$keys['name']= $AudioInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   audiorKeywordsList Method
    *
    *
    ***/
    public function audiorKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioKeywords');

            $AudioKeywords= $this->AudioKeywords->find('all');

            $TotalItems= $AudioKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($AudioKeywords as $AudioKeyword){

                    $keys['id']= $AudioKeyword->id;
					$keys['name']= $AudioKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   audioTargetMarketsList Method
    *
    *
    ***/
    public function audioTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioTargetMarkets');

            $AudioTargetMarkets= $this->AudioTargetMarkets->find('all');

            $TotalItems= $AudioTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($AudioTargetMarkets as $AudioTargetMarket){

                    $keys['id']= $AudioTargetMarket->id;
					$keys['name']= $AudioTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addAudioVideo method 
     *
     *
     *
     *
     ***/
    public function addAudioVideo()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('AudioVideos');
				$addBoardMembers = $this->AudioVideos->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->AudioUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->AudioUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->AudioUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->AudioUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->AudioVideos->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->AudioVideos->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveAudioFeeds($this->request->data['user_id'],'feeds_audio_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editAudioVideo method 
     *
     *
     *
     *
     ***/
    public function editAudioVideo()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('AudioVideos');
				$addfunds = $this->AudioVideos->newEntity(); 
				$this->AudioVideos->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['audio_id'];

				$exists = $this->AudioVideos->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->AudioVideos->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->AudioUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->AudioUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->AudioUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->AudioUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->AudioVideos->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->AudioVideos->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    audioDetails Method
    *
    *
    ***/
    public function audioDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['audio_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->AudioVideos->find('all',['conditions'=>['AudioVideos.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->AudioUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->AudioUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->AudioUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/audio_video/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/audio_video/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/audio_video/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/audio_video/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->AudioUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->AudioUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->AudioUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->AudioUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->AudioUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myAudioVideo Method
    *
    *
    ***/
    public function myAudioVideo()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'AudioVideos.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM audio_keywords as KY INNER JOIN audio_videos as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/audio_video/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->AudioUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->AudioUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveAudioList Method
    *
    *
    ***/
    public function archiveAudioList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'AudioVideos.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM audio_keywords as KY INNER JOIN audio_videos as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>2,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>2,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>2,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>2,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/audio_video/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->AudioUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->AudioUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateAudioList Method
    *
    *
    ***/
    public function deactivateAudioList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'AudioVideos.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM audio_keywords as KY INNER JOIN audio_videos as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>0,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id '=>$user_id, 'AudioVideos.status'=>0,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>0,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id'=>$user_id, 'AudioVideos.status'=>0,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id'=>$user_id,'AudioVideos.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/audio_video/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->AudioUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->AudioUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findAudioVideo Method
    *
    *
    ***/
    public function findAudioVideo()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'AudioVideos.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM audio_keywords as KY INNER JOIN audio_videos as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id !='=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id !='=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['AudioVideos.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id !='=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->AudioVideos->find('all',
									                        ['conditions'=>
									                            [
									                                'AudioVideos.user_id !='=>$user_id, 'AudioVideos.status'=>1,

									                                'OR' =>[
									                                            ['AudioVideos.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id !='=>$user_id,'AudioVideos.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->AudioVideos->find('all',['conditions'=>['AudioVideos.user_id !='=>$user_id,'AudioVideos.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/audio_video/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->AudioUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->AudioUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  11>
    *    archiveAudio Method
    *
    *
    ***/
    public function archiveAudio()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['audio_id'];

            	$res= $this->AudioVideos->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The audio has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The audio could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The audio could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

     /**  12>
    *    deleteAudio Method
    *
    *
    ***/
    public function deleteAudio()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['audio_id'];

            	$res= $this->AudioVideos->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The audio has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The audio could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The audio could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    
    /* 13>
    *  deactivateAudio Method
    *
    *
    ***/
    public function deactivateAudio()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['audio_id'];

            	$res= $this->AudioVideos->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The audio has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The audio could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The audio could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /* 14>
    *  activateAudio Method
    *
    *
    ***/
    public function activateAudio()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['audio_id'];

            	$res= $this->AudioVideos->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The audio has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The audio could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The audio could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeAudio method 
     *
     *
     *
     *
     ***/
    public function likeAudio()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('AudioDislikes');
					$likeExists= $this->AudioDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'audio_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->AudioDislikes->get($likeExists->id);
						$this->AudioDislikes->delete($entity);
					}

	                $this->loadModel('AudioLikes');
					$likefunds = $this->AudioLikes->newEntity(); 

					
	                $likefunds = $this->AudioLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->AudioLikes->find('all',['conditions'=>['like_by'=>$likeBy,'audio_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->AudioLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Audio liked successfully.';
							$result['likes']= $this->AudioUpload->getLikeCount($fundId);
							$result['dislikes']= $this->AudioUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find audio.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like audio.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeAudio method 
     *
     *
     *
     *
     ***/
    public function disLikeAudio()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('AudioLikes');
					$likeExists= $this->AudioLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'audio_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->AudioLikes->get($likeExists->id);
						$this->AudioLikes->delete($entity);
					}

	                $this->loadModel('AudioDislikes');
					$dislikefunds = $this->AudioDislikes->newEntity(); 

					
	                $dislikefunds = $this->AudioDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->AudioDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'audio_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->AudioDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Audio disliked successfully.';
							$result['dislikes']= $this->AudioUpload->getDislikeCount($fundId);
							$result['likes']= $this->AudioUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->AudioUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->AudioUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike audio. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find audio.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike audio.';
				echo json_encode($result);
            }
    }


    /* 17>
     *  audioLikeList method 
     *
     *
     *
     *
     ***/
    public function audioLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['audio_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('AudioLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->AudioLikes->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->AudioLikes->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

    /* 18> 
     *  audioDislikeList method 
     *
     *
     *
     *
     ***/
    public function audioDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['audio_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('AudioDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->AudioDislikes->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->AudioDislikes->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No audio dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followAudio method 
     *
     *
     *
     *
     ***/
    public function followAudio()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('AudioFollowers');
					$FundFollowers = $this->AudioFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->AudioFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->AudioFollowers->find('all',['conditions'=>['user_id'=>$followBy,'audio_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->AudioFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveAudioFeeds($followBy,'feeds_audio_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Audio followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow audio. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find audio.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow audio.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowAudio method 
     *
     *
     *
     *
     ***/
    public function unfollowAudio()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('AudioFollowers');
					$likeExists= $this->AudioFollowers->find('all',['conditions'=>['user_id'=>$followBy,'audio_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->AudioFollowers->get($likeExists->id);
						$this->AudioFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Audio unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find audio.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow audio.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  audioCommitment method 
     *
     *
     *
     *
     ***/
    public function audioCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');
            $this->loadModel('AudioCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->AudioCommitments->newEntity(); 
	                $likefunds = $this->AudioCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->AudioCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'audio_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->AudioCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->AudioUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  audioUncommitment method 
     *
     *
     *
     *
     ***/
    public function audioUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioVideos');
            $this->loadModel('AudioCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['audio_id'];

				$exists= $this->AudioVideos->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->AudioCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'audio_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->AudioCommitments->get($likeExists->id);
						$this->AudioCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->AudioUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  audioCommitmentList method 
     *
     *
     *
     *
     ***/
    public function audioCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('AudioCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['audio_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->AudioCommitments->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->AudioCommitments->find('all',['conditions'=>['audio_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No audio commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No audio commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Information ***********************//

    /**  1>
    *    informationInterestKeywordLists Method
    *
    *
    ***/
    public function informationInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('InformationInterestKeywords');

            $InformationInterestKeywords= $this->InformationInterestKeywords->find('all');

            $TotalItems= $InformationInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($InformationInterestKeywords as $InformationInterestKeyword){

                    $keys['id']= $InformationInterestKeyword->id;
					$keys['name']= $InformationInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   informationKeywordsList Method
    *
    *
    ***/
    public function informationKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('InformationKeywords');

            $InformationKeywords= $this->InformationKeywords->find('all');

            $TotalItems= $InformationKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($InformationKeywords as $InformationKeyword){

                    $keys['id']= $InformationKeyword->id;
					$keys['name']= $InformationKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   informationTargetMarketsList Method
    *
    *
    ***/
    public function informationTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('InformationTargetMarkets');

            $InformationTargetMarkets= $this->InformationTargetMarkets->find('all');

            $TotalItems= $InformationTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($InformationTargetMarkets as $InformationTargetMarket){

                    $keys['id']= $InformationTargetMarket->id;
					$keys['name']= $InformationTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addInformation method 
     *
     *
     *
     *
     ***/
    public function addInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Informations');
				$addBoardMembers = $this->Informations->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->InformationUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->InformationUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->InformationUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->InformationUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Informations->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Informations->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveInformationFeeds($this->request->data['user_id'],'feeds_information_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save Test.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editInformation method 
     *
     *
     *
     *
     ***/
    public function editInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Informations');
				$addfunds = $this->Informations->newEntity(); 
				$this->Informations->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['information_id'];

				$exists = $this->Informations->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Informations->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->InformationUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->InformationUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->InformationUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->InformationUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Informations->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Informations->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    informationDetails Method
    *
    *
    ***/
    public function informationDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['information_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Informations->find('all',['conditions'=>['Informations.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->InformationUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->InformationUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->InformationUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/information/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/information/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/information/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/information/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->InformationUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->InformationUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->InformationUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->InformationUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->InformationUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  7>
    *    myInformation Method
    *
    *
    ***/
    public function myInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Informations.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM information_keywords as KY INNER JOIN informations as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/information/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->InformationUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->InformationUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveInformationList Method
    *
    *
    ***/
    public function archiveInformationList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Informations.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM information_keywords as KY INNER JOIN informations as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>2,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>2,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>2,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>2,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/information/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->InformationUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->InformationUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateInformationList Method
    *
    *
    ***/
    public function deactivateInformationList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Informations.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM information_keywords as KY INNER JOIN informations as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>0,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id '=>$user_id, 'Informations.status'=>0,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>0,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id'=>$user_id, 'Informations.status'=>0,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Informations->find('all',['conditions'=>['Informations.user_id'=>$user_id,'Informations.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/information/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->InformationUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->InformationUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findInformation Method
    *
    *
    ***/
    public function findInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Informations.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM information_keywords as KY INNER JOIN informations as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id !='=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id !='=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Informations.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id !='=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Informations->find('all',
									                        ['conditions'=>
									                            [
									                                'Informations.user_id !='=>$user_id, 'Informations.status'=>1,

									                                'OR' =>[
									                                            ['Informations.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Informations->find('all',['conditions'=>['Informations.user_id !='=>$user_id,'Informations.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Informations->find('all',['conditions'=>['Informations.user_id !='=>$user_id,'Informations.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/information/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->InformationUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->InformationUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveInformation Method
    *
    *
    ***/
    public function archiveInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['information_id'];

            	$res= $this->Informations->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Information has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Information could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Information could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

     /**  12>
    *    deleteInformation Method
    *
    *
    ***/
    public function deleteInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['information_id'];

            	$res= $this->Informations->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Information has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Information could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Information could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    
    /* 13>
    *  deactivateInformation Method
    *
    *
    ***/
    public function deactivateInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['information_id'];

            	$res= $this->Informations->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Information has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Information could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Information could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateInformation Method
    *
    *
    ***/
    public function activateInformation()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['information_id'];

            	$res= $this->Informations->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Information has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Information could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Information could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeInformation method 
     *
     *
     *
     *
     ***/
    public function likeInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('InformationDislikes');
					$likeExists= $this->InformationDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'information_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->InformationDislikes->get($likeExists->id);
						$this->InformationDislikes->delete($entity);
					}

	                $this->loadModel('InformationLikes');
					$likefunds = $this->InformationLikes->newEntity(); 

					
	                $likefunds = $this->InformationLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->InformationLikes->find('all',['conditions'=>['like_by'=>$likeBy,'information_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->InformationLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Information liked successfully.';
							$result['likes']= $this->InformationUpload->getLikeCount($fundId);
							$result['dislikes']= $this->InformationUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Information.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Information.';
				echo json_encode($result);
            }
    }

    /*  16>
     *  disLikeInformation method 
     *
     *
     *
     *
     ***/
    public function disLikeInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('InformationLikes');
					$likeExists= $this->InformationLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'information_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->InformationLikes->get($likeExists->id);
						$this->InformationLikes->delete($entity);
					}

	                $this->loadModel('InformationDislikes');
					$dislikefunds = $this->InformationDislikes->newEntity(); 

					
	                $dislikefunds = $this->InformationDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->InformationDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'information_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->InformationDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Information disliked successfully.';
							$result['dislikes']= $this->InformationUpload->getDislikeCount($fundId);
							$result['likes']= $this->InformationUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->InformationUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->InformationUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Information. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Information.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Information.';
				echo json_encode($result);
            }
    }


    /* 17>
     *  informationLikeList method 
     *
     *
     *
     *
     ***/
    public function informationLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['information_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('InformationLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->InformationLikes->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->InformationLikes->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }


     /* 18> 
     *  informationDislikeList method 
     *
     *
     *
     *
     ***/
    public function informationDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['information_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('InformationDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->InformationDislikes->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->InformationDislikes->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No information dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followInformation method 
     *
     *
     *
     *
     ***/
    public function followInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('InformationFollowers');
					$FundFollowers = $this->InformationFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->InformationFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->InformationFollowers->find('all',['conditions'=>['user_id'=>$followBy,'information_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->InformationFollowers->save($likefunds);
	                    if ($resultSave){
	                    	//Save Feeds
                            $this->Feeds->saveInformationFeeds($followBy,'feeds_information_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Information followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow information. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find information.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow information.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowInformation method 
     *
     *
     *
     *
     ***/
    public function unfollowInformation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('InformationFollowers');
					$likeExists= $this->InformationFollowers->find('all',['conditions'=>['user_id'=>$followBy,'information_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->InformationFollowers->get($likeExists->id);
						$this->InformationFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Information unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find information.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow information.';
				echo json_encode($result);
            }
    }


    /*  21>
     *  informationCommitment method 
     *
     *
     *
     *
     ***/
    public function informationCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');
            $this->loadModel('InformationCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->InformationCommitments->newEntity(); 
	                $likefunds = $this->InformationCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->InformationCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'information_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->InformationCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->InformationUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  informationUncommitment method 
     *
     *
     *
     *
     ***/
    public function informationUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Informations');
            $this->loadModel('InformationCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['information_id'];

				$exists= $this->Informations->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->InformationCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'information_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->InformationCommitments->get($likeExists->id);
						$this->InformationCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->InformationUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  informationCommitmentList method 
     *
     *
     *
     *
     ***/
    public function informationCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('InformationCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['information_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->InformationCommitments->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->InformationCommitments->find('all',['conditions'=>['information_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Information commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Information commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Productivity ***********************//

    /**  1>
    *    productivityInterestKeywordLists Method
    *
    *
    ***/
    public function productivityInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ProductivityInterestKeywords');

            $ProductivityInterestKeywords= $this->ProductivityInterestKeywords->find('all');

            $TotalItems= $ProductivityInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ProductivityInterestKeywords as $ProductivityInterestKeyword){

                    $keys['id']= $ProductivityInterestKeyword->id;
					$keys['name']= $ProductivityInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   productivityKeywordsList Method
    *
    *
    ***/
    public function productivityKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ProductivityKeywords');

            $ProductivityKeywords= $this->ProductivityKeywords->find('all');

            $TotalItems= $ProductivityKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ProductivityKeywords as $ProductivityKeyword){

                    $keys['id']= $ProductivityKeyword->id;
					$keys['name']= $ProductivityKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   productivityTargetMarketsList Method
    *
    *
    ***/
    public function productivityTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ProductivityTargetMarkets');

            $ProductivityTargetMarkets= $this->ProductivityTargetMarkets->find('all');

            $TotalItems= $ProductivityTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ProductivityTargetMarkets as $ProductivityTargetMarket){

                    $keys['id']= $ProductivityTargetMarket->id;
					$keys['name']= $ProductivityTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addProductivity method 
     *
     *
     *
     *
     ***/
    public function addProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Productivities');
				$addBoardMembers = $this->Productivities->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->ProductivityUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->ProductivityUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->ProductivityUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->ProductivityUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Productivities->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Productivities->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveProductivityFeeds($this->request->data['user_id'],'feeds_productivity_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editProductivity method 
     *
     *
     *
     *
     ***/
    public function editProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Productivities');
				$addfunds = $this->Productivities->newEntity(); 
				$this->Productivities->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['productivity_id'];

				$exists = $this->Productivities->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Productivities->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->ProductivityUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->ProductivityUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->ProductivityUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->ProductivityUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Productivities->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Productivities->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

     /**  6>
    *    productivityDetails Method
    *
    *
    ***/
    public function productivityDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['productivity_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Productivities->find('all',['conditions'=>['Productivities.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->ProductivityUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->ProductivityUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->ProductivityUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/productivity/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/productivity/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/productivity/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/productivity/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->ProductivityUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->ProductivityUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->ProductivityUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->ProductivityUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->ProductivityUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  7>
    *    myProductivity Method
    *
    *
    ***/
    public function myProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Productivities.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM productivity_keywords as KY INNER JOIN productivities as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/productivity/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ProductivityUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ProductivityUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveProductivityList Method
    *
    *
    ***/
    public function archiveProductivityList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Productivities.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM productivity_keywords as KY INNER JOIN productivities as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>2,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>2,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>2,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>2,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/productivity/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ProductivityUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ProductivityUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateProductivityList Method
    *
    *
    ***/
    public function deactivateProductivityList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Productivities.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM productivity_keywords as KY INNER JOIN productivities as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>0,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id '=>$user_id, 'Productivities.status'=>0,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>0,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id'=>$user_id, 'Productivities.status'=>0,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Productivities->find('all',['conditions'=>['Productivities.user_id'=>$user_id,'Productivities.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/productivity/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ProductivityUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ProductivityUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findProductivity Method
    *
    *
    ***/
    public function findProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Productivities.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM productivity_keywords as KY INNER JOIN productivities as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id !='=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id !='=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Productivities.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id !='=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Productivities->find('all',
									                        ['conditions'=>
									                            [
									                                'Productivities.user_id !='=>$user_id, 'Productivities.status'=>1,

									                                'OR' =>[
									                                            ['Productivities.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Productivities->find('all',['conditions'=>['Productivities.user_id !='=>$user_id,'Productivities.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Productivities->find('all',['conditions'=>['Productivities.user_id !='=>$user_id,'Productivities.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/productivity/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ProductivityUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ProductivityUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  11>
    *    archiveProductivity Method
    *
    *
    ***/
    public function archiveProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['productivity_id'];

            	$res= $this->Productivities->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Productivity has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Productivity could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Productivity could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

     /**  12>
    *    deleteProductivity Method
    *
    *
    ***/
    public function deleteProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['productivity_id'];

            	$res= $this->Productivities->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Productivity has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Productivity could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Productivity could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    
    /* 13>
    *  deactivateProductivity Method
    *
    *
    ***/
    public function deactivateProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['productivity_id'];

            	$res= $this->Productivities->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Productivity has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Productivity could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Productivity could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateProductivity Method
    *
    *
    ***/
    public function activateProductivity()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['productivity_id'];

            	$res= $this->Productivities->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Productivity has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Productivity could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Productivity could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeProductivity method 
     *
     *
     *
     *
     ***/
    public function likeProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('ProductivityDislikes');
					$likeExists= $this->ProductivityDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'productivity_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ProductivityDislikes->get($likeExists->id);
						$this->ProductivityDislikes->delete($entity);
					}

	                $this->loadModel('ProductivityLikes');
					$likefunds = $this->ProductivityLikes->newEntity(); 

					
	                $likefunds = $this->ProductivityLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ProductivityLikes->find('all',['conditions'=>['like_by'=>$likeBy,'productivity_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->ProductivityLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Productivity liked successfully.';
							$result['likes']= $this->ProductivityUpload->getLikeCount($fundId);
							$result['dislikes']= $this->ProductivityUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Productivity.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Productivity.';
				echo json_encode($result);
            }
    }

    /*  16>
     *  disLikeProductivity method 
     *
     *
     *
     *
     ***/
    public function disLikeProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('ProductivityLikes');
					$likeExists= $this->ProductivityLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'productivity_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ProductivityLikes->get($likeExists->id);
						$this->ProductivityLikes->delete($entity);
					}

	                $this->loadModel('ProductivityDislikes');
					$dislikefunds = $this->ProductivityDislikes->newEntity(); 

					
	                $dislikefunds = $this->ProductivityDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->ProductivityDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'productivity_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->ProductivityDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Productivity disliked successfully.';
							$result['dislikes']= $this->ProductivityUpload->getDislikeCount($fundId);
							$result['likes']= $this->ProductivityUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->ProductivityUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->ProductivityUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Productivity. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Productivity.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Productivity.';
				echo json_encode($result);
            }
    }


    /* 17>
     *  productivityLikeList method 
     *
     *
     *
     *
     ***/
    public function productivityLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['productivity_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ProductivityLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ProductivityLikes->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ProductivityLikes->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }


     /* 18> 
     *  productivityDislikeList method 
     *
     *
     *
     *
     ***/
    public function productivityDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['productivity_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ProductivityDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ProductivityDislikes->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ProductivityDislikes->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Productivity dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followProductivity method 
     *
     *
     *
     *
     ***/
    public function followProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('ProductivityFollowers');
					$FundFollowers = $this->ProductivityFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->ProductivityFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ProductivityFollowers->find('all',['conditions'=>['user_id'=>$followBy,'productivity_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->ProductivityFollowers->save($likefunds);
	                    if ($resultSave){
	                    	//Save Feeds
                            $this->Feeds->saveProductivityFeeds($followBy,'feeds_productivity_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Productivity followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Productivity. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Productivity.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Productivity.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowProductivity method 
     *
     *
     *
     *
     ***/
    public function unfollowProductivity()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('ProductivityFollowers');
					$likeExists= $this->ProductivityFollowers->find('all',['conditions'=>['user_id'=>$followBy,'productivity_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->ProductivityFollowers->get($likeExists->id);
						$this->ProductivityFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Productivity unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Productivity.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Productivity.';
				echo json_encode($result);
            }
    }


     /*  21>
     *  productivityCommitment method 
     *
     *
     *
     *
     ***/
    public function productivityCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');
            $this->loadModel('ProductivityCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->ProductivityCommitments->newEntity(); 
	                $likefunds = $this->ProductivityCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ProductivityCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'productivity_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->ProductivityCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->ProductivityUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }

    /*  22>
     *  productivityUncommitment method 
     *
     *
     *
     *
     ***/
    public function productivityUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Productivities');
            $this->loadModel('ProductivityCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['productivity_id'];

				$exists= $this->Productivities->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->ProductivityCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'productivity_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ProductivityCommitments->get($likeExists->id);
						$this->ProductivityCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->ProductivityUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }


    /* 23>
     *  productivityCommitmentList method 
     *
     *
     *
     *
     ***/
    public function productivityCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ProductivityCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['productivity_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ProductivityCommitments->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ProductivityCommitments->find('all',['conditions'=>['productivity_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Productivity commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Productivity commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Software ***********************//

    /**  1>
    *    softwareInterestKeywordLists Method
    *
    *
    ***/
    public function softwareInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SoftwareInterestKeywords');

            $SoftwareInterestKeywords= $this->SoftwareInterestKeywords->find('all');

            $TotalItems= $SoftwareInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SoftwareInterestKeywords as $SoftwareInterestKeyword){

                    $keys['id']= $SoftwareInterestKeyword->id;
					$keys['name']= $SoftwareInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

    /** 2>
    *   softwareKeywordsList Method
    *
    *
    ***/
    public function softwareKeywordsList()
    { 
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SoftwareKeywords');

            $SoftwareKeywords= $this->SoftwareKeywords->find('all');

            $TotalItems= $SoftwareKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SoftwareKeywords as $SoftwareKeyword){

                    $keys['id']= $SoftwareKeyword->id;
					$keys['name']= $SoftwareKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   softwareTargetMarketsList Method
    *
    *
    ***/
    public function softwareTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SoftwareTargetMarkets');

            $SoftwareTargetMarkets= $this->SoftwareTargetMarkets->find('all');

            $TotalItems= $SoftwareTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SoftwareTargetMarkets as $SoftwareTargetMarket){

                    $keys['id']= $SoftwareTargetMarket->id;
					$keys['name']= $SoftwareTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addSoftware method 
     *
     *
     *
     *
     ***/
    public function addSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Softwares');
				$addBoardMembers = $this->Softwares->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->SoftwareUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->SoftwareUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->SoftwareUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->SoftwareUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Softwares->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Softwares->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveSoftwareFeeds($this->request->data['user_id'],'feeds_software_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{

                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}

                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  5>
     *  editProductivity method 
     *
     *
     *
     *
     ***/
    public function editSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Softwares');
				$addfunds = $this->Softwares->newEntity(); 
				$this->Softwares->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['software_id'];

				$exists = $this->Softwares->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Softwares->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->SoftwareUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->SoftwareUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->SoftwareUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->SoftwareUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Softwares->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Softwares->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

    /**  6>
    *    productivityDetails Method
    *
    *
    ***/
    public function softwareDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['software_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Softwares->find('all',['conditions'=>['Softwares.id'=>$fund_id]])->contain(['Users'])->first();
	        	// pr($fundetail); die('dfdf'); 
	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->SoftwareUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->SoftwareUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->SoftwareUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/software/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/software/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/software/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/software/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->SoftwareUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->SoftwareUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->SoftwareUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->SoftwareUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->SoftwareUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myProductivity Method
    *
    *
    ***/
    public function mySoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Softwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM software_keywords as KY INNER JOIN softwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/software/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SoftwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SoftwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  8>
    *    archiveProductivityList Method
    *
    *
    ***/
    public function archiveSoftwareList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Softwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM software_keywords as KY INNER JOIN softwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>2,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>2,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>2,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>2,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/software/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SoftwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SoftwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**   9>
    *     deactivateProductivityList Method
    *
    *
    ***/
    public function deactivateSoftwareList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Softwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM software_keywords as KY INNER JOIN softwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>0,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id '=>$user_id, 'Softwares.status'=>0,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>0,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id'=>$user_id, 'Softwares.status'=>0,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Softwares->find('all',['conditions'=>['Softwares.user_id'=>$user_id,'Softwares.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/software/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SoftwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SoftwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

   /**  10>
    *    findSoftware Method
    *
    *
    ***/
    public function findSoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Softwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM software_keywords as KY INNER JOIN softwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id !='=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);


	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id !='=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Softwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id !='=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Softwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Softwares.user_id !='=>$user_id, 'Softwares.status'=>1,

									                                'OR' =>[
									                                            ['Softwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Softwares->find('all',['conditions'=>['Softwares.user_id !='=>$user_id,'Softwares.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Softwares->find('all',['conditions'=>['Softwares.user_id !='=>$user_id,'Softwares.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/software/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SoftwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SoftwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

   /**  11>
    *    archiveSoftware Method
    *
    *
    ***/
    public function archiveSoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['software_id'];

            	$res= $this->Softwares->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Software has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Software could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Software could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }


   /**  12>
    *    deleteSoftware Method
    *
    *
    ***/
    public function deleteSoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['software_id'];

            	$res= $this->Softwares->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Software has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Software could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Software could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateSoftware Method
    *
    *
    ***/
    public function deactivateSoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['software_id'];

            	$res= $this->Softwares->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Software has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Software could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Software could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 14>
    *  activateSoftware Method
    *
    *
    ***/
    public function activateSoftware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['software_id'];

            	$res= $this->Softwares->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Softwares has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Softwares could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Softwares could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeSoftware method 
     *
     *
     *
     *
     ***/
    public function likeSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('SoftwareDislikes');
					$likeExists= $this->SoftwareDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'software_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SoftwareDislikes->get($likeExists->id);
						$this->SoftwareDislikes->delete($entity);
					}

	                $this->loadModel('SoftwareLikes');
					$likefunds = $this->SoftwareLikes->newEntity(); 

					
	                $likefunds = $this->SoftwareLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SoftwareLikes->find('all',['conditions'=>['like_by'=>$likeBy,'software_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->SoftwareLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Software liked successfully.';
							$result['likes']= $this->SoftwareUpload->getLikeCount($fundId);
							$result['dislikes']= $this->SoftwareUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Sofware.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Software.';
				echo json_encode($result);
            }
    }

    /*  16>
     *  disLikeSoftware method 
     *
     *
     *
     *
     ***/
    public function disLikeSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('SoftwareLikes');
					$likeExists= $this->SoftwareLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'software_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SoftwareLikes->get($likeExists->id);
						$this->SoftwareLikes->delete($entity);
					}

	                $this->loadModel('SoftwareDislikes');
					$dislikefunds = $this->SoftwareDislikes->newEntity(); 

					
	                $dislikefunds = $this->SoftwareDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->SoftwareDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'software_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->SoftwareDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Software disliked successfully.';
							$result['dislikes']= $this->SoftwareUpload->getDislikeCount($fundId);
							$result['likes']= $this->SoftwareUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->SoftwareUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->SoftwareUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike software. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find software.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike software.';
				echo json_encode($result);
            }
    }


    /* 17>
     *  softwareLikeList method 
     *
     *
     *
     *
     ***/
    public function softwareLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['software_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('SoftwareLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SoftwareLikes->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SoftwareLikes->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

    /* 18> 
     *  softwareDislikeList method 
     *
     *
     *
     *
     ***/
    public function softwareDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['software_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('SoftwareDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SoftwareDislikes->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SoftwareDislikes->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Software dislike list found.';
				echo json_encode($result);
            }
    }

    /*  19>
     *  followSoftware method 
     *
     *
     *
     *
     ***/
    public function followSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('SoftwareFollowers');
					$FundFollowers = $this->SoftwareFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->SoftwareFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SoftwareFollowers->find('all',['conditions'=>['user_id'=>$followBy,'software_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->SoftwareFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveSoftwareFeeds($followBy,'feeds_software_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Software followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Software. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Software.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Software.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowProductivity method 
     *
     *
     *
     *
     ***/
    public function unfollowSoftware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('SoftwareFollowers');
					$likeExists= $this->SoftwareFollowers->find('all',['conditions'=>['user_id'=>$followBy,'software_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->SoftwareFollowers->get($likeExists->id);
						$this->SoftwareFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Software unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Software.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Software.';
				echo json_encode($result);
            }
    }


    /*  21>
     *  productivityCommitment method 
     *
     *
     *
     *
     ***/
    public function softwareCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');
            $this->loadModel('SoftwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->SoftwareCommitments->newEntity(); 
	                $likefunds = $this->SoftwareCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SoftwareCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'software_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->SoftwareCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->SoftwareUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  softwareUncommitment method 
     *
     *
     *
     *
     ***/
    public function softwareUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Softwares');
            $this->loadModel('SoftwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['software_id'];

				$exists= $this->Softwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->SoftwareCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'software_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SoftwareCommitments->get($likeExists->id);
						$this->SoftwareCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->SoftwareUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  softwareCommitmentList method 
     *
     *
     *
     *
     ***/
    public function softwareCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SoftwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['software_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SoftwareCommitments->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SoftwareCommitments->find('all',['conditions'=>['software_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Software commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Software commitment list found.';
				echo json_encode($result);
            }
    }




    //*************************** Service ***********************//

    /**  1>
    *    serviceInterestKeywordLists Method
    *
    *
    ***/
    public function serviceInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ServiceInterestKeywords');

            $ServiceInterestKeywords= $this->ServiceInterestKeywords->find('all');

            $TotalItems= $ServiceInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ServiceInterestKeywords as $ServiceInterestKeyword){

                    $keys['id']= $ServiceInterestKeyword->id;
					$keys['name']= $ServiceInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 2>
    *   serviceKeywordsList Method
    *
    *
    ***/
    public function serviceKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ServiceKeywords');

            $ServiceKeywords= $this->ServiceKeywords->find('all');

            $TotalItems= $ServiceKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ServiceKeywords as $ServiceKeyword){

                    $keys['id']= $ServiceKeyword->id;
					$keys['name']= $ServiceKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   serviceTargetMarketsList Method
    *
    *
    ***/
    public function serviceTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ServiceTargetMarkets');

            $ServiceTargetMarkets= $this->ServiceTargetMarkets->find('all');

            $TotalItems= $ServiceTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ServiceTargetMarkets as $ServiceTargetMarket){

                    $keys['id']= $ServiceTargetMarket->id;
					$keys['name']= $ServiceTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addService method 
     *
     *
     *
     *
     ***/
    public function addService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Services');
				$addBoardMembers = $this->Services->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->ServiceUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->ServiceUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->ServiceUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->ServiceUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Services->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Services->save($addBoardMembers);
                    if ($resultSave){
                    	//Save Feeds
                        $this->Feeds->saveServiceFeeds($this->request->data['user_id'],'feeds_service_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }


     /*  5>
     *  editService method 
     *
     *
     *
     *
     ***/
    public function editService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Services');
				$addfunds = $this->Services->newEntity(); 
				$this->Services->validator()->remove('start_date'); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['service_id'];

				$exists = $this->Services->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Services->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->ServiceUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->ServiceUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->ServiceUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->ServiceUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Services->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Services->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    serviceDetails Method
    *
    *
    ***/
    public function serviceDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['service_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Services->find('all',['conditions'=>['Services.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->ServiceUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->ServiceUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->ServiceUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/service/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/service/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/service/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/service/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->ServiceUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->ServiceUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->ServiceUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->ServiceUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->ServiceUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myService Method
    *
    *
    ***/
    public function myService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Services.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM service_keywords as KY INNER JOIN services as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/service/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ServiceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ServiceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveServiceList Method
    *
    *
    ***/
    public function archiveServiceList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Services.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM service_keywords as KY INNER JOIN services as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>2,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>2,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>2,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>2,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/service/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ServiceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ServiceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateServiceList Method
    *
    *
    ***/
    public function deactivateServiceList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Services.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM service_keywords as KY INNER JOIN services as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>0,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id '=>$user_id, 'Services.status'=>0,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>0,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id'=>$user_id, 'Services.status'=>0,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Services->find('all',['conditions'=>['Services.user_id'=>$user_id,'Services.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/service/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ServiceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ServiceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  10>
    *    findService Method
    *
    *
    ***/
    public function findService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Services.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM service_keywords as KY INNER JOIN services as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id !='=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id !='=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Services.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id !='=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Services->find('all',
									                        ['conditions'=>
									                            [
									                                'Services.user_id !='=>$user_id, 'Services.status'=>1,

									                                'OR' =>[
									                                            ['Services.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Services->find('all',['conditions'=>['Services.user_id !='=>$user_id,'Services.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Services->find('all',['conditions'=>['Services.user_id !='=>$user_id,'Services.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/service/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ServiceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ServiceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveService Method
    *
    *
    ***/
    public function archiveService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['service_id'];

            	$res= $this->Services->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Service has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Service could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Service could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

     /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['service_id'];

            	$res= $this->Services->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Service has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Service could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Service could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    
    /* 13>
    *  deactivateService Method
    *
    *
    ***/
    public function deactivateService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['service_id'];

            	$res= $this->Services->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Service has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Service could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Service could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateService Method
    *
    *
    ***/
    public function activateService()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['service_id'];

            	$res= $this->Services->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Service has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Service could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Service could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /*  15>
     *  likeService method 
     *
     *
     *
     *
     ***/
    public function likeService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('ServiceDislikes');
					$likeExists= $this->ServiceDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'service_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ServiceDislikes->get($likeExists->id);
						$this->ServiceDislikes->delete($entity);
					}

	                $this->loadModel('ServiceLikes');
					$likefunds = $this->ServiceLikes->newEntity(); 

					
	                $likefunds = $this->ServiceLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ServiceLikes->find('all',['conditions'=>['like_by'=>$likeBy,'service_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->ServiceLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Service liked successfully.';
							$result['likes']= $this->ServiceUpload->getLikeCount($fundId);
							$result['dislikes']= $this->ServiceUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Service.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Service.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeService method 
     *
     *
     *
     *
     ***/
    public function disLikeService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('ServiceLikes');
					$likeExists= $this->ServiceLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'service_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ServiceLikes->get($likeExists->id);
						$this->ServiceLikes->delete($entity);
					}

	                $this->loadModel('ServiceDislikes');
					$dislikefunds = $this->ServiceDislikes->newEntity(); 

					
	                $dislikefunds = $this->ServiceDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->ServiceDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'service_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->ServiceDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Service disliked successfully.';
							$result['dislikes']= $this->ServiceUpload->getDislikeCount($fundId);
							$result['likes']= $this->ServiceUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->ServiceUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->ServiceUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Service. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find service.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike service.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  serviceLikeList method 
     *
     *
     *
     *
     ***/
    public function serviceLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['service_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ServiceLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ServiceLikes->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ServiceLikes->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  softwareDislikeList method 
     *
     *
     *
     *
     ***/
    public function serviceDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['service_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ServiceDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ServiceDislikes->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ServiceDislikes->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Service dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followService method 
     *
     *
     *
     *
     ***/
    public function followService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('ServiceFollowers');
					$FundFollowers = $this->ServiceFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->ServiceFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ServiceFollowers->find('all',['conditions'=>['user_id'=>$followBy,'service_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->ServiceFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveServiceFeeds($followBy,'feeds_service_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Service followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Service. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Service.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Service.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowService method 
     *
     *
     *
     *
     ***/
    public function unfollowService()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('ServiceFollowers');
					$likeExists= $this->ServiceFollowers->find('all',['conditions'=>['user_id'=>$followBy,'service_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->ServiceFollowers->get($likeExists->id);
						$this->ServiceFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Service unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Service.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Service.';
				echo json_encode($result);
            }
    }

        /*  21>
     *  serviceCommitment method 
     *
     *
     *
     *
     ***/
    public function serviceCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');
            $this->loadModel('ServiceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->ServiceCommitments->newEntity(); 
	                $likefunds = $this->ServiceCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ServiceCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'service_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->ServiceCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->ServiceUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  ServiceUncommitment method 
     *
     *
     *
     *
     ***/
    public function serviceUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Services');
            $this->loadModel('ServiceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['service_id'];

				$exists= $this->Services->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->ServiceCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'service_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ServiceCommitments->get($likeExists->id);
						$this->ServiceCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->ServiceUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  serviceCommitmentList method 
     *
     *
     *
     *
     ***/
    public function serviceCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ServiceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['service_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ServiceCommitments->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ServiceCommitments->find('all',['conditions'=>['service_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Service commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Service commitment list found.';
				echo json_encode($result);
            }
    }

    //*************************** Hardware ***********************//

    /**  1>
    *    hardwareInterestKeywordLists Method
    *
    *
    ***/
    public function hardwareInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('HardwareInterestKeywords');

            $HardwareInterestKeywords= $this->HardwareInterestKeywords->find('all');

            $TotalItems= $HardwareInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($HardwareInterestKeywords as $HardwareInterestKeyword){

                    $keys['id']= $HardwareInterestKeyword->id;
					$keys['name']= $HardwareInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   hardwareKeywordsList Method
    *
    *
    ***/
    public function hardwareKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('HardwareKeywords');

            $HardwareKeywords= $this->HardwareKeywords->find('all');

            $TotalItems= $HardwareKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($HardwareKeywords as $HardwareKeyword){

                    $keys['id']= $HardwareKeyword->id;
					$keys['name']= $HardwareKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   hardwareTargetMarketsList Method
    *
    *
    ***/
    public function hardwareTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('HardwareTargetMarkets');

            $HardwareTargetMarkets= $this->HardwareTargetMarkets->find('all');

            $TotalItems= $HardwareTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($HardwareTargetMarkets as $HardwareTargetMarket){

                    $keys['id']= $HardwareTargetMarket->id;
					$keys['name']= $HardwareTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addHardware method 
     *
     *
     *
     *
     ***/
    public function addHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Hardwares');
				$addBoardMembers = $this->Hardwares->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->HardwareUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->HardwareUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->HardwareUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->HardwareUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Hardwares->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Hardwares->save($addBoardMembers);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

         /*  5>
     *  editHardware method 
     *
     *
     *
     *
     ***/
    public function editHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Hardwares');
				$addfunds = $this->Hardwares->newEntity(); 
				$this->Hardwares->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['hardware_id'];

				$exists = $this->Hardwares->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Hardwares->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->HardwareUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->HardwareUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->HardwareUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->HardwareUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Hardwares->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Hardwares->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

        /**  6>
    *    hardwareDetails Method
    *
    *
    ***/
    public function hardwareDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['hardware_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Hardwares->find('all',['conditions'=>['Hardwares.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->HardwareUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->HardwareUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->HardwareUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/hardware/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/hardware/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/hardware/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/hardware/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->HardwareUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->HardwareUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->HardwareUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->HardwareUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->HardwareUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myHardware Method
    *
    *
    ***/
    public function myHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Hardwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM hardware_keywords as KY INNER JOIN hardwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/hardware/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->HardwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->HardwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveHardwareList Method
    *
    *
    ***/
    public function archiveHardwareList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Hardwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM hardware_keywords as KY INNER JOIN hardwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>2,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>2,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>2,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>2,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/hardware/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->HardwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->HardwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateHardwareList Method
    *
    *
    ***/
    public function deactivateHardwareList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Hardwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM hardware_keywords as KY INNER JOIN hardwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>0,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id '=>$user_id, 'Hardwares.status'=>0,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>0,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id'=>$user_id, 'Hardwares.status'=>0,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Hardwares->find('all',['conditions'=>['Hardwares.user_id'=>$user_id,'Hardwares.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/hardware/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->HardwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->HardwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findHardware Method
    *
    *
    ***/
    public function findHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Hardwares.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM hardware_keywords as KY INNER JOIN hardwares as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id !='=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id !='=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Hardwares.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id !='=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Hardwares->find('all',
									                        ['conditions'=>
									                            [
									                                'Hardwares.user_id !='=>$user_id, 'Hardwares.status'=>1,

									                                'OR' =>[
									                                            ['Hardwares.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Hardwares->find('all',['conditions'=>['Hardwares.user_id !='=>$user_id,'Hardwares.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Hardwares->find('all',['conditions'=>['Hardwares.user_id !='=>$user_id,'Hardwares.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/hardware/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->HardwareUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->HardwareUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveHardware Method
    *
    *
    ***/
    public function archiveHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['hardware_id'];

            	$res= $this->Hardwares->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Hardware has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Hardware could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Hardware could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['hardware_id'];

            	$res= $this->Hardwares->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Hardware has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Hardware could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Hardware could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateHardware Method
    *
    *
    ***/
    public function deactivateHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['hardware_id'];

            	$res= $this->Hardwares->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Hardware has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Hardware could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Hardware could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateHardware Method
    *
    *
    ***/
    public function activateHardware()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['hardware_id'];

            	$res= $this->Hardwares->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Hardware has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Hardware could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Hardware could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


   /*  15>
     *  likeHardware method 
     *
     *
     *
     *
     ***/
    public function likeHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('HardwareDislikes');
					$likeExists= $this->HardwareDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'hardware_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->HardwareDislikes->get($likeExists->id);
						$this->HardwareDislikes->delete($entity);
					}

	                $this->loadModel('HardwareLikes');
					$likefunds = $this->HardwareLikes->newEntity(); 

					
	                $likefunds = $this->HardwareLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->HardwareLikes->find('all',['conditions'=>['like_by'=>$likeBy,'hardware_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->HardwareLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Hardware liked successfully.';
							$result['likes']= $this->HardwareUpload->getLikeCount($fundId);
							$result['dislikes']= $this->HardwareUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Hardware.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Hardware.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeHardware method 
     *
     *
     *
     *
     ***/
    public function disLikeHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('HardwareLikes');
					$likeExists= $this->HardwareLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'hardware_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->HardwareLikes->get($likeExists->id);
						$this->HardwareLikes->delete($entity);
					}

	                $this->loadModel('HardwareDislikes');
					$dislikefunds = $this->HardwareDislikes->newEntity(); 

					
	                $dislikefunds = $this->HardwareDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->HardwareDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'hardware_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->HardwareDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Hardware disliked successfully.';
							$result['dislikes']= $this->HardwareUpload->getDislikeCount($fundId);
							$result['likes']= $this->HardwareUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->HardwareUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->HardwareUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Hardware. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Hardware.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Hardware.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  HardwareLikeList method 
     *
     *
     *
     *
     ***/
    public function HardwareLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['hardware_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('HardwareLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->HardwareLikes->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->HardwareLikes->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  HardwareDislikeList method 
     *
     *
     *
     *
     ***/
    public function HardwareDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['hardware_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('HardwareDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->HardwareDislikes->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->HardwareDislikes->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Hardware dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followHardware method 
     *
     *
     *
     *
     ***/
    public function followHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('HardwareFollowers');
					$FundFollowers = $this->HardwareFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->HardwareFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->HardwareFollowers->find('all',['conditions'=>['user_id'=>$followBy,'hardware_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->HardwareFollowers->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Hardware followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Hardware. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Hardware.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Hardware.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowHardware method 
     *
     *
     *
     *
     ***/
    public function unfollowHardware()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('HardwareFollowers');
					$likeExists= $this->HardwareFollowers->find('all',['conditions'=>['user_id'=>$followBy,'hardware_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->HardwareFollowers->get($likeExists->id);
						$this->HardwareFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Hardware unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Hardware.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Hardware.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  HardwareCommitment method 
     *
     *
     *
     *
     ***/
    public function hardwareCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');
            $this->loadModel('HardwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->HardwareCommitments->newEntity(); 
	                $likefunds = $this->HardwareCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->HardwareCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'hardware_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->HardwareCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->HardwareUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  HardwareUncommitment method 
     *
     *
     *
     *
     ***/
    public function hardwareUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Hardwares');
            $this->loadModel('HardwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['hardware_id'];

				$exists= $this->Hardwares->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->HardwareCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'hardware_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->HardwareCommitments->get($likeExists->id);
						$this->HardwareCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->HardwareUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  HardwareCommitmentList method 
     *
     *
     *
     *
     ***/
    public function hardwareCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('HardwareCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['hardware_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->HardwareCommitments->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->HardwareCommitments->find('all',['conditions'=>['hardware_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Hardware commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Hardware commitment list found.';
				echo json_encode($result);
            }
    }

    //*************************** Group ***********************//
    
    /**  1>
    *    groupInterestKeywordLists Method
    *
    *
    ***/
    public function groupInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupInterestKeywords');

            $GroupInterestKeywords= $this->GroupInterestKeywords->find('all');

            $TotalItems= $GroupInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupInterestKeywords as $GroupInterestKeyword){

                    $keys['id']= $GroupInterestKeyword->id;
					$keys['name']= $GroupInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   GroupKeywordsList Method
    *
    *
    ***/
    public function groupKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupKeywords');

            $GroupKeywords= $this->GroupKeywords->find('all');

            $TotalItems= $GroupKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupKeywords as $GroupKeyword){

                    $keys['id']= $GroupKeyword->id;
					$keys['name']= $GroupKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   GroupTargetMarketsList Method
    *
    *
    ***/
    public function groupTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupTargetMarkets');

            $GroupTargetMarkets= $this->GroupTargetMarkets->find('all');

            $TotalItems= $GroupTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupTargetMarkets as $GroupTargetMarket){

                    $keys['id']= $GroupTargetMarket->id;
					$keys['name']= $GroupTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addGroup method 
     *
     *
     *
     *
     ***/
    public function addGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Groups');
				$addBoardMembers = $this->Groups->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->GroupUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->GroupUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->GroupUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->GroupUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Groups->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Groups->save($addBoardMembers);
                    if ($resultSave){
                    	//Save Feeds
                        $this->Feeds->saveGroupFeeds($this->request->data['user_id'],'feeds_group_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

         /*  5>
     *  editGroup method 
     *
     *
     *
     *
     ***/
    public function editGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Groups');
				$addfunds = $this->Groups->newEntity(); 
				$this->Groups->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['group_id'];

				$exists = $this->Groups->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Groups->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->GroupUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->GroupUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->GroupUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->GroupUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Groups->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Groups->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

 
        /**  6>
    *    GroupDetails Method
    *
    *
    ***/
    public function groupDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['group_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Groups->find('all',['conditions'=>['Groups.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->GroupUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->GroupUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->GroupUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/group/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/group/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/group/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/group/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->GroupUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->GroupUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->GroupUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->GroupUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->GroupUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myGroup Method
    *
    *
    ***/
    public function myGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Groups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM group_keywords as KY INNER JOIN groups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveGroupList Method
    *
    *
    ***/
    public function archiveGroupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Groups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM group_keywords as KY INNER JOIN groups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>2,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>2,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>2,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>2,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateGroupList Method
    *
    *
    ***/
    public function deactivateGroupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Groups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM group_keywords as KY INNER JOIN groups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>0,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id '=>$user_id, 'Groups.status'=>0,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>0,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id'=>$user_id, 'Groups.status'=>0,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Groups->find('all',['conditions'=>['Groups.user_id'=>$user_id,'Groups.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findGroup Method
    *
    *
    ***/
    public function findGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Groups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM group_keywords as KY INNER JOIN groups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id !='=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id !='=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Groups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id !='=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Groups->find('all',
									                        ['conditions'=>
									                            [
									                                'Groups.user_id !='=>$user_id, 'Groups.status'=>1,

									                                'OR' =>[
									                                            ['Groups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Groups->find('all',['conditions'=>['Groups.user_id !='=>$user_id,'Groups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Groups->find('all',['conditions'=>['Groups.user_id !='=>$user_id,'Groups.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/group/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveGroup Method
    *
    *
    ***/
    public function archiveGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['group_id'];

            	$res= $this->Groups->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Group has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Group could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Group could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['group_id'];

            	$res= $this->Groups->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Group has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Group could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Group could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


   /* 13>
    *  deactivateGroup Method
    *
    *
    ***/
    public function deactivateGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['group_id'];

            	$res= $this->Groups->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Group has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Group could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Group could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 14>
    *  activateGroup Method
    *
    *
    ***/
    public function activateGroup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['group_id'];

            	$res= $this->Groups->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Group has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Group could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Group could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeGroup method 
     *
     *
     *
     *
     ***/
    public function likeGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('GroupDislikes');
					$likeExists= $this->GroupDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupDislikes->get($likeExists->id);
						$this->GroupDislikes->delete($entity);
					}

	                $this->loadModel('GroupLikes');
					$likefunds = $this->GroupLikes->newEntity(); 

					
	                $likefunds = $this->GroupLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupLikes->find('all',['conditions'=>['like_by'=>$likeBy,'group_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->GroupLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Group liked successfully.';
							$result['likes']= $this->GroupUpload->getLikeCount($fundId);
							$result['dislikes']= $this->GroupUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Group.';
				echo json_encode($result);
            }
    }
 


    /*  16>
     *  disLikeGroup method 
     *
     *
     *
     *
     ***/
    public function disLikeGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('GroupLikes');
					$likeExists= $this->GroupLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupLikes->get($likeExists->id);
						$this->GroupLikes->delete($entity);
					}

	                $this->loadModel('GroupDislikes');
					$dislikefunds = $this->GroupDislikes->newEntity(); 

					
	                $dislikefunds = $this->GroupDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->GroupDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'group_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->GroupDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Group disliked successfully.';
							$result['dislikes']= $this->GroupUpload->getDislikeCount($fundId);
							$result['likes']= $this->GroupUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->GroupUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->GroupUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Group. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Group.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  GroupLikeList method 
     *
     *
     *
     *
     ***/
    public function groupLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['group_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('GroupLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupLikes->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupLikes->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  groupDislikeList method 
     *
     *
     *
     *
     ***/
    public function groupDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['group_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('GroupDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupDislikes->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupDislikes->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Group dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followGroup method 
     *
     *
     *
     *
     ***/
    public function followGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('GroupFollowers');
					$FundFollowers = $this->GroupFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->GroupFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'group_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->GroupFollowers->save($likefunds);
	                    if ($resultSave){
	                    	
	                    	//Save Feeds
                            $this->Feeds->saveGroupFeeds($followBy,'feeds_group_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Group followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Group. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Group.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowGroup method 
     *
     *
     *
     *
     ***/
    public function unfollowGroup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('GroupFollowers');
					$likeExists= $this->GroupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'group_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->GroupFollowers->get($likeExists->id);
						$this->GroupFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Group unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Group.';
				echo json_encode($result);
            }
    }

        /*  21>
     *  groupCommitment method 
     *
     *
     *
     *
     ***/
    public function groupCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');
            $this->loadModel('GroupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->GroupCommitments->newEntity(); 
	                $likefunds = $this->GroupCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'group_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->GroupCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->GroupUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  groupUncommitment method 
     *
     *
     *
     *
     ***/
    public function groupUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Groups');
            $this->loadModel('GroupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['group_id'];

				$exists= $this->Groups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->GroupCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'group_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupCommitments->get($likeExists->id);
						$this->GroupCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->GroupUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  groupCommitmentList method 
     *
     *
     *
     *
     ***/
    public function groupCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['group_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupCommitments->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupCommitments->find('all',['conditions'=>['group_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Group commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Group commitment list found.';
				echo json_encode($result);
            }
    }


    


     //*************************** Career Advancement  ***********************//

    /**  1>
    *    careerInterestKeywordLists Method
    *
    *
    ***/
    public function careerInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerInterestKeywords');

            $CareerInterestKeywords= $this->CareerInterestKeywords->find('all');

            $TotalItems= $CareerInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CareerInterestKeywords as $CareerInterestKeyword){

                    $keys['id']= $CareerInterestKeyword->id;
					$keys['name']= $CareerInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   careerKeywordsList Method
    *
    *
    ***/
    public function careerKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerKeywords');

            $CareerKeywords= $this->CareerKeywords->find('all');

            $TotalItems= $CareerKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CareerKeywords as $CareerKeyword){

                    $keys['id']= $CareerKeyword->id;
					$keys['name']= $CareerKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   careerTargetMarketsList Method
    *
    *
    ***/
    public function careerTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerTargetMarkets');

            $CareerTargetMarkets= $this->CareerTargetMarkets->find('all');

            $TotalItems= $CareerTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CareerTargetMarkets as $CareerTargetMarket){

                    $keys['id']= $CareerTargetMarket->id;
					$keys['name']= $CareerTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addCareer method 
     *
     *
     *
     *
     ***/
    public function addCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            $userTimeZone = $this->WebNotification->getUserTimeZoneByIp();
        	date_default_timezone_set($userTimeZone);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('CareerAdvancements');
				$addBoardMembers = $this->CareerAdvancements->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->CareerUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->CareerUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->CareerUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->CareerUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->CareerAdvancements->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->CareerAdvancements->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveCareerFeeds($this->request->data['user_id'],'feeds_career_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

    /*  5>
     *  editCareer method 
     *
     *
     *
     *
     ***/
    public function editCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            $userTimeZone = $this->WebNotification->getUserTimeZoneByIp();
            date_default_timezone_set($userTimeZone);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('CareerAdvancements');
				$addfunds = $this->CareerAdvancements->newEntity(); 
				$this->CareerAdvancements->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['career_id'];

				$exists = $this->CareerAdvancements->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->CareerAdvancements->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->CareerUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->CareerUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->CareerUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->CareerUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->CareerAdvancements->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->CareerAdvancements->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

    /**  6>
    *    careerDetails Method
    *
    *
    ***/
    public function careerDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['career_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->CareerUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->CareerUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->CareerUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/career/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/career/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/career/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/career/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->CareerUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->CareerUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->CareerUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->CareerUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->CareerUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  7>
    *    myCareer Method
    *
    *
    ***/
    public function myCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CareerAdvancements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM career_keywords as KY INNER JOIN career_advancements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/career/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CareerUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CareerUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveCareerList Method
    *
    *
    ***/
    public function archiveCareerList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CareerAdvancements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM career_keywords as KY INNER JOIN career_advancements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>2,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>2,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>2,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>2,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/career/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CareerUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CareerUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateCareerList Method
    *
    *
    ***/
    public function deactivateCareerList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CareerAdvancements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM career_keywords as KY INNER JOIN career_advancements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>0,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id '=>$user_id, 'CareerAdvancements.status'=>0,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>0,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id'=>$user_id, 'CareerAdvancements.status'=>0,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id'=>$user_id,'CareerAdvancements.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/career/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CareerUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CareerUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findCareer Method
    *
    *
    ***/
    public function findCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CareerAdvancements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM career_keywords as KY INNER JOIN career_advancements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id !='=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id !='=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CareerAdvancements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id !='=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CareerAdvancements->find('all',
									                        ['conditions'=>
									                            [
									                                'CareerAdvancements.user_id !='=>$user_id, 'CareerAdvancements.status'=>1,

									                                'OR' =>[
									                                            ['CareerAdvancements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id !='=>$user_id,'CareerAdvancements.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CareerAdvancements->find('all',['conditions'=>['CareerAdvancements.user_id !='=>$user_id,'CareerAdvancements.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/career/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CareerUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CareerUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  11>
    *    archiveCareer Method
    *
    *
    ***/
    public function archiveCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['career_id'];

            	$res= $this->CareerAdvancements->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Career Advancement has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Career Advancement could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Career Advancement could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteCareer Method
    *
    *
    ***/
    public function deleteCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['career_id'];

            	$res= $this->CareerAdvancements->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Career Advancement has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Career Advancement could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Career Advancement could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateCareer Method
    *
    *
    ***/
    public function deactivateCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['career_id'];

            	$res= $this->CareerAdvancements->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Career Advancement has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Career Advancement could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Career Advancement could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateCareer Method
    *
    *
    ***/
    public function activateCareer()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['career_id'];

            	$res= $this->CareerAdvancements->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Career Advancement has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Career Advancement could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Career Advancement could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeCareer method 
     *
     *
     *
     *
     ***/
    public function likeCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('CareerDislikes');
					$likeExists= $this->CareerDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'career_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CareerDislikes->get($likeExists->id);
						$this->CareerDislikes->delete($entity);
					}

	                $this->loadModel('CareerLikes');
					$likefunds = $this->CareerLikes->newEntity(); 

					
	                $likefunds = $this->CareerLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CareerLikes->find('all',['conditions'=>['like_by'=>$likeBy,'career_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->CareerLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Career Advancement liked successfully.';
							$result['likes']= $this->CareerUpload->getLikeCount($fundId);
							$result['dislikes']= $this->CareerUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Career Advancement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Career Advancement.';
				echo json_encode($result);
            }
    }
 


    /*  16>
     *  disLikeCareer method 
     *
     *
     *
     *
     ***/
    public function disLikeCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('CareerLikes');
					$likeExists= $this->CareerLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'career_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CareerLikes->get($likeExists->id);
						$this->CareerLikes->delete($entity);
					}

	                $this->loadModel('CareerDislikes');
					$dislikefunds = $this->CareerDislikes->newEntity(); 

					
	                $dislikefunds = $this->CareerDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->CareerDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'career_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->CareerDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Career Advancement disliked successfully.';
							$result['dislikes']= $this->CareerUpload->getDislikeCount($fundId);
							$result['likes']= $this->CareerUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->CareerUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->CareerUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Career Advancement. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Career Advancement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Conference.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  careerLikeList method 
     *
     *
     *
     *
     ***/
    public function careerLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['career_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('CareerLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CareerLikes->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CareerLikes->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  careerDislikeList method 
     *
     *
     *
     *
     ***/
    public function careerDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['career_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('CareerDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CareerDislikes->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CareerDislikes->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Career Advancement dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followCareer method 
     *
     *
     *
     *
     ***/
    public function followCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('CareerFollowers');
					$FundFollowers = $this->CareerFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->CareerFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CareerFollowers->find('all',['conditions'=>['user_id'=>$followBy,'career_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->CareerFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveCareerFeeds($followBy,'feeds_career_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Career Advancement followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Career Advancement. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Career Advancement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Career Advancement.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowCareer method 
     *
     *
     *
     *
     ***/
    public function unfollowCareer()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('CareerFollowers');
					$likeExists= $this->CareerFollowers->find('all',['conditions'=>['user_id'=>$followBy,'career_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->CareerFollowers->get($likeExists->id);
						$this->CareerFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Career Advancement unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Career Advancement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Career Advancement.';
				echo json_encode($result);
            }
    }

        /*  21>
     *  careerCommitment method 
     *
     *
     *
     *
     ***/
    public function careerCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');
            $this->loadModel('CareerCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->CareerCommitments->newEntity(); 
	                $likefunds = $this->CareerCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CareerCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'career_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->CareerCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->CareerUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  careerUncommitment method 
     *
     *
     *
     *
     ***/
    public function careerUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerAdvancements');
            $this->loadModel('CareerCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['career_id'];

				$exists= $this->CareerAdvancements->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->CareerCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'career_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CareerCommitments->get($likeExists->id);
						$this->CareerCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->CareerUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  careerCommitmentList method 
     *
     *
     *
     *
     ***/
    public function careerCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CareerCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['career_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CareerCommitments->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CareerCommitments->find('all',['conditions'=>['career_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Career Advancement commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Career Advancement commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Self Improvement  ***********************//

    /**  1>
    *    selfimprovementInterestKeywordLists Method
    *
    *
    ***/
    public function selfimprovementInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfInterestKeywords');

            $SelfInterestKeywords= $this->SelfInterestKeywords->find('all');

            $TotalItems= $SelfInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SelfInterestKeywords as $SelfInterestKeyword){

                    $keys['id']= $SelfInterestKeyword->id;
					$keys['name']= $SelfInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   selfimprovementKeywordsList Method
    *
    *
    ***/
    public function selfimprovementKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfKeywords');

            $SelfKeywords= $this->SelfKeywords->find('all');

            $TotalItems= $SelfKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SelfKeywords as $SelfKeyword){

                    $keys['id']= $SelfKeyword->id;
					$keys['name']= $SelfKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   selfimprovementTargetMarketsList Method
    *
    *
    ***/
    public function selfimprovementTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfTargetMarkets');

            $SelfTargetMarkets= $this->SelfTargetMarkets->find('all');

            $TotalItems= $SelfTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($SelfTargetMarkets as $SelfTargetMarket){

                    $keys['id']= $SelfTargetMarket->id;
					$keys['name']= $SelfTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function addSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            
            $userTimeZone = $this->WebNotification->getUserTimeZoneByIp();
        	date_default_timezone_set($userTimeZone);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('SelfImprovements');
				$addBoardMembers = $this->SelfImprovements->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->SelfUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->SelfUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->SelfUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->SelfUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->SelfImprovements->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->SelfImprovements->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveImprovementFeeds($this->request->data['user_id'],'feeds_improvement_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result);
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

    /*  5>
     *  editSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function editSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $userTimeZone = $this->WebNotification->getUserTimeZoneByIp();
        	date_default_timezone_set($userTimeZone);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('SelfImprovements');
				$addfunds = $this->SelfImprovements->newEntity(); 
				$this->SelfImprovements->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['self_id'];

				$exists = $this->SelfImprovements->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->SelfImprovements->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->SelfUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->SelfUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->SelfUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->SelfUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->SelfImprovements->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->SelfImprovements->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    selfimprovementDetails Method
    *
    *
    ***/
    public function selfimprovementDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['self_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->SelfUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->SelfUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->SelfUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/self/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/self/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/self/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/self/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->SelfUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->SelfUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->SelfUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->SelfUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->SelfUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    mySelfimprovement Method
    *
    *
    ***/
    public function mySelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'SelfImprovements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM self_keywords as KY INNER JOIN self_improvements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/self/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SelfUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SelfUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveSelfimprovementList Method
    *
    *
    ***/
    public function archiveSelfimprovementList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'SelfImprovements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM self_keywords as KY INNER JOIN self_improvements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>2,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>2,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>2,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>2,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/self/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SelfUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SelfUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateSelfimprovementList Method
    *
    *
    ***/
    public function deactivateSelfimprovementList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'SelfImprovements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM self_keywords as KY INNER JOIN self_improvements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>0,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id '=>$user_id, 'SelfImprovements.status'=>0,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>0,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id'=>$user_id, 'SelfImprovements.status'=>0,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id'=>$user_id,'SelfImprovements.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/self/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SelfUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SelfUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findSelfimprovement Method
    *
    *
    ***/
    public function findSelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'SelfImprovements.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM self_keywords as KY INNER JOIN self_improvements as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id !='=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id !='=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['SelfImprovements.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id !='=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->SelfImprovements->find('all',
									                        ['conditions'=>
									                            [
									                                'SelfImprovements.user_id !='=>$user_id, 'SelfImprovements.status'=>1,

									                                'OR' =>[
									                                            ['SelfImprovements.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id !='=>$user_id,'SelfImprovements.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->SelfImprovements->find('all',['conditions'=>['SelfImprovements.user_id !='=>$user_id,'SelfImprovements.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/self/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->SelfUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->SelfUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveSelfimprovement Method
    *
    *
    ***/
    public function archiveSelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['self_id'];

            	$res= $this->SelfImprovements->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Self Improvement has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Self Improvement could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Self Improvement could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteSelfimprovement Method
    *
    *
    ***/
    public function deleteSelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['self_id'];

            	$res= $this->SelfImprovements->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Self Improvement has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Self Improvement could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Self Improvement could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateSelfimprovement Method
    *
    *
    ***/
    public function deactivateSelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['self_id'];

            	$res= $this->SelfImprovements->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Self Improvement has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Self Improvement could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Self Improvement could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateSelfimprovement Method
    *
    *
    ***/
    public function activateSelfimprovement()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['self_id'];

            	$res= $this->SelfImprovements->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Self Improvement has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Self Improvement could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Self Improvement could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }



    /*  15>
     *  likeSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function likeSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('SelfDislikes');
					$likeExists= $this->SelfDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'self_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SelfDislikes->get($likeExists->id);
						$this->SelfDislikes->delete($entity);
					}

	                $this->loadModel('SelfLikes');
					$likefunds = $this->SelfLikes->newEntity(); 

					
	                $likefunds = $this->SelfLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SelfLikes->find('all',['conditions'=>['like_by'=>$likeBy,'self_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->SelfLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Self Improvement liked successfully.';
							$result['likes']= $this->SelfUpload->getLikeCount($fundId);
							$result['dislikes']= $this->SelfUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Self Improvement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Self Improvement.';
				echo json_encode($result);
            }
    }
 


    /*  16>
     *  disLikeSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function disLikeSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('SelfLikes');
					$likeExists= $this->SelfLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'self_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SelfLikes->get($likeExists->id);
						$this->SelfLikes->delete($entity);
					}

	                $this->loadModel('SelfDislikes');
					$dislikefunds = $this->SelfDislikes->newEntity(); 

					
	                $dislikefunds = $this->SelfDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->SelfDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'self_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->SelfDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Self Improvement disliked successfully.';
							$result['dislikes']= $this->SelfUpload->getDislikeCount($fundId);
							$result['likes']= $this->SelfUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->SelfUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->SelfUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Self Improvement. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Self Improvement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Conference.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  selfimprovementLikeList method 
     *
     *
     *
     *
     ***/
    public function selfimprovementLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['self_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('SelfLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SelfLikes->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SelfLikes->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  selfimprovementDislikeList method 
     *
     *
     *
     *
     ***/
    public function selfimprovementDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['self_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('SelfDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SelfDislikes->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SelfDislikes->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Self Improvement dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function followSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('SelfFollowers');
					$FundFollowers = $this->SelfFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->SelfFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SelfFollowers->find('all',['conditions'=>['user_id'=>$followBy,'self_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->SelfFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveImprovementFeeds($followBy,'feeds_improvement_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Self Improvement followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Self Improvement. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Self Improvement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Self Improvement.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowSelfimprovement method 
     *
     *
     *
     *
     ***/
    public function unfollowSelfimprovement()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('SelfFollowers');
					$likeExists= $this->SelfFollowers->find('all',['conditions'=>['user_id'=>$followBy,'self_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->SelfFollowers->get($likeExists->id);
						$this->SelfFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Self Improvement unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Self Improvement.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Self Improvement.';
				echo json_encode($result);
            }
    }

        /*  21>
     *  selfimprovementCommitment method 
     *
     *
     *
     *
     ***/
    public function selfimprovementCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');
            $this->loadModel('SelfCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->SelfCommitments->newEntity(); 
	                $likefunds = $this->SelfCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->SelfCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'self_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->SelfCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->SelfUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  selfimprovementUncommitment method 
     *
     *
     *
     *
     ***/
    public function selfimprovementUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfImprovements');
            $this->loadModel('SelfCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['self_id'];

				$exists= $this->SelfImprovements->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->SelfCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'self_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->SelfCommitments->get($likeExists->id);
						$this->SelfCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->SelfUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  selfimprovementCommitmentList method 
     *
     *
     *
     *
     ***/
    public function selfimprovementCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('SelfCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['self_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->SelfCommitments->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->SelfCommitments->find('all',['conditions'=>['self_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Self Improvement commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Self Improvement commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Conference ***********************//

    /**  1>
    *    ConferenceInterestKeywordLists Method
    *
    *
    ***/
    public function conferenceInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConferenceInterestKeywords');

            $ConferenceInterestKeywords= $this->ConferenceInterestKeywords->find('all');

            $TotalItems= $ConferenceInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ConferenceInterestKeywords as $ConferenceInterestKeyword){

                    $keys['id']= $ConferenceInterestKeyword->id;
					$keys['name']= $ConferenceInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   ConferenceKeywordsList Method
    *
    *
    ***/
    public function conferenceKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConferenceKeywords');

            $ConferenceKeywords= $this->ConferenceKeywords->find('all');

            $TotalItems= $ConferenceKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ConferenceKeywords as $ConferenceKeyword){

                    $keys['id']= $ConferenceKeyword->id;
					$keys['name']= $ConferenceKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   ConferenceTargetMarketsList Method
    *
    *
    ***/
    public function conferenceTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConferenceTargetMarkets');

            $ConferenceTargetMarkets= $this->ConferenceTargetMarkets->find('all');

            $TotalItems= $ConferenceTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ConferenceTargetMarkets as $ConferenceTargetMarket){

                    $keys['id']= $ConferenceTargetMarket->id;
					$keys['name']= $ConferenceTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addConference method 
     *
     *
     *
     *
     ***/
    public function addConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Conferences');
				$addBoardMembers = $this->Conferences->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->ConferenceUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->ConferenceUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->ConferenceUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->ConferenceUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Conferences->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Conferences->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveConferenceFeeds($this->request->data['user_id'],'feeds_conference_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

    /*  5>
     *  editConference method 
     *
     *
     *
     *
     ***/
    public function editConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Conferences');
				$addfunds = $this->Conferences->newEntity(); 
				$this->Conferences->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['conference_id'];

				$exists = $this->Conferences->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Conferences->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->ConferenceUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->ConferenceUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->ConferenceUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->ConferenceUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Conferences->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Conferences->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

    /**  6>
    *    ConferenceDetails Method
    *
    *
    ***/
    public function conferenceDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['conference_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Conferences->find('all',['conditions'=>['Conferences.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->ConferenceUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->ConferenceUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->ConferenceUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/conference/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/conference/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/conference/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/conference/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->ConferenceUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->ConferenceUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->ConferenceUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->ConferenceUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->ConferenceUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  7>
    *    myConference Method
    *
    *
    ***/
    public function myConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Conferences.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM conference_keywords as KY INNER JOIN Conferences as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/conference/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConferenceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConferenceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveConferenceList Method
    *
    *
    ***/
    public function archiveConferenceList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Conferences.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM conference_keywords as KY INNER JOIN conferences as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>2,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>2,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>2,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>2,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/conference/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConferenceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConferenceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateConferenceList Method
    *
    *
    ***/
    public function deactivateConferenceList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Conferences.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM conference_keywords as KY INNER JOIN conferences as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>0,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id '=>$user_id, 'Conferences.status'=>0,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>0,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id'=>$user_id, 'Conferences.status'=>0,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Conferences->find('all',['conditions'=>['Conferences.user_id'=>$user_id,'Conferences.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/conference/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConferenceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConferenceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findConference Method
    *
    *
    ***/
    public function findConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Conferences.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM conference_keywords as KY INNER JOIN conferences as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id !='=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id !='=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Conferences.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id !='=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Conferences->find('all',
									                        ['conditions'=>
									                            [
									                                'Conferences.user_id !='=>$user_id, 'Conferences.status'=>1,

									                                'OR' =>[
									                                            ['Conferences.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Conferences->find('all',['conditions'=>['Conferences.user_id !='=>$user_id,'Conferences.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Conferences->find('all',['conditions'=>['Conferences.user_id !='=>$user_id,'Conferences.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/conference/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConferenceUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConferenceUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveConference Method
    *
    *
    ***/
    public function archiveConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['conference_id'];

            	$res= $this->Conferences->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Conference has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Conference could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Conference could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['conference_id'];

            	$res= $this->Conferences->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Conference has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Conference could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Conference could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateConference Method
    *
    *
    ***/
    public function deactivateConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['conference_id'];

            	$res= $this->Conferences->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Conference has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Conference could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Conference could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateConference Method
    *
    *
    ***/
    public function activateConference()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['conference_id'];

            	$res= $this->Conferences->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Conference has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Conference could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Conference could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


   /*  15>
     *  likeConference method 
     *
     *
     *
     *
     ***/
    public function likeConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('ConferenceDislikes');
					$likeExists= $this->ConferenceDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'conference_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConferenceDislikes->get($likeExists->id);
						$this->ConferenceDislikes->delete($entity);
					}

	                $this->loadModel('ConferenceLikes');
					$likefunds = $this->ConferenceLikes->newEntity(); 

					
	                $likefunds = $this->ConferenceLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConferenceLikes->find('all',['conditions'=>['like_by'=>$likeBy,'conference_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->ConferenceLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Conference liked successfully.';
							$result['likes']= $this->ConferenceUpload->getLikeCount($fundId);
							$result['dislikes']= $this->ConferenceUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Conference.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Conference.';
				echo json_encode($result);
            }
    }
 


    /*  16>
     *  disLikeConference method 
     *
     *
     *
     *
     ***/
    public function disLikeConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('ConferenceLikes');
					$likeExists= $this->ConferenceLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'conference_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConferenceLikes->get($likeExists->id);
						$this->ConferenceLikes->delete($entity);
					}

	                $this->loadModel('ConferenceDislikes');
					$dislikefunds = $this->ConferenceDislikes->newEntity(); 

					
	                $dislikefunds = $this->ConferenceDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->ConferenceDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'conference_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->ConferenceDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Conference disliked successfully.';
							$result['dislikes']= $this->ConferenceUpload->getDislikeCount($fundId);
							$result['likes']= $this->ConferenceUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->ConferenceUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->ConferenceUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Conference. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Conference.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Conference.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  ConferenceLikeList method 
     *
     *
     *
     *
     ***/
    public function conferenceLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['conference_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ConferenceLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ConferenceLikes->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ConferenceLikes->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  ConferenceDislikeList method 
     *
     *
     *
     *
     ***/
    public function conferenceDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['conference_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ConferenceDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ConferenceDislikes->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ConferenceDislikes->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Conference dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followConference method 
     *
     *
     *
     *
     ***/
    public function followConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('ConferenceFollowers');
					$FundFollowers = $this->ConferenceFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->ConferenceFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConferenceFollowers->find('all',['conditions'=>['user_id'=>$followBy,'conference_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->ConferenceFollowers->save($likefunds);
	                    if ($resultSave){
	                    	//Save Feeds
                            $this->Feeds->saveConferenceFeeds($followBy,'feeds_conference_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Conference followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Conference. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Conference.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Conference.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowConference method 
     *
     *
     *
     *
     ***/
    public function unfollowConference()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('ConferenceFollowers');
					$likeExists= $this->ConferenceFollowers->find('all',['conditions'=>['user_id'=>$followBy,'conference_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->ConferenceFollowers->get($likeExists->id);
						$this->ConferenceFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Conference unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Conference.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Conference.';
				echo json_encode($result);
            }
    }

        /*  21>
     *  ConferenceCommitment method 
     *
     *
     *
     *
     ***/
    public function conferenceCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');
            $this->loadModel('ConferenceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->ConferenceCommitments->newEntity(); 
	                $likefunds = $this->ConferenceCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConferenceCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'conference_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->ConferenceCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->ConferenceUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  ConferenceUncommitment method 
     *
     *
     *
     *
     ***/
    public function conferenceUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Conferences');
            $this->loadModel('ConferenceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['conference_id'];

				$exists= $this->Conferences->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->ConferenceCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'conference_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConferenceCommitments->get($likeExists->id);
						$this->ConferenceCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->ConferenceUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  ConferenceCommitmentList method 
     *
     *
     *
     *
     ***/
    public function conferenceCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConferenceCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['conference_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ConferenceCommitments->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ConferenceCommitments->find('all',['conditions'=>['conference_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Conference commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Conference commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Meetup ***********************//

    /**  1>
    *    MeetupInterestKeywordLists Method
    *
    *
    ***/
    public function meetupInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('MeetupInterestKeywords');

            $MeetupInterestKeywords= $this->MeetupInterestKeywords->find('all');

            $TotalItems= $MeetupInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($MeetupInterestKeywords as $MeetupInterestKeyword){

                    $keys['id']= $MeetupInterestKeyword->id;
					$keys['name']= $MeetupInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   MeetupKeywordsList Method
    *
    *
    ***/
    public function meetupKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('MeetupKeywords');

            $MeetupKeywords= $this->MeetupKeywords->find('all');

            $TotalItems= $MeetupKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($MeetupKeywords as $MeetupKeyword){

                    $keys['id']= $MeetupKeyword->id;
					$keys['name']= $MeetupKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   MeetupTargetMarketsList Method
    *
    *
    ***/
    public function meetupTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('MeetupTargetMarkets');

            $MeetupTargetMarkets= $this->MeetupTargetMarkets->find('all');

            $TotalItems= $MeetupTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($MeetupTargetMarkets as $MeetupTargetMarket){

                    $keys['id']= $MeetupTargetMarket->id;
					$keys['name']= $MeetupTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  4>
     *  addMeetup method 
     *
     *
     *
     *
     ***/
    public function addMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Meetups');
                $this->loadModel('BusinessUserNetworks');
            	$this->loadModel('UserConnections');
            	$this->loadModel('UserTokens');

				$addBoardMembers = $this->Meetups->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->MeetupUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->MeetupUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->MeetupUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->MeetupUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Meetups->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Meetups->save($addBoardMembers);
                    if ($resultSave){
                    	$lastInsertId =$resultSave->id; 
                    	//Save Feeds
                        $this->Feeds->saveMeetupFeeds($this->request->data['user_id'],'feeds_meetup_added',$resultSave->id);

                        // Notification Start 
                        $lastInsertId =$resultSave->id;
                        $user_id = $this->request->data['user_id'];
		                $meetupOwnerName = $this->Contractor->contractorName($user_id);
		                $message = $this->Contractor->contractorName($user_id)." created ".$this->request->data['title'];


                        // Send notification to the user

		                if($this->request->data['send_notifications']== 1){

		                	$this->loadModel('BusinessUserNetworks');
		                	$this->loadModel('UserTokens');

			                $userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['user_id' =>$user_id]])->toArray();

			                $userTokens =[];
			                foreach($userConnData as $userInfo){
			                	
			                	$userTokens[] = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$userInfo['connected_to']]])->select(['access_token','device_type'])->toArray();

			            	} 

			            	
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userTokens):
								
								foreach($userTokens as $userToken){
									
									foreach($userToken as $single_token):
									
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
				                  			if($length >60){
				                    			$finalIosTokens[] = $single_token['access_token'];
				                    		}
										endif;   
										
									endforeach;
								}	
							endif;

							if(!empty($finalAndroidTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'add_meetup');
							
							endif;
							if(!empty($finalIosTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'add_meetup');
								
								
							endif;
							
							//saving the notification
									
							$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
							
							$link= Router::url(['controller' =>'Meetups', 'action' => 'view',base64_encode($lastInsertId)]);
							
							$result = $this->Contractor->saveNotification($this->request->data['user_id'],$this->request->data['user_id'],'Added_meetup',"has added a meetup ".$this->Contractor->meetupName($lastInsertId)."</strong>",$link,json_encode($values));
			                	//pr($userConnData);

		                }else{
		                	$this->loadModel('UserConnections');
		                	$this->loadModel('UserTokens');

		                	$userConnections= $this->UserConnections->find('all',['conditions'=>['connection_by' =>$user_id,'status'=>1]])->toArray();
		                	
		                	$userTokens =[];

			                foreach($userConnections as $userInfo){
			                	
			                	$userTokens[] = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$userInfo['connection_to']]])->select(['access_token','device_type'])->toArray();

			            	} 

			            	
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userTokens):
								
								foreach($userTokens as $userToken){
									
									foreach($userToken as $single_token):
									
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
				                  			if($length >60){
				                    			$finalIosTokens[] = $single_token['access_token'];
				                    		}
										endif;   
										
									endforeach;
								}	
							endif;

							if(!empty($finalAndroidTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'add_meetup');
							
							endif;
							if(!empty($finalIosTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'add_meetup');
								
								
							endif; 
							
							//saving the notification
									
							$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
							
							$link= Router::url(['controller' =>'Meetups', 'action' => 'view',base64_encode($lastInsertId)]);
							
							$result = $this->Contractor->saveNotification($this->request->data['user_id'],$this->request->data['user_id'],'Added_meetup',"has added a meetup ".$this->Contractor->meetupName($lastInsertId)."</strong>",$link,json_encode($values));
			                	//pr($userConnData);
		                	//pr($userConnections);
		                } 
               			// Notification ends here 
                
                        
                        $saveRslt['code']=200;
						$saveRslt['message']= 'Saved successfully.';
						echo json_encode($saveRslt);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								//$errorDataArray[$key] = $message; 
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						//$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{

            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

         /*  5>
     *  editMeetup method 
     *
     *
     *
     *
     ***/
    public function editMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//pr($this->request->data); die('data');

                $this->loadModel('Meetups');

				$addfunds = $this->Meetups->newEntity(); 
				$this->Meetups->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['meetup_id'];

				$exists = $this->Meetups->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Meetups->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->MeetupUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->MeetupUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->MeetupUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->MeetupUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Meetups->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Meetups->save($addfunds);
                    
                    if($resultSave){

                    	/* Notification Start*/
                    	$lastInsertId =$beta_id;
                        $user_id = $this->request->data['user_id'];
		                $meetupOwnerName = $this->Contractor->contractorName($user_id);
		                $ccN =$this->Contractor->contractorName($user_id);
		                $message = trim($ccN)." has edited ".$this->request->data['title'];

                        // Send notification to the user
		                if($this->request->data['send_notifications']== 1){

		                	$this->loadModel('BusinessUserNetworks');
		                	$this->loadModel('UserTokens');
			                $userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['user_id' =>$user_id]])->toArray();

			                foreach($userConnData as $userInfo){
			                	
			                	$userTokens[] = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$userInfo['connected_to']]])->select(['access_token','device_type'])->toArray();

			            	} 

			            	
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userTokens):
								
								foreach($userTokens as $userToken){
									
									foreach($userToken as $single_token):
									
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
				                  			if($length >60){
				                    			$finalIosTokens[] = $single_token['access_token'];
				                    		}
										endif;   
										
									endforeach;
								}	
							endif;

							if(!empty($finalAndroidTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'add_meetup');
							
							endif;
							if(!empty($finalIosTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'add_meetup');
								
								
							endif;
							
							//saving the notification
									
							$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
							
							$link= Router::url(['controller' =>'Meetups', 'action' => 'view',base64_encode($lastInsertId)]);
							
							$result = $this->Contractor->saveNotification($this->request->data['user_id'],$this->request->data['user_id'],'Added_meetup',"has added a meetup ".$this->Contractor->meetupName($lastInsertId)."</strong>",$link,json_encode($values));
			                	//pr($userConnData);

		                }else{

		                	$this->loadModel('UserConnections');
		                	$this->loadModel('UserTokens');
		                	$userConnections= $this->UserConnections->find('all',['conditions'=>['connection_by' =>$user_id,'status'=>1]])->toArray();

			                foreach($userConnections as $userInfo){
			                	
			                	$userTokens[] = $this->UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>$userInfo['connection_to']]])->select(['access_token','device_type'])->toArray();

			            	} 

			            	
							$finalAndroidTokens = [];
							$finalIosTokens = [];
							if($userTokens):
								
								foreach($userTokens as $userToken){
									
									foreach($userToken as $single_token):
									
										if($single_token['device_type']=='android'):
											$finalAndroidTokens[] = $single_token['access_token'];
										else:
											//$finalIosTokens[] = $single_token['access_token'];
											$length = strlen($single_token['access_token']);
				                  			if($length >60){
				                    			$finalIosTokens[] = $single_token['access_token'];
				                    		}
										endif;   
										
									endforeach;
								}	
							endif;

							if(!empty($finalAndroidTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendAndroidPushNotification($finalAndroidTokens,$message,$values,'add_meetup');
							
							endif;
							if(!empty($finalIosTokens)):
								
								$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
								
								$this->Push->sendIphonePushMessage($finalIosTokens,$message,$values,'add_meetup');
								
								
							endif;
							
							//saving the notification
									
							$values = ['meetup_id'=>$lastInsertId,
										   'meetup_name'=>$this->request->data['title']];
							
							$link= Router::url(['controller' =>'Meetups', 'action' => 'view',base64_encode($lastInsertId)]);
							
							$result = $this->Contractor->saveNotification($this->request->data['user_id'],$this->request->data['user_id'],'Added_meetup',"has added a meetup ".$this->Contractor->meetupName($lastInsertId)."</strong>",$link,json_encode($values));
			                	//pr($userConnData);
		                	//pr($userConnections);
		                }

                    	/* Notification Ends*/

                        $saveRslt['code']=200;
						$saveRslt['message']= 'Updated successfully.';
						echo json_encode($saveRslt);

                    }else{

                        $errors = $addfunds->errors();	
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $message;
						//$result['errors']= $errorDataArray;
						echo json_encode($result);
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

    /**  6>
    *    MeetupDetails Method
    *
    *
    ***/
    public function meetupDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');
            $this->loadModel('Forums');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['meetup_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Meetups->find('all',['conditions'=>['Meetups.id'=>$fund_id]])->contain(['Users'])->first();


	        		if(!empty($fundetail))
	        		{
	        			$forum_id = $fundetail->forum_id;
	        			$forumDetail= $this->Forums->find('all',['conditions'=>['id'=>$forum_id]])->first();
	        			//pr($forumDetail); die;

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;

						$result['forum_id']= @$fundetail->forum_id? (string)$fundetail->forum_id:"";
						$result['forum_name']= @$forumDetail?$forumDetail->title:"";

						if($fundetail->access_level != null){

							$result['access_level']= (string)$fundetail->access_level;
						}else{
							$result['access_level']='';
						}	

						if($fundetail->send_notifications != null){

							$result['send_notifications']= (string)$fundetail->send_notifications;
						}else{
							$result['send_notifications']='';
						}
						
						

						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->MeetupUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->MeetupUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->MeetupUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/meetup/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/meetup/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/meetup/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/meetup/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->MeetupUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->MeetupUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->MeetupUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->MeetupUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->MeetupUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myMeetup Method
    *
    *
    ***/
    public function myMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Meetups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM meetup_keywords as KY INNER JOIN meetups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>1,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>1,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>1,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>1,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/meetup/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveMeetupList Method
    *
    *
    ***/
    public function archiveMeetupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Meetups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM meetup_keywords as KY INNER JOIN meetups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>2,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>2,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>2,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>2,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/meetup/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateMeetupList Method
    *
    *
    ***/
    public function deactivateMeetupList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Meetups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM meetup_keywords as KY INNER JOIN meetups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>0,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id '=>$user_id, 'Meetups.status'=>0,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Meetups.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>0,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
									                        ['conditions'=>
									                            [
									                                'Meetups.user_id'=>$user_id, 'Meetups.status'=>0,

									                                'OR' =>[
									                                            ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id'=>$user_id,'Meetups.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/meetup/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findMeetup Method
    *
    *
    ***/
    public function findMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');
            $this->loadModel('BusinessUserNetworks');
            $this->loadModel('UserConnections');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Meetups.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM meetup_keywords as KY INNER JOIN meetups as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	/*$myFundsLists= $this->Meetups->find('all',
							['conditions'=>
								['Meetups.user_id !='=>$user_id,
								 'Meetups.status'=>1,
								 'OR' =>[
									['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									['Meetups.id IN' =>$startupIDs]
									]        
								]
							])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
							['conditions'=>
								['Meetups.user_id !='=>$user_id,
								 'Meetups.status'=>1,
								 'OR' =>[
									['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
									['Meetups.id IN' =>$startupIDs]
									]        
								]
							])->contain(['Users']),$config);*/

	                    $userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$user_id]])->first();
                       
                        $userConnections= $this->UserConnections->find('all',['conditions'=>['connection_to' =>$user_id,'status'=>1]])->first();

                        /*if($userConnData && !$userConnections){
                            
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>1,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']);
                                        
                        	$TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>1,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']),$config);

                        }elseif($userConnections && !$userConnData){
                           
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>2,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>2,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']),$config);

                        }else{
                            //echo "in";
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']),$config);
                        }*/

                        	$myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            //'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id, 
                                            'Meetups.status'=>1,
                                            //'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%'],
                                                ['Meetups.id IN' =>$startupIDs]
                                                ]        
                                                        ]
                                        ])->contain(['Users']),$config);
                    }else{

	                	/*$myFundsLists= $this->Meetups->find('all',
							['conditions'
								=>['Meetups.user_id !='=>$user_id, 'Meetups.status'=>1,
									'OR' =>[
										['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									]
								]

							])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
							['conditions'
								=>['Meetups.user_id !='=>$user_id,
								 'Meetups.status'=>1,
								 'OR' =>[
								 		['Meetups.title LIKE' => '%'.$searchKeyword.'%']
									    ]        
									]
							])->contain(['Users']),$config);*/

						$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$user_id]])->first();
                        //pr($userConnData); die;

                        $userConnections= $this->UserConnections->find('all',['conditions'=>['connection_to' =>$user_id,'status'=>1]])->first();

                        /*if($userConnData && !$userConnections){
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>1,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>1,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']),$config);            
                        
                        }elseif($userConnections && !$userConnData){
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>2,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>2,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']),$config);

                        }else{
                            //echo "in"; die;
                            $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']),$config);
                        }*/

                        $myFundsLists= $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            //'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']);

                            $TotalItems= $myFundsLists->count();

		                    $myFundsLists= $this->Paginator->paginate( $this->Meetups->find('all',
                                        ['conditions'=>[
                                            'Meetups.user_id !='=>$user_id,
                                            'Meetups.status'=>1,
                                            //'Meetups.access_level'=>3,
                                            'OR' =>[
                                                ['Meetups.title LIKE' => '%'.$searchKeyword.'%']
                                                    ]        
                                            ]
                                        ])->contain(['Users']),$config);	

							
	                }
                }else{

		            /*$myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1]])->contain(['Users']), $config);*/


		            $userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$user_id]])->first();

					$userConnections= $this->UserConnections->find('all',['conditions'=>['connection_to' =>$user_id,'status'=>1]])->first();

					/*if($userConnData && !$userConnections){ 

						//die('1');
						$myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>1]])->contain(['Users']);

						$TotalItems= $myFundsLists->count();

		            	$myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>1]])->contain(['Users']), $config);
					
					}elseif($userConnections && !$userConnData){ 
						//die('2');

						$myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>2]])->contain(['Users']);

						$TotalItems= $myFundsLists->count();

		            	$myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>2]])->contain(['Users']), $config);

					}else{ 
						//die('3');

						$myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>3]])->contain(['Users']);

						$TotalItems= $myFundsLists->count();

		            	$myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1,'Meetups.access_level'=>3]])->contain(['Users']), $config);
					}*/

					$myFundsLists= $this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1]])->contain(['Users']);

					$TotalItems= $myFundsLists->count();

	            	$myFundsLists = $this->Paginator->paginate($this->Meetups->find('all',['conditions'=>['Meetups.user_id !='=>$user_id,'Meetups.status'=>1]])->contain(['Users']), $config);
	        	}



	        	if(!empty($TotalItems) &&  $TotalItems != 0){
					
					$i = 0;
						
					$finalConnections = [];
					foreach($myFundsLists as $myFundsList){

						if($myFundsList->access_level == 1)
						{	
							$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>
									[ 'OR'=>[	 
												['user_id'=>$myFundsList->user_id,
												 'connected_to' =>$user_id
												],
												['user_id'=>$user_id,
												 'connected_to'=>$myFundsList->user_id
												]
											]
									]
								])->first();
							//print_r($userConnData); die;
							if(!empty($userConnData))
							{

								$keys['id']= $myFundsList->id;
								$keys['title']= $myFundsList->title;
								$keys['start_date']= $myFundsList->start_date;
								$keys['end_date']= $myFundsList->end_date;
								//$keys['close_date']= $myFundsList->close_date;
								$keys['description']= $myFundsList->description;

								$keys['forum_id']= $myFundsList->forum_id;
								$keys['access_level']= $myFundsList->access_level;
								$keys['send_notifications']= $myFundsList->send_notifications;
								

								if(!empty($myFundsList->image)){
									$keys['image']= "/img/meetup/".$myFundsList->image;
								}else{
									$keys['image']= '';
								}

								$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
								$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
								$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
								$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
								$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

								$finalConnections[] = $keys;
								$i++;
							}

						}else if($myFundsList->access_level == 2){

							$userConnections= $this->UserConnections->find('all',['conditions'=>
												['status'=>1,
													'OR'=>[	 
																['connection_to'=>$myFundsList->user_id,
																 'connection_by' =>$user_id
																],
																['connection_to'=>$user_id,
																 'connection_by'=>$myFundsList->user_id
																]
															]	
												]
										])->first();
							if(!empty($userConnections))
							{
								$keys['id']= $myFundsList->id;
								$keys['title']= $myFundsList->title;
								$keys['start_date']= $myFundsList->start_date;
								$keys['end_date']= $myFundsList->end_date;
								//$keys['close_date']= $myFundsList->close_date;
								$keys['description']= $myFundsList->description;

								$keys['forum_id']= $myFundsList->forum_id;
								$keys['access_level']= $myFundsList->access_level;
								$keys['send_notifications']= $myFundsList->send_notifications;
								

								if(!empty($myFundsList->image)){
									$keys['image']= "/img/meetup/".$myFundsList->image;
								}else{
									$keys['image']= '';
								}

								$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
								$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
								$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
								$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
								$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

								$finalConnections[] = $keys;
								$i++;
							}
						}else{
							$keys['id']= $myFundsList->id;
							$keys['title']= $myFundsList->title;
							$keys['start_date']= $myFundsList->start_date;
							$keys['end_date']= $myFundsList->end_date;
							//$keys['close_date']= $myFundsList->close_date;
							$keys['description']= $myFundsList->description;

							$keys['forum_id']= $myFundsList->forum_id;
							$keys['access_level']= $myFundsList->access_level;
							$keys['send_notifications']= $myFundsList->send_notifications;
							

							if(!empty($myFundsList->image)){
								$keys['image']= "/img/meetup/".$myFundsList->image;
							}else{
								$keys['image']= '';
							}

							$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
							$keys['likes']= $this->MeetupUpload->getLikeCount($myFundsList->id);
							$keys['dislikes']= $this->MeetupUpload->getDislikeCount($myFundsList->id);
							$keys['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($myFundsList->id,$user_id);
							$keys['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($myFundsList->id,$user_id);

							$finalConnections[] = $keys;
							$i++;
						}
					}	
							

					
						if($i != 0){
							$result['code']=200;
							$result['TotalItems']=$i;
							$result['result_list']= @$finalConnections;
							echo json_encode($result);
						}else{
							$result['code']=404;
							$result['message']= 'No list found.';
							echo json_encode($result);
						}	

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  11>
    *    archiveMeetup Method
    *
    *
    ***/
    public function archiveMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['meetup_id'];

            	$res= $this->Meetups->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Meetup has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Meetup could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Meetup could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['meetup_id'];

            	$res= $this->Meetups->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Meetup has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Meetup could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Meetup could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateMeetup Method
    *
    *
    ***/
    public function deactivateMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['meetup_id'];

            	$res= $this->Meetups->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Meetup has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Meetup could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Meetup could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateMeetup Method
    *
    *
    ***/
    public function activateMeetup()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['meetup_id'];

            	$res= $this->Meetups->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Meetup has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Meetup could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Meetup could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


   /*  15>
     *  likeMeetup method 
     *
     *
     *
     *
     ***/
    public function likeMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('MeetupDislikes');
					$likeExists= $this->MeetupDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'meetup_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->MeetupDislikes->get($likeExists->id);
						$this->MeetupDislikes->delete($entity);
					}

	                $this->loadModel('MeetupLikes');
					$likefunds = $this->MeetupLikes->newEntity(); 

					
	                $likefunds = $this->MeetupLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->MeetupLikes->find('all',['conditions'=>['like_by'=>$likeBy,'meetup_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->MeetupLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Meetup liked successfully.';
							$result['likes']= $this->MeetupUpload->getLikeCount($fundId);
							$result['dislikes']= $this->MeetupUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Meetup.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Meetup.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeMeetup method 
     *
     *
     *
     *
     ***/
    public function disLikeMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('MeetupLikes');
					$likeExists= $this->MeetupLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'meetup_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->MeetupLikes->get($likeExists->id);
						$this->MeetupLikes->delete($entity);
					}

	                $this->loadModel('MeetupDislikes');
					$dislikefunds = $this->MeetupDislikes->newEntity(); 

					
	                $dislikefunds = $this->MeetupDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->MeetupDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'meetup_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->MeetupDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Meetup disliked successfully.';
							$result['dislikes']= $this->MeetupUpload->getDislikeCount($fundId);
							$result['likes']= $this->MeetupUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->MeetupUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->MeetupUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Meetup. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Meetup.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Meetup.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  MeetupLikeList method 
     *
     *
     *
     *
     ***/
    public function meetupLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['meetup_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('MeetupLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->MeetupLikes->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->MeetupLikes->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  MeetupDislikeList method 
     *
     *
     *
     *
     ***/
    public function meetupDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['meetup_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('MeetupDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->MeetupDislikes->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->MeetupDislikes->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Meetup dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followMeetup method 
     *
     *
     *
     *
     ***/
    public function followMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('MeetupFollowers');
					$FundFollowers = $this->MeetupFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->MeetupFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->MeetupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'meetup_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->MeetupFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveMeetupFeeds($followBy,'feeds_meetup_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Meetup followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Meetup. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Meetup.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Meetup.';
				echo json_encode($result);
            }
    }

    /*  20> 
     *  unfollowMeetup method 
     *
     *
     *
     *
     ***/
    public function unfollowMeetup()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('MeetupFollowers');
					$likeExists= $this->MeetupFollowers->find('all',['conditions'=>['user_id'=>$followBy,'meetup_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->MeetupFollowers->get($likeExists->id);
						$this->MeetupFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Meetup unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Meetup.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Meetup.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  MeetupCommitment method 
     *
     *
     *
     *
     ***/
    public function meetupCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');
            $this->loadModel('MeetupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->MeetupCommitments->newEntity(); 
	                $likefunds = $this->MeetupCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->MeetupCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'meetup_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->MeetupCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->MeetupUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  MeetupUncommitment method 
     *
     *
     *
     *
     ***/
    public function meetupUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Meetups');
            $this->loadModel('MeetupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['meetup_id'];

				$exists= $this->Meetups->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->MeetupCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'meetup_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->MeetupCommitments->get($likeExists->id);
						$this->MeetupCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->MeetupUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  MeetupCommitmentList method 
     *
     *
     *
     *
     ***/
    public function meetupCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('MeetupCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['meetup_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->MeetupCommitments->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->MeetupCommitments->find('all',['conditions'=>['meetup_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Meetup commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Meetup commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Demo Day ***********************//

    /**  1>
    *    ConferenceInterestKeywordLists Method
    *
    *
    ***/
    public function demodayInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('DemodayInterestKeywords');

            $DemodayInterestKeywords= $this->DemodayInterestKeywords->find('all');

            $TotalItems= $DemodayInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($DemodayInterestKeywords as $DemodayInterestKeyword){

                    $keys['id']= $DemodayInterestKeyword->id;
					$keys['name']= $DemodayInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   ConferenceKeywordsList Method
    *
    *
    ***/
    public function demodayKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('DemodayKeywords');

            $DemodayKeywords= $this->DemodayKeywords->find('all');

            $TotalItems= $DemodayKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($DemodayKeywords as $DemodayKeyword){

                    $keys['id']= $DemodayKeyword->id;
					$keys['name']= $DemodayKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   DemodayTargetMarketsList Method
    *
    *
    ***/
    public function demodayTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('DemodayTargetMarkets');

            $DemodayTargetMarkets= $this->DemodayTargetMarkets->find('all');

            $TotalItems= $DemodayTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($DemodayTargetMarkets as $DemodayTargetMarket){

                    $keys['id']= $DemodayTargetMarket->id;
					$keys['name']= $DemodayTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addConference method 
     *
     *
     *
     *
     ***/
    public function addDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Demodays');
				$addBoardMembers = $this->Demodays->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->DemodayUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->DemodayUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->DemodayUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->DemodayUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Demodays->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Demodays->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveDemodayFeeds($this->request->data['user_id'],'feeds_demoday_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  5>
     *  editDemoday method 
     *
     *
     *
     *
     ***/
    public function editDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Demodays');
				$addfunds = $this->Demodays->newEntity(); 
				$this->Demodays->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['demoday_id'];

				$exists = $this->Demodays->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Demodays->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->DemodayUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->DemodayUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->DemodayUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->DemodayUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Demodays->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Demodays->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    demodayDetails Method
    *
    *
    ***/
    public function demodayDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['demoday_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Demodays->find('all',['conditions'=>['Demodays.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->DemodayUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->DemodayUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->DemodayUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/demoday/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/demoday/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/demoday/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/demoday/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->DemodayUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->DemodayUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->DemodayUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->DemodayUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->DemodayUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myDemoday Method
    *
    *
    ***/
    public function myDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Demodays.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM demoday_keywords as KY INNER JOIN demodays as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/demoday/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->DemodayUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->DemodayUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveDemodayList Method
    *
    *
    ***/
    public function archiveDemodayList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Demodays.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM demoday_keywords as KY INNER JOIN demodays as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>2,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>2,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>2,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>2,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/demoday/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->DemodayUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->DemodayUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateDemodayList Method
    *
    *
    ***/
    public function deactivateDemodayList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Demodays.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM demoday_keywords as KY INNER JOIN demodays as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>0,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id '=>$user_id, 'Demodays.status'=>0,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>0,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id'=>$user_id, 'Demodays.status'=>0,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Demodays->find('all',['conditions'=>['Demodays.user_id'=>$user_id,'Demodays.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/demoday/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->DemodayUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->DemodayUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findDemoday Method
    *
    *
    ***/
    public function findDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Demodays.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM demoday_keywords as KY INNER JOIN demodays as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id !='=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id !='=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Demodays.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id !='=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Demodays->find('all',
									                        ['conditions'=>
									                            [
									                                'Demodays.user_id !='=>$user_id, 'Demodays.status'=>1,

									                                'OR' =>[
									                                            ['Demodays.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Demodays->find('all',['conditions'=>['Demodays.user_id !='=>$user_id,'Demodays.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Demodays->find('all',['conditions'=>['Demodays.user_id !='=>$user_id,'Demodays.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/demoday/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->DemodayUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->DemodayUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  11>
    *    archiveDemoday Method
    *
    *
    ***/
    public function archiveDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['demoday_id'];

            	$res= $this->Demodays->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The demo day has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The demo day could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The demo day could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['demoday_id'];

            	$res= $this->Demodays->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The demo day has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The demo day could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The demo day could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateDemodays Method
    *
    *
    ***/
    public function deactivateDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['demoday_id'];

            	$res= $this->Demodays->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The demo day has been deactivated.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The demo day could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The demo day could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateDemoday Method
    *
    *
    ***/
    public function activateDemoday()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['demoday_id'];

            	$res= $this->Demodays->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The demo day has been activated.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The demo day could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The demo day could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeDemodays method 
     *
     *
     *
     *
     ***/
    public function likeDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('DemodayDislikes');
					$likeExists= $this->DemodayDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'demoday_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->DemodayDislikes->get($likeExists->id);
						$this->DemodayDislikes->delete($entity);
					}

	                $this->loadModel('DemodayLikes');
					$likefunds = $this->DemodayLikes->newEntity(); 

					
	                $likefunds = $this->DemodayLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->DemodayLikes->find('all',['conditions'=>['like_by'=>$likeBy,'demoday_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->DemodayLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Demoday liked successfully.';
							$result['likes']= $this->DemodayUpload->getLikeCount($fundId);
							$result['dislikes']= $this->DemodayUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find demo day.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like demo day.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeDemoday method 
     *
     *
     *
     *
     ***/
    public function disLikeDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('DemodayLikes');
					$likeExists= $this->DemodayLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'demoday_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->DemodayLikes->get($likeExists->id);
						$this->DemodayLikes->delete($entity);
					}

	                $this->loadModel('DemodayDislikes');
					$dislikefunds = $this->DemodayDislikes->newEntity(); 

					
	                $dislikefunds = $this->DemodayDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->DemodayDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'demoday_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->DemodayDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Demo day disliked successfully.';
							$result['dislikes']= $this->DemodayUpload->getDislikeCount($fundId);
							$result['likes']= $this->DemodayUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->DemodayUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->DemodayUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike demo day. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find demo day.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike demo day.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  demodayLikeList method 
     *
     *
     *
     *
     ***/
    public function demodayLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['demoday_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('DemodayLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->DemodayLikes->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->DemodayLikes->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  demodayDislikeList method 
     *
     *
     *
     *
     ***/
    public function demodayDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['demoday_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('DemodayDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->DemodayDislikes->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->DemodayDislikes->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No demo day dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followDemoday method 
     *
     *
     *
     *
     ***/
    public function followDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('DemodayFollowers');
					$FundFollowers = $this->DemodayFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->DemodayFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->DemodayFollowers->find('all',['conditions'=>['user_id'=>$followBy,'demoday_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->DemodayFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveDemodayFeeds($followBy,'feeds_demoday_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Demoday followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow demo day. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find demo day.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow demo day.';
				echo json_encode($result);
            }
    }


    /*  20> 
     *  unfollowDemoday method 
     *
     *
     *
     *
     ***/
    public function unfollowDemoday()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('DemodayFollowers');
					$likeExists= $this->DemodayFollowers->find('all',['conditions'=>['user_id'=>$followBy,'demoday_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->DemodayFollowers->get($likeExists->id);
						$this->DemodayFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Demo day unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find demo day.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow demo day.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  DemodayCommitment method 
     *
     *
     *
     *
     ***/
    public function demodayCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');
            $this->loadModel('DemodayCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->DemodayCommitments->newEntity(); 
	                $likefunds = $this->DemodayCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->DemodayCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'demoday_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->DemodayCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->DemodayUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  DemodayUncommitment method 
     *
     *
     *
     *
     ***/
    public function demodayUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Demodays');
            $this->loadModel('DemodayCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['demoday_id'];

				$exists= $this->Demodays->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->DemodayCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'demoday_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->DemodayCommitments->get($likeExists->id);
						$this->DemodayCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->DemodayUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  DemodayCommitmentList method 
     *
     *
     *
     *
     ***/
    public function demodayCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('DemodayCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['demoday_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->DemodayCommitments->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->DemodayCommitments->find('all',['conditions'=>['demoday_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No demo day commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No demo day commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Webinars ***********************//

    /**  1>
    *    ConferenceInterestKeywordLists Method
    *
    *
    ***/
    public function webinarInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('WebinarInterestKeywords');

            $WebinarInterestKeywords= $this->WebinarInterestKeywords->find('all');

            $TotalItems= $WebinarInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($WebinarInterestKeywords as $WebinarInterestKeyword){

                    $keys['id']= $WebinarInterestKeyword->id;
					$keys['name']= $WebinarInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

        /** 2>
    *   ConferenceKeywordsList Method
    *
    *
    ***/
    public function webinarKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('WebinarKeywords');

            $WebinarKeywords= $this->WebinarKeywords->find('all');

            $TotalItems= $WebinarKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($WebinarKeywords as $WebinarKeyword){

                    $keys['id']= $WebinarKeyword->id;
					$keys['name']= $WebinarKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   webinarTargetMarketsList Method
    *
    *
    ***/
    public function webinarTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('WebinarTargetMarkets');

            $WebinarTargetMarkets= $this->WebinarTargetMarkets->find('all');

            $TotalItems= $WebinarTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($WebinarTargetMarkets as $WebinarTargetMarket){

                    $keys['id']= $WebinarTargetMarket->id;
					$keys['name']= $WebinarTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addConference method 
     *
     *
     *
     *
     ***/
    public function addWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Webinars');
				$addBoardMembers = $this->Webinars->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->WebinarUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->WebinarUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->WebinarUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->WebinarUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->Webinars->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Webinars->save($addBoardMembers);
                    if ($resultSave){
                    	//Save Feeds
                        $this->Feeds->saveWebinarFeeds($this->request->data['user_id'],'feeds_webinar_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  5>
     *  editWebinar method 
     *
     *
     *
     *
     ***/
    public function editWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('Webinars');
				$addfunds = $this->Webinars->newEntity(); 
				$this->Webinars->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['webinar_id'];

				$exists = $this->Webinars->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Webinars->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->WebinarUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->WebinarUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->WebinarUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->WebinarUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Webinars->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Webinars->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    WebinarDetails Method
    *
    *
    ***/
    public function webinarDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['webinar_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Webinars->find('all',['conditions'=>['Webinars.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->WebinarUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->WebinarUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->WebinarUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/webinar/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/webinar/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/webinar/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/webinar/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->WebinarUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->WebinarUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->WebinarUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->WebinarUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->WebinarUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myWebinar Method
    *
    *
    ***/
    public function myWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Webinars.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM webinar_keywords as KY INNER JOIN webinars as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/webinar/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->WebinarUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->WebinarUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveWebinarList Method
    *
    *
    ***/
    public function archiveWebinarList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Webinars.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM webinar_keywords as KY INNER JOIN webinars as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>2,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>2,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>2,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>2,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/webinar/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->WebinarUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->WebinarUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateWebinarList Method
    *
    *
    ***/
    public function deactivateWebinarList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Webinars.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM webinar_keywords as KY INNER JOIN webinars as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>0,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id '=>$user_id, 'Webinars.status'=>0,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>0,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id'=>$user_id, 'Webinars.status'=>0,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Webinars->find('all',['conditions'=>['Webinars.user_id'=>$user_id,'Webinars.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/webinar/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->WebinarUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->WebinarUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findWebinar Method
    *
    *
    ***/
    public function findWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Webinars.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM webinar_keywords as KY INNER JOIN webinars as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id !='=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id !='=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Webinars.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id !='=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Webinars->find('all',
									                        ['conditions'=>
									                            [
									                                'Webinars.user_id !='=>$user_id, 'Webinars.status'=>1,

									                                'OR' =>[
									                                            ['Webinars.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Webinars->find('all',['conditions'=>['Webinars.user_id !='=>$user_id,'Webinars.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Webinars->find('all',['conditions'=>['Webinars.user_id !='=>$user_id,'Webinars.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/webinar/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->WebinarUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->WebinarUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  11>
    *    archiveWebinar Method
    *
    *
    ***/
    public function archiveWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['webinar_id'];

            	$res= $this->Webinars->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Webinar has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Webinar could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Webinar could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['webinar_id'];

            	$res= $this->Webinars->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Webinar has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Webinar could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Webinar could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateWebinars Method
    *
    *
    ***/
    public function deactivateWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['webinar_id'];

            	$res= $this->Webinars->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Webinar has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Webinar could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Webinar could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateWebinar Method
    *
    *
    ***/
    public function activateWebinar()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['webinar_id'];

            	$res= $this->Webinars->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Webinar has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Webinar could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Webinar could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeWebinar method 
     *
     *
     *
     *
     ***/
    public function likeWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('WebinarDislikes');
					$likeExists= $this->WebinarDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'webinar_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->WebinarDislikes->get($likeExists->id);
						$this->WebinarDislikes->delete($entity);
					}

	                $this->loadModel('WebinarLikes');
					$likefunds = $this->WebinarLikes->newEntity(); 

					
	                $likefunds = $this->WebinarLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->WebinarLikes->find('all',['conditions'=>['like_by'=>$likeBy,'webinar_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->WebinarLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Webinar liked successfully.';
							$result['likes']= $this->WebinarUpload->getLikeCount($fundId);
							$result['dislikes']= $this->WebinarUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Webinar.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Webinar.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeWebinar method 
     *
     *
     *
     *
     ***/
    public function disLikeWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('WebinarLikes');
					$likeExists= $this->WebinarLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'webinar_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->WebinarLikes->get($likeExists->id);
						$this->WebinarLikes->delete($entity);
					}

	                $this->loadModel('WebinarDislikes');
					$dislikefunds = $this->WebinarDislikes->newEntity(); 

					
	                $dislikefunds = $this->WebinarDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->WebinarDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'webinar_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->WebinarDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Webinar disliked successfully.';
							$result['dislikes']= $this->WebinarUpload->getDislikeCount($fundId);
							$result['likes']= $this->WebinarUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->WebinarUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->WebinarUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Webinar. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Webinar.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Webinar.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  WebinarLikeList method 
     *
     *
     *
     *
     ***/
    public function webinarLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['webinar_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('WebinarLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->WebinarLikes->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->WebinarLikes->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  webinarDislikeList method 
     *
     *
     *
     *
     ***/
    public function webinarDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['webinar_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('WebinarDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->WebinarDislikes->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->WebinarDislikes->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Webinar dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followWebinar method 
     *
     *
     *
     *
     ***/
    public function followWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('WebinarFollowers');
					$FundFollowers = $this->WebinarFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->WebinarFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->WebinarFollowers->find('all',['conditions'=>['user_id'=>$followBy,'webinar_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->WebinarFollowers->save($likefunds);
	                    if ($resultSave){
	                    	//Save Feeds
                            $this->Feeds->saveWebinarFeeds($followBy,'feeds_webinar_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Webinar followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Webinar. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Webinar.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Webinar.';
				echo json_encode($result);
            }
    }


    /*  20> 
     *  unfollowWebinar method 
     *
     *
     *
     *
     ***/
    public function unfollowWebinar()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('WebinarFollowers');
					$likeExists= $this->WebinarFollowers->find('all',['conditions'=>['user_id'=>$followBy,'webinar_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->WebinarFollowers->get($likeExists->id);
						$this->WebinarFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Webinar unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Webinar.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Webinar.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  webinarCommitment method 
     *
     *
     *
     *
     ***/
    public function webinarCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');
            $this->loadModel('WebinarCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->WebinarCommitments->newEntity(); 
	                $likefunds = $this->WebinarCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->WebinarCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'webinar_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->WebinarCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->WebinarUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  webinarUncommitment method 
     *
     *
     *
     *
     ***/
    public function webinarUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Webinars');
            $this->loadModel('WebinarCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['webinar_id'];

				$exists= $this->Webinars->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->WebinarCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'webinar_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->WebinarCommitments->get($likeExists->id);
						$this->WebinarCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->WebinarUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  webinarCommitmentList method 
     *
     *
     *
     *
     ***/
    public function webinarCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('WebinarCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['webinar_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->WebinarCommitments->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->WebinarCommitments->find('all',['conditions'=>['webinar_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Webinar commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Webinar commitment list found.';
				echo json_encode($result);
            }
    }



    //*************************** Launch Deals ***********************//

    /**  1>
    *    launchdealInterestKeywordLists Method
    *
    *
    ***/
    public function launchdealInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDealInterestKeywords');

            $LaunchdealInterestKeywords= $this->LaunchDealInterestKeywords->find('all');

            $TotalItems= $LaunchdealInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($LaunchdealInterestKeywords as $LaunchdealInterestKeyword){

                    $keys['id']= $LaunchdealInterestKeyword->id;
					$keys['name']= $LaunchdealInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

    /** 2>
    *   launchdealKeywordsList Method
    *
    *
    ***/
    public function launchdealKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDealKeywords');

            $LaunchdealKeywords= $this->LaunchDealKeywords->find('all');

            $TotalItems= $LaunchdealKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($LaunchdealKeywords as $LaunchdealKeyword){

                    $keys['id']= $LaunchdealKeyword->id;
					$keys['name']= $LaunchdealKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   launchdealTargetMarketsList Method
    *
    *
    ***/
    public function launchdealTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDealTargetMarkets');

            $LaunchdealTargetMarkets= $this->LaunchDealTargetMarkets->find('all');

            $TotalItems= $LaunchdealTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($LaunchdealTargetMarkets as $LaunchdealTargetMarket){

                    $keys['id']= $LaunchdealTargetMarket->id;
					$keys['name']= $LaunchdealTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addConference method 
     *
     *
     *
     *
     ***/
    public function addLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('LaunchDeals');
				$addBoardMembers = $this->LaunchDeals->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->LaunchUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->LaunchUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->LaunchUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->LaunchUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->LaunchDeals->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->LaunchDeals->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveLaunchDealFeeds($this->request->data['user_id'],'feeds_launchdeal_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  5>
     *  editLaunchdeal method 
     *
     *
     *
     *
     ***/
    public function editLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('LaunchDeals');
				$addfunds = $this->LaunchDeals->newEntity(); 
				$this->LaunchDeals->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['launchdeal_id'];

				$exists = $this->LaunchDeals->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->LaunchDeals->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->LaunchUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->LaunchUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->LaunchUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->LaunchUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->LaunchDeals->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->LaunchDeals->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    LaunchDealDetails Method
    *
    *
    ***/
    public function launchdealDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['launchdeal_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->LaunchUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->LaunchUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->LaunchUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/launchdeal/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/launchdeal/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/launchdeal/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/launchdeal/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->LaunchUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->LaunchUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->LaunchUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->LaunchUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->LaunchUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myLaunchdeal Method
    *
    *
    ***/
    public function myLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'LaunchDeals.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM launch_deal_keywords as KY INNER JOIN launch_deals as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/launchdeal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->LaunchUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->LaunchUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveWebinarList Method
    *
    *
    ***/
    public function archiveLaunchdealList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'LaunchDeals.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM launch_deal_keywords as KY INNER JOIN launch_deals as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>2,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>2,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>2,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>2,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/launchdeal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->LaunchUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->LaunchUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateLaunchdealList Method
    *
    *
    ***/
    public function deactivateLaunchdealList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'LaunchDeals.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM launch_deal_keywords as KY INNER JOIN launch_deals as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>0,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id '=>$user_id, 'LaunchDeals.status'=>0,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>0,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id'=>$user_id, 'LaunchDeals.status'=>0,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id'=>$user_id,'LaunchDeals.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/launchdeal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->LaunchUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->LaunchUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findLaunchdeal Method
    *
    *
    ***/
    public function findLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'LaunchDeals.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM launch_deal_keywords as KY INNER JOIN launch_deals as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id !='=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id !='=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['LaunchDeals.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id !='=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->LaunchDeals->find('all',
									                        ['conditions'=>
									                            [
									                                'LaunchDeals.user_id !='=>$user_id, 'LaunchDeals.status'=>1,

									                                'OR' =>[
									                                            ['LaunchDeals.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id !='=>$user_id,'LaunchDeals.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->LaunchDeals->find('all',['conditions'=>['LaunchDeals.user_id !='=>$user_id,'LaunchDeals.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/launchdeal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->LaunchUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->LaunchUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  11>
    *    archiveLaunchdeal Method
    *
    *
    ***/
    public function archiveLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['launchdeal_id'];

            	$res= $this->LaunchDeals->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Launch Deal has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Launch Deal could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Launch Deal could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['launchdeal_id'];

            	$res= $this->LaunchDeals->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Launch Deal has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Launch Deal could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Launch Deal could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateLaunchdeal Method
    *
    *
    ***/
    public function deactivateLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['launchdeal_id'];

            	$res= $this->LaunchDeals->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Launch Deal has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Launch Deal could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Launch Deal could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateWebinar Method
    *
    *
    ***/
    public function activateLaunchdeal()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['launchdeal_id'];

            	$res= $this->LaunchDeals->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Launch Deal has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Launch Deal could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Launch Deal could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeLaunchdeal method 
     *
     *
     *
     *
     ***/
    public function likeLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('LaunchDealDislikes');
					$likeExists= $this->LaunchDealDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'launchdeal_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->LaunchDealDislikes->get($likeExists->id);
						$this->LaunchDealDislikes->delete($entity);
					}

	                $this->loadModel('LaunchDealLikes');
					$likefunds = $this->LaunchDealLikes->newEntity(); 

					
	                $likefunds = $this->LaunchDealLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->LaunchDealLikes->find('all',['conditions'=>['like_by'=>$likeBy,'launchdeal_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->LaunchDealLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Launch Deal liked successfully.';
							$result['likes']= $this->LaunchUpload->getLikeCount($fundId);
							$result['dislikes']= $this->LaunchUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Launch Deal.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Launch Deal.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeLaunchdeal method 
     *
     *
     *
     *
     ***/
    public function disLikeLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('LaunchDealLikes');
					$likeExists= $this->LaunchDealLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'launchdeal_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->LaunchDealLikes->get($likeExists->id);
						$this->LaunchDealLikes->delete($entity);
					}

	                $this->loadModel('LaunchDealDislikes');
					$dislikefunds = $this->LaunchDealDislikes->newEntity(); 

					
	                $dislikefunds = $this->LaunchDealDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->LaunchDealDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'launchdeal_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->LaunchDealDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Launch Deal disliked successfully.';
							$result['dislikes']= $this->LaunchUpload->getDislikeCount($fundId);
							$result['likes']= $this->LaunchUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->LaunchUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->LaunchUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Launch Deal. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Launch Deal.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Launch Deal.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  LaunchdealLikeList method 
     *
     *
     *
     *
     ***/
    public function launchdealLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['launchdeal_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('LaunchDealLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->LaunchDealLikes->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->LaunchDealLikes->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  webinarDislikeList method 
     *
     *
     *
     *
     ***/
    public function launchdealDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['launchdeal_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('LaunchDealDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->LaunchDealDislikes->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->LaunchDealDislikes->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Launch Deal dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followWebinar method 
     *
     *
     *
     *
     ***/
    public function followLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('LaunchDealFollowers');
					$FundFollowers = $this->LaunchDealFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->LaunchDealFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->LaunchDealFollowers->find('all',['conditions'=>['user_id'=>$followBy,'launchdeal_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->LaunchDealFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveLaunchDealFeeds($followBy,'feeds_launchdeal_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Launch Deal followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Launch Deal. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Launch Deal.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Launch Deal.';
				echo json_encode($result);
            }
    }


    /*  20> 
     *  unfollowLaunchdeal method 
     *
     *
     *
     *
     ***/
    public function unfollowLaunchdeal()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('LaunchDealFollowers');
					$likeExists= $this->LaunchDealFollowers->find('all',['conditions'=>['user_id'=>$followBy,'launchdeal_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->LaunchDealFollowers->get($likeExists->id);
						$this->LaunchDealFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Launch Deal unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Launch Deal.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Launch Deal.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  webinarCommitment method 
     *
     *
     *
     *
     ***/
    public function launchdealCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');
            $this->loadModel('LaunchDealCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->LaunchDealCommitments->newEntity(); 
	                $likefunds = $this->LaunchDealCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->LaunchDealCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'launchdeal_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->LaunchDealCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->LaunchUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  launchdealUncommitment method 
     *
     *
     *
     *
     ***/
    public function launchdealUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDeals');
            $this->loadModel('LaunchDealCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['launchdeal_id'];

				$exists= $this->LaunchDeals->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->LaunchDealCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'launchdeal_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->LaunchDealCommitments->get($likeExists->id);
						$this->LaunchDealCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->LaunchUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  launchdealCommitmentList method 
     *
     *
     *
     *
     ***/
    public function launchdealCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('LaunchDealCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['launchdeal_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->LaunchDealCommitments->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->LaunchDealCommitments->find('all',['conditions'=>['launchdeal_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Launch Deal commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Launch Deal commitment list found.';
				echo json_encode($result);
            }
    }

    /* ==========================  Group Buying ===============================*/

    /** 1>
    *   groupbuyingKeywordsList Method
    *
    *
    ***/
    public function groupbuyingKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyingKeywords');

            $GroupBuyingKeywords= $this->GroupBuyingKeywords->find('all');

            $TotalItems= $GroupBuyingKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupBuyingKeywords as $GroupBuyingKeyword){

                    $keys['id']= $GroupBuyingKeyword->id;
					$keys['name']= $GroupBuyingKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }

    /**  1>
    *    groupbuyingInterestKeywordLists Method
    *
    *
    ***/
    public function groupbuyingInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyingInterestKeywords');

            $GroupBuyingInterestKeywords= $this->GroupBuyingInterestKeywords->find('all');

            $TotalItems= $GroupBuyingInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupBuyingInterestKeywords as $GroupBuyingInterestKeyword){

                    $keys['id']= $GroupBuyingInterestKeyword->id;
					$keys['name']= $GroupBuyingInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   groupbuyingTargetMarketsList Method
    *
    *
    ***/
    public function groupbuyingTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyingTargetMarkets');

            $GroupBuyingTargetMarkets= $this->GroupBuyingTargetMarkets->find('all');

            $TotalItems= $GroupBuyingTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($GroupBuyingTargetMarkets as $GroupBuyingTargetMarket){

                    $keys['id']= $GroupBuyingTargetMarket->id;
					$keys['name']= $GroupBuyingTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }

    /*  2>
     *  addGroupBuying method 
     *
     *
     *
     *
     ***/
    public function addGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('GroupBuyings');
				$addBoardMembers = $this->GroupBuyings->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->GroupBuyingUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->GroupBuyingUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->GroupBuyingUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->GroupBuyingUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }

                	if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->GroupBuyings->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->GroupBuyings->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveGroupBuyingFeeds($this->request->data['user_id'],'feeds_purchaseorder_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  3>
     *  editGroupbuying method 
     *
     *
     *
     *
     ***/
    public function editGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('GroupBuyings');
				$addfunds = $this->GroupBuyings->newEntity(); 
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['groupbuying_id'];

				$exists = $this->GroupBuyings->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->GroupBuyings->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->GroupBuyingUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->GroupBuyingUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->GroupBuyingUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->GroupBuyingUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}


					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }

	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->GroupBuyings->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->GroupBuyings->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }

    /**  4>
    *    GroupbuyingDetails Method
    *
    *
    ***/
    public function groupbuyingDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['groupbuying_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->GroupBuyings->find('all',['conditions'=>['GroupBuyings.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['keywords_id']= $this->GroupBuyingUpload->keywordList($fundetail->keywords_id);

						$result['interest_keywords_id']= $this->GroupBuyingUpload->interestKeywordList($fundetail->interest_keywords_id);

						$result['target_market']= $this->GroupBuyingUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/groupbuying/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/groupbuying/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/groupbuying/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/groupbuying/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->GroupBuyingUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->GroupBuyingUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->GroupBuyingUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->GroupBuyingUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->GroupBuyingUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->GroupBuyingUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->GroupBuyingUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  5>
    *    myGroupbuying Method
    *
    *
    ***/
    public function myGroupbuying()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'GroupBuyings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM group_buying_keywords as KY INNER JOIN group_buying as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id '=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['GroupBuyings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id '=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['GroupBuyings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id'=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id'=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->GroupBuyings->find('all',['conditions'=>['GroupBuyings.user_id'=>$user_id,'GroupBuyings.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->GroupBuyings->find('all',['conditions'=>['GroupBuyings.user_id'=>$user_id,'GroupBuyings.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= date_format($myFundsList->created,"M d, Y");
						//$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/groupbuying/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupBuyingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupBuyingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupBuyingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupBuyingUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  6>
    *    findGroupbuying Method
    *
    *
    ***/
    public function findGroupbuying()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'GroupBuyings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM group_buying_keywords as KY INNER JOIN group_buyings as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id !='=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['GroupBuyings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id !='=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['GroupBuyings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id !='=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->GroupBuyings->find('all',
									                        ['conditions'=>
									                            [
									                                'GroupBuyings.user_id !='=>$user_id, 'GroupBuyings.status'=>1,

									                                'OR' =>[
									                                            ['GroupBuyings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->GroupBuyings->find('all',['conditions'=>['GroupBuyings.user_id !='=>$user_id,'GroupBuyings.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->GroupBuyings->find('all',['conditions'=>['GroupBuyings.user_id !='=>$user_id,'GroupBuyings.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= date_format($myFundsList->created,"M d, Y");
						//$keys['end_date']= $myFundsList->end_date;
						//$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/groupbuying/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->GroupBuyingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->GroupBuyingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->GroupBuyingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->GroupBuyingUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


   /**  7>
    *    deleteService Method
    *
    *
    ***/
    public function deleteGroupbuying()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['groupbuying_id'];

            	$res= $this->GroupBuyings->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Group Buying has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Group Buying could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Group Buying could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  8>
     *  likeGroupBuyings method 
     *
     *
     *
     *
     ***/
    public function likeGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('GroupBuyingDislikes');
					$likeExists= $this->GroupBuyingDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'groupbuying_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupBuyingDislikes->get($likeExists->id);
						$this->GroupBuyingDislikes->delete($entity);
					}

	                $this->loadModel('GroupBuyingLikes');
					$likefunds = $this->GroupBuyingLikes->newEntity(); 

					
	                $likefunds = $this->GroupBuyingLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupBuyingLikes->find('all',['conditions'=>['like_by'=>$likeBy,'groupbuying_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->GroupBuyingLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Group Buying liked successfully.';
							$result['likes']= $this->GroupBuyingUpload->getLikeCount($fundId);
							$result['dislikes']= $this->GroupBuyingUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->GroupBuyingUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->GroupBuyingUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group Buying.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Group Buying.';
				echo json_encode($result);
            }
    }


    /*  9>
     *  disLikeGroupbuying method 
     *
     *
     *
     *
     ***/
    public function disLikeGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('GroupBuyingLikes');
					$likeExists= $this->GroupBuyingLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'groupbuying_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupBuyingLikes->get($likeExists->id);
						$this->GroupBuyingLikes->delete($entity);
					}

	                $this->loadModel('GroupBuyingDislikes');
					$dislikefunds = $this->GroupBuyingDislikes->newEntity(); 

					
	                $dislikefunds = $this->GroupBuyingDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->GroupBuyingDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'groupbuying_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->GroupBuyingDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Group Buying disliked successfully.';
							$result['dislikes']= $this->GroupBuyingUpload->getDislikeCount($fundId);
							$result['likes']= $this->GroupBuyingUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->GroupBuyingUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->GroupBuyingUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Group Buying. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group Buying.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Group Buying.';
				echo json_encode($result);
            }
    }

    /* 10>
     *  GroupBuyingsLikeList method 
     *
     *
     *
     *
     ***/
    public function groupbuyingLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['groupbuying_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('GroupBuyingLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupBuyingLikes->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupBuyingLikes->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

     /* 11> 
     *  webinarDislikeList method 
     *
     *
     *
     *
     ***/
    public function groupbuyingDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['groupbuying_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('GroupBuyingDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupBuyingDislikes->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupBuyingDislikes->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Group Buying dislike list found.';
				echo json_encode($result);
            }
    }


    /*  12>
     *  followWebinar method 
     *
     *
     *
     *
     ***/
    public function followGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('GroupBuyingFollowers');
					$FundFollowers = $this->GroupBuyingFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->GroupBuyingFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupBuyingFollowers->find('all',['conditions'=>['user_id'=>$followBy,'groupbuying_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->GroupBuyingFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveGroupBuyingFeeds($followBy,'feeds_purchaseorder_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Group Buying followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Group Buying. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group Buying.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Group Buying.';
				echo json_encode($result);
            }
    }


    /*  13> 
     *  unfollowGroupbuying method 
     *
     *
     *
     *
     ***/
    public function unfollowGroupbuying()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('GroupBuyingFollowers');
					$likeExists= $this->GroupBuyingFollowers->find('all',['conditions'=>['user_id'=>$followBy,'groupbuying_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->GroupBuyingFollowers->get($likeExists->id);
						$this->GroupBuyingFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Group Buying unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Group Buying.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Group Buying.';
				echo json_encode($result);
            }
    }


    /*  14>
     *  webinarCommitment method 
     *
     *
     *
     *
     ***/
    public function groupbuyingCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');
            $this->loadModel('GroupBuyingCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->GroupBuyingCommitments->newEntity(); 
	                $likefunds = $this->GroupBuyingCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->GroupBuyingCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'groupbuying_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->GroupBuyingCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->GroupBuyingUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  GroupBuyingUncommitment method 
     *
     *
     *
     *
     ***/
    public function groupbuyingUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyings');
            $this->loadModel('GroupBuyingCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['groupbuying_id'];

				$exists= $this->GroupBuyings->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->GroupBuyingCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'groupbuying_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->GroupBuyingCommitments->get($likeExists->id);
						$this->GroupBuyingCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->GroupBuyingUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  GroupBuyingCommitmentList method 
     *
     *
     *
     *
     ***/
    public function groupbuyingCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('GroupBuyingCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['groupbuying_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->GroupBuyingCommitments->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->GroupBuyingCommitments->find('all',['conditions'=>['groupbuying_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Group Buying commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'NoGroup Buying commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Communal Assets ***********************//

    /**  1>
    *    communalassetInterestKeywordLists Method
    *
    *
    ***/
    public function communalassetInterestKeywordLists()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssetInterestKeywords');

            $CommunalAssetInterestKeywords= $this->CommunalAssetInterestKeywords->find('all');

            $TotalItems= $CommunalAssetInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CommunalAssetInterestKeywords as $CommunalAssetInterestKeyword){

                    $keys['id']= $CommunalAssetInterestKeyword->id;
					$keys['name']= $CommunalAssetInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No interest Keyword list found.';
				echo json_encode($result);
			}	       	
    }

    /** 2>
    *   communalassetKeywordsList Method
    *
    *
    ***/
    public function communalassetKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssetKeywords');

            $CommunalAssetKeywords= $this->CommunalAssetKeywords->find('all');

            $TotalItems= $CommunalAssetKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CommunalAssetKeywords as $CommunalAssetKeyword){

                    $keys['id']= $CommunalAssetKeyword->id;
					$keys['name']= $CommunalAssetKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }


    /** 3>
    *   communalassetTargetMarketsList Method
    *
    *
    ***/
    public function communalassetTargetMarketsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssetTargetMarkets');

            $CommunalAssetTargetMarkets= $this->CommunalAssetTargetMarkets->find('all');

            $TotalItems= $CommunalAssetTargetMarkets->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($CommunalAssetTargetMarkets as $CommunalAssetTargetMarket){

                    $keys['id']= $CommunalAssetTargetMarket->id;
					$keys['name']= $CommunalAssetTargetMarket->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_market_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Target Market list found.';
				echo json_encode($result);
			}	       	
    }


    /*  4>
     *  addConference method 
     *
     *
     *
     *
     ***/
    public function addCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('CommunalAssets');
				$addBoardMembers = $this->CommunalAssets->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->CommunalUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->CommunalUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->CommunalUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->CommunalUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;

                $addBoardMembers = $this->CommunalAssets->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->CommunalAssets->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveCommunalAssetFeeds($this->request->data['user_id'],'feeds_communal_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }

     /*  5>
     *  editCommunalasset method 
     *
     *
     *
     *
     ***/
    public function editCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];

                $this->loadModel('CommunalAssets');
				$addfunds = $this->CommunalAssets->newEntity(); 
				$this->CommunalAssets->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['communalasset_id'];

				$exists = $this->CommunalAssets->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->CommunalAssets->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->CommunalUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->CommunalUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->CommunalUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->CommunalUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->CommunalAssets->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->CommunalAssets->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  6>
    *    communalassetDetails Method
    *
    *
    ***/
    public function communalassetDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['communalasset_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['description']=$fundetail->description;
						$result['start_date']=$fundetail->start_date;
						$result['end_date']=$fundetail->end_date;

						$result['interest_keywords_id']= $this->CommunalUpload->interestKeywordList($fundetail->interest_keywords_id);
						$result['keywords_id']= $this->CommunalUpload->keywordList($fundetail->keywords_id);
						$result['target_market']= $this->CommunalUpload->targetMarketList($fundetail->target_market);
						

						if(!empty($fundetail->document)){
							$result['document']="img/communal/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/communal/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/communal/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/communal/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						$result['likes']= $this->CommunalUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->CommunalUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->CommunalUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->CommunalUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->CommunalUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


    /**  7>
    *    myLaunchdeal Method
    *
    *
    ***/
    public function myCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CommunalAssets.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM communal_asset_keywords as KY INNER JOIN communal_assets as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/communal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CommunalUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CommunalUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveWebinarList Method
    *
    *
    ***/
    public function archiveCommunalassetList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CommunalAssets.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM communal_asset_keywords as KY INNER JOIN communal_assets as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>2,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>2,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>2,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>2,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/communal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CommunalUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CommunalUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     deactivateCommunalassetList Method
    *
    *
    ***/
    public function deactivateCommunalassetList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CommunalAssets.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM communal_asset_keywords as KY INNER JOIN communal_assets as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>0,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id '=>$user_id, 'CommunalAssets.status'=>0,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>0,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id'=>$user_id, 'CommunalAssets.status'=>0,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id'=>$user_id,'CommunalAssets.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/communal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CommunalUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CommunalUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  10>
    *    findCommunalasset Method
    *
    *
    ***/
    public function findCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'CommunalAssets.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM communal_asset_keywords as KY INNER JOIN communal_assets as SU ON FIND_IN_SET(KY.id, SU.keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id !='=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id !='=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['CommunalAssets.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id !='=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->CommunalAssets->find('all',
									                        ['conditions'=>
									                            [
									                                'CommunalAssets.user_id !='=>$user_id, 'CommunalAssets.status'=>1,

									                                'OR' =>[
									                                            ['CommunalAssets.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id !='=>$user_id,'CommunalAssets.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->CommunalAssets->find('all',['conditions'=>['CommunalAssets.user_id !='=>$user_id,'CommunalAssets.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['start_date']= $myFundsList->start_date;
						$keys['end_date']= $myFundsList->end_date;
						$keys['close_date']= $myFundsList->close_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/communal/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->CommunalUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->CommunalUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($myFundsList->id,$user_id);

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  11>
    *    archiveCommunalasset Method
    *
    *
    ***/
    public function archiveCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['communalasset_id'];

            	$res= $this->CommunalAssets->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Communal Asset has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Communal Asset could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Communal Asset could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  12>
    *    deleteService Method
    *
    *
    ***/
    public function deleteCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['communalasset_id'];

            	$res= $this->CommunalAssets->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Communal Asset has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Communal Asset could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Communal Asset could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 13>
    *  deactivateCommunalasset Method
    *
    *
    ***/
    public function deactivateCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['communalasset_id'];

            	$res= $this->CommunalAssets->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Communal Asset has been deactivated successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Communal Asset could not be deactivated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Communal Asset could not be deactivated. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 14>
    *  activateWebinar Method
    *
    *
    ***/
    public function activateCommunalasset()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['communalasset_id'];

            	$res= $this->CommunalAssets->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Communal Asset has been activated successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Communal Asset could not be activated. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Communal Asset could not be activated. Please, try again.';
				echo json_encode($result);
			}	       	
    }


    /*  15>
     *  likeCommunalasset method 
     *
     *
     *
     *
     ***/
    public function likeCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('CommunalAssetDislikes');
					$likeExists= $this->CommunalAssetDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'communalasset_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CommunalAssetDislikes->get($likeExists->id);
						$this->CommunalAssetDislikes->delete($entity);
					}

	                $this->loadModel('CommunalAssetLikes');
					$likefunds = $this->CommunalAssetLikes->newEntity(); 

					
	                $likefunds = $this->CommunalAssetLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CommunalAssetLikes->find('all',['conditions'=>['like_by'=>$likeBy,'communalasset_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->CommunalAssetLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Communal Assetl liked successfully.';
							$result['likes']= $this->CommunalUpload->getLikeCount($fundId);
							$result['dislikes']= $this->CommunalUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Communal Asset.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Communal Asset.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeCommunalasset method 
     *
     *
     *
     *
     ***/
    public function disLikeCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('CommunalAssetLikes');
					$likeExists= $this->CommunalAssetLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'communalasset_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CommunalAssetLikes->get($likeExists->id);
						$this->CommunalAssetLikes->delete($entity);
					}

	                $this->loadModel('CommunalAssetDislikes');
					$dislikefunds = $this->CommunalAssetDislikes->newEntity(); 

					
	                $dislikefunds = $this->CommunalAssetDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->CommunalAssetDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'communalasset_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->CommunalAssetDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Communal Asset disliked successfully.';
							$result['dislikes']= $this->CommunalUpload->getDislikeCount($fundId);
							$result['likes']= $this->CommunalUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->CommunalUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->CommunalUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Communal Asset. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Communal Asset.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Communal Asset.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  communalassetLikeList method 
     *
     *
     *
     *
     ***/
    public function communalassetLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['communalasset_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('CommunalAssetLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CommunalAssetLikes->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CommunalAssetLikes->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  webinarDislikeList method 
     *
     *
     *
     *
     ***/
    public function communalassetDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['communalasset_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('CommunalAssetDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CommunalAssetDislikes->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CommunalAssetDislikes->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Communal Asset dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followWebinar method 
     *
     *
     *
     *
     ***/
    public function followCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('CommunalAssetFollowers');
					$FundFollowers = $this->CommunalAssetFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->CommunalAssetFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CommunalAssetFollowers->find('all',['conditions'=>['user_id'=>$followBy,'communalasset_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->CommunalAssetFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveCommunalAssetFeeds($followBy,'feeds_communal_following',$fundId);
                            
	                        $result['code']=200;
							$result['message']= 'Communal Asset followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Communal Asset. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Communal Asset.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Communal Asset.';
				echo json_encode($result);
            }
    }


    /*  20> 
     *  unfollowCommunalasset method 
     *
     *
     *
     *
     ***/
    public function unfollowCommunalasset()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('CommunalAssetFollowers');
					$likeExists= $this->CommunalAssetFollowers->find('all',['conditions'=>['user_id'=>$followBy,'communalasset_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->CommunalAssetFollowers->get($likeExists->id);
						$this->CommunalAssetFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Communal Asset unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Communal Asset.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Communal Asset.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  webinarCommitment method 
     *
     *
     *
     *
     ***/
    public function communalassetCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');
            $this->loadModel('CommunalAssetCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->CommunalAssetCommitments->newEntity(); 
	                $likefunds = $this->CommunalAssetCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->CommunalAssetCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'communalasset_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->CommunalAssetCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->CommunalUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  communalassetUncommitment method 
     *
     *
     *
     *
     ***/
    public function communalassetUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssets');
            $this->loadModel('CommunalAssetCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['communalasset_id'];

				$exists= $this->CommunalAssets->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->CommunalAssetCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'communalasset_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->CommunalAssetCommitments->get($likeExists->id);
						$this->CommunalAssetCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->CommunalUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  communalassetCommitmentList method 
     *
     *
     *
     *
     ***/
    public function communalassetCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('CommunalAssetCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['communalasset_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->CommunalAssetCommitments->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->CommunalAssetCommitments->find('all',['conditions'=>['communalasset_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No Communal Asset commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Communal Asset commitment list found.';
				echo json_encode($result);
            }
    }


    //*************************** Consulting ***********************//

    /**  1>
    *    consultingTargetKeywordLists Method
    *
    *
    ***/
    public function consultingTargetKeywordLists()
    { 
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConsultingTargetKeywords');

            $ConsultingTargetKeywords= $this->ConsultingTargetKeywords->find('all');

            $TotalItems= $ConsultingTargetKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ConsultingTargetKeywords as $ConsultingTargetKeyword){

                    $keys['id']= $ConsultingTargetKeyword->id;
					$keys['name']= $ConsultingTargetKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['target_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }

    /** 2>
    *   communalassetKeywordsList Method
    *
    *
    ***/
    public function consultingInterestKeywordsList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConsultingInterestKeywords');

            $ConsultingInterestKeywords= $this->ConsultingInterestKeywords->find('all');

            $TotalItems= $ConsultingInterestKeywords->count();
        	
        	if(!empty($TotalItems)){
	
				foreach($ConsultingInterestKeywords as $ConsultingInterestKeyword){

                    $keys['id']= $ConsultingInterestKeyword->id;
					$keys['name']= $ConsultingInterestKeyword->name;

					$finalConnections[] = $keys;
				}
				$result['code']=200;
				$result['TotalItems']=$TotalItems;
				$result['interest_keyword_list']= $finalConnections;
				echo json_encode($result);
			}else{
				$result['code']=404;
				$result['message']= 'No Keyword list found.';
				echo json_encode($result);
			}	       	
    }

     /*  3>
     *  addConsulting method 
     *
     *
     *
     *
     ***/
    public function addConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

                $this->loadModel('Consultings');
				$addBoardMembers = $this->Consultings->newEntity(); 

				$uploadImgError='';
                $uploadimgName='';
                $flag=0;

				if(!empty($this->request->data['image']['name'])){
				 
					$data = [];
					$data = $this->request->data['image']; 
					$uploadImg = $this->ConsultingUpload->uploadImage($data);

					if(empty($uploadImg['errors'])){
	                    $uploadimgName=$uploadImg['imgName'];
					}else{
						$flag=1;
						$uploadImgError=$uploadImg['errors'];
					}
				}

				$uploaddocError='';
                $uploaddocName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data2 = [];
					$data2 = $this->request->data['document']; 
					$uploadDoc = $this->ConsultingUpload->uploadDoc($data2);

					if(empty($uploadDoc['errors'])){
	                    $uploaddocName=$uploadDoc['imgName'];
					}else{
						$flag=1;
						$uploaddocError=$uploadDoc['errors'];
					}
				}

				$uploadAudioError='';
                $uploadAudioName='';
				if(!empty($this->request->data['audio']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['audio']; 
					$uploadAusio = $this->ConsultingUpload->uploadAudio($data3);

					if(empty($uploadAusio['errors'])){
	                    $uploadAudioName=$uploadAusio['imgName'];
					}else{
						$flag=1;
						$uploadAudioError=$uploadAusio['errors'];
					}
				}


				$uploadVideoError='';
                $uploadVideoName='';
				if(!empty($this->request->data['video']['name'])){
				 
					$data3 = [];
					$data3 = $this->request->data['video']; 
					$uploadVideo = $this->ConsultingUpload->uploadVideo($data3);

					if(empty($uploadVideo['errors'])){
	                    $uploadVideoName=$uploadVideo['imgName'];
					}else{
						$flag=1;
						$uploadVideoError=$uploadVideo['errors'];
					}
				}

				$uploadQError='';
                $uploadQName='';
				if(!empty($this->request->data['question']['name'])){
				 
					$data4 = [];
					$data4 = $this->request->data['question']; 
					$uploadQ = $this->ConsultingUpload->uploadDoc($data4);

					if(empty($uploadQ['errors'])){
	                    $uploadQName=$uploadQ['imgName'];
					}else{
						$flag=1;
						$uploadQError=$uploadQ['errors'];
					}
				}

				$uploadFBError='';
                $uploadFBName='';
				if(!empty($this->request->data['final_bid']['name'])){
				 
					$data5 = [];
					$data5 = $this->request->data['final_bid']; 
					$uploadFB = $this->ConsultingUpload->uploadDoc($data5);

					if(empty($uploadFB['errors'])){
	                    $uploadFBName=$uploadFB['imgName'];
					}else{
						$flag=1;
						$uploadFBError=$uploadFB['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadImgError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploaddocError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploaddocError;
						echo json_encode($result);
						exit;
                    }
                    if(!empty($uploadAudioError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadAudioError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadVideoError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadVideoError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadQError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadQError;
						echo json_encode($result);
						exit;
                    }

                    if(!empty($uploadFBError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadFBError;
						echo json_encode($result);
						exit;
                    }
                }

                $this->request->data['image']=$uploadimgName;
                $this->request->data['document']=$uploaddocName;
                $this->request->data['audio']=$uploadAudioName;
                $this->request->data['video']=$uploadVideoName;
                $this->request->data['question']=$uploadQName;
                $this->request->data['final_bid']=$uploadFBName;

                $addBoardMembers = $this->Consultings->patchEntity($addBoardMembers, $this->request->data);

                    $resultSave = $this->Consultings->save($addBoardMembers);
                    if ($resultSave){

                    	//Save Feeds
                        $this->Feeds->saveConsultingFeeds($this->request->data['user_id'],'feeds_consulting_added',$resultSave->id);

                        $result['code']=200;
						$result['message']= 'Saved successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addBoardMembers->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not save. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    }   

            }else{
            	$result['code']=404;
				$result['message']= 'Could not save.';
				echo json_encode($result);
            }
    }


    /*  4>
     *  editConsulting method 
     *
     *
     *
     *
     ***/
    public function editConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);

            if($this->request->is(['patch','post','put']))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/

				//echo $user_id= $this->request->data['user_id'];
//pr($this->request->data); die;
                $this->loadModel('Consultings');
				$addfunds = $this->Consultings->newEntity(); 
				$this->Consultings->validator()->remove('start_date');
				
				$user_id= $this->request->data['user_id'];
				$beta_id= $this->request->data['consulting_id'];

				$exists = $this->Consultings->exists(['id'=>$beta_id,'user_id' =>$user_id]);
				if($exists){


					//Get fund details
					$fundDetails=$this->Consultings->get($beta_id);
					$uploadImgError='';
	                $uploadimgName=$fundDetails->image;
	                $flag=0;

					if(!empty($this->request->data['image']['name'])){
					 
						$data = [];
						$data = $this->request->data['image']; 
						$uploadImg = $this->ConsultingUpload->uploadImage($data);

						if(empty($uploadImg['errors'])){
		                    $uploadimgName=$uploadImg['imgName'];
						}else{
							$flag=1;
							$uploadImgError=$uploadImg['errors'];
						}
					}

					$uploaddocError='';
	                $uploaddocName=$fundDetails->document;
					if(!empty($this->request->data['document']['name'])){
					 
						$data2 = [];
						$data2 = $this->request->data['document']; 
						$uploadDoc = $this->ConsultingUpload->uploadDoc($data2);

						if(empty($uploadDoc['errors'])){
		                    $uploaddocName=$uploadDoc['imgName'];
						}else{
							$flag=1;
							$uploaddocError=$uploadDoc['errors'];
						}
					}

					$uploadAudioError='';
	                $uploadAudioName=$fundDetails->audio;
					if(!empty($this->request->data['audio']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['audio']; 
						$uploadAusio = $this->ConsultingUpload->uploadAudio($data3);

						if(empty($uploadAusio['errors'])){
		                    $uploadAudioName=$uploadAusio['imgName'];
						}else{
							$flag=1;
							$uploadAudioError=$uploadAusio['errors'];
						}
					}


					$uploadVideoError='';
	                $uploadVideoName=$fundDetails->video;
					if(!empty($this->request->data['video']['name'])){
					 
						$data3 = [];
						$data3 = $this->request->data['video']; 
						$uploadVideo = $this->ConsultingUpload->uploadVideo($data3);

						if(empty($uploadVideo['errors'])){
		                    $uploadVideoName=$uploadVideo['imgName'];
						}else{
							$flag=1;
							$uploadVideoError=$uploadVideo['errors'];
						}
					}

					$uploadQError='';
	                $uploadQName=$fundDetails->question;
					if(!empty($this->request->data['question']['name'])){
					 
						$data4 = [];
						$data4 = $this->request->data['question']; 
						$uploadQ = $this->ConsultingUpload->uploadDoc($data4);

						if(empty($uploadQ['errors'])){
		                    $uploadQName=$uploadQ['imgName'];
						}else{
							$flag=1;
							$uploadQError=$uploadQ['errors'];
						}
					}

					$uploadFBError='';
	                $uploadFBName=$fundDetails->final_bid;
					if(!empty($this->request->data['final_bid']['name'])){
					 
						$data5 = [];
						$data5 = $this->request->data['final_bid']; 
						$uploadFB = $this->ConsultingUpload->uploadDoc($data5);

						if(empty($uploadFB['errors'])){
		                    $uploadFBName=$uploadFB['imgName'];
						}else{
							$flag=1;
							$uploadFBError=$uploadFB['errors'];
						}
					}

					
	                if(!empty($flag)){

	                    if(!empty($uploadImgError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadImgError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploaddocError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploaddocError;
							echo json_encode($result);
							exit;
	                    }
	                    if(!empty($uploadAudioError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadAudioError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadVideoError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadVideoError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadQError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadQError;
							echo json_encode($result);
							exit;
	                    }

	                    if(!empty($uploadFBError)){
	                        $result['code']=404;
							$result['message']= 'Oops somthing wrong! Please try again.';
							$result['errors']= $uploadFBError;
							echo json_encode($result);
							exit;
	                    }
	                }

	                if($this->request->data['image_del'] == 1){
	                	$this->request->data['image']='';
	                }else{
	                	$this->request->data['image']=$uploadimgName;
	                }

	                if($this->request->data['document_del'] == 1){
	                	$this->request->data['document']='';
	                }else{
	                	$this->request->data['document']=$uploaddocName;
	                }

	                if($this->request->data['audio_del'] == 1){
	                	$this->request->data['audio']='';
	                }else{
	                	$this->request->data['audio']=$uploadAudioName;
	                }

	                if($this->request->data['video_del'] == 1){
	                	$this->request->data['video']='';
	                }else{
	                	$this->request->data['video']=$uploadVideoName;
	                }

	                if($this->request->data['question_del'] == 1){
	                	$this->request->data['question']='';
	                }else{
	                	$this->request->data['question']=$uploadQName;
	                }

	                if($this->request->data['final_bid_del'] == 1){
	                	$this->request->data['final_bid']='';
	                }else{
	                	$this->request->data['final_bid']=$uploadFBName;
	                }
	                
	                //$this->request->data['document']=$uploaddocName;
	                //$this->request->data['audio']=$uploadAudioName;
	                //$this->request->data['video']=$uploadVideoName;


                    $addfunds = $this->Consultings->patchEntity($addfunds, $this->request->data);
                    $addfunds->id=$beta_id;
                    $resultSave = $this->Consultings->save($addfunds);
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Updated successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $addfunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData = $message;
								$errorDataArray[$key] = $message; 
								break;
							}
						}
                        $result['code']=404;
						//$result['message']= 'Could not edit. Please try again.';
						$result['message']= $errorData;
						$result['errors']= $errorDataArray;
						echo json_encode($result); 
                    } 
                }else{
            		$result['code']=404;
					$result['message']= 'You do not have access to edit.';
					echo json_encode($result);
            	}      

            }else{
            	$result['code']=404;
				$result['message']= 'Could not edit.';
				echo json_encode($result);
            }
    }


    /**  5>
    *    consultingDetails Method
    *
    *
    ***/
    public function consultingDetails()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['consulting_id'];

	            //$fundetail= $this->Funds->find('all',['conditions'=>['Funds.id'=>$fund_id,'Funds.user_id'=>$user_id,'Funds.status'=>1]])->contain(['Users'])->first();

	        	$fundetail= $this->Consultings->find('all',['conditions'=>['Consultings.id'=>$fund_id]])->contain(['Users'])->first();

	        		if(!empty($fundetail))
	        		{

						$result['code']=200;
						$result['id']=$fundetail->id;
						$result['created_by']= $fundetail->user->first_name.' '.$fundetail->user->last_name;
						$result['created_by_userid']= $fundetail->user->id;
						$result['user_id']=$fundetail->user_id;
						$result['title']=$fundetail->title;
						$result['overview']=$fundetail->overview;
						$result['description']=$fundetail->description;

						$result['interest_keyword_id']= $this->ConsultingUpload->interestKeywordList($fundetail->interest_keyword_id);
						$result['target_keywords_id']= $this->ConsultingUpload->targetMarketList($fundetail->target_keywords_id);

						$result['requirement_distribute_date']=$fundetail->requirement_distribute_date;
						$result['bid_commitment_deadline_date']=$fundetail->bid_commitment_deadline_date;
						$result['assignment_start_date']=$fundetail->assignment_start_date;
						$result['assignment_end_time']=$fundetail->assignment_end_time;
						$result['bid_deadline_date']=$fundetail->bid_deadline_date;
						$result['question_deadline_date']=$fundetail->question_deadline_date;
						$result['answer_date']=$fundetail->answer_date;
						$result['client_overview_date']=$fundetail->client_overview_date;
						$result['bidder_presentation_date']=$fundetail->bidder_presentation_date;
						$result['bid_intent_deadline_date']=$fundetail->bid_intent_deadline_date;
						$result['answer_target_date']=$fundetail->answer_target_date;
						$result['proposal_submit_date']=$fundetail->proposal_submit_date;
						$result['project_start_date']=$fundetail->project_start_date;
						$result['project_award_date']=$fundetail->project_award_date;
						$result['project_complete_date']=$fundetail->project_complete_date;



						if(!empty($fundetail->document)){
							$result['document']="img/consulting/".$fundetail->document;
						}else{
							$result['document']='';
						}
						if(!empty($fundetail->image)){
							$result['image']= "/img/consulting/".$fundetail->image;
						}else{
							$result['image']= '';
						}

						if(!empty($fundetail->audio)){
							$result['audio']= "/img/consulting/".$fundetail->audio;
						}else{
							$result['audio']= '';
						}

						if(!empty($fundetail->video)){
							$result['video']= "/img/consulting/".$fundetail->video;
						}else{
							$result['video']= '';
						}

						if(!empty($fundetail->question)){
							$result['question']= "/img/consulting/".$fundetail->question;
						}else{
							$result['question']= '';
						}


						if(!empty($fundetail->final_bid)){
							$result['final_bid']= "/img/consulting/".$fundetail->final_bid;
						}else{
							$result['final_bid']= '';
						}

						$result['likes']= $this->ConsultingUpload->getLikeCount($fundetail->id);
						$result['dislikes']= $this->ConsultingUpload->getDislikeCount($fundetail->id);
						$result['is_follwed_by_user']= $this->ConsultingUpload->isFollowedbyUser($fundetail->id,$user_id);
						$result['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($fundetail->id,$user_id);
						$result['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($fundetail->id,$user_id);
						$result['isComitted']= $this->ConsultingUpload->isCommitedbyUser($fundetail->id,$user_id);
						$result['numOfCommits']= $this->ConsultingUpload->getCommitCount($fundetail->id);
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

     /**  6>
    *    findConsulting Method
    *
    *
    ***/
    public function findConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Consultings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){
                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM consulting_interest_keywords as KY INNER JOIN consultings as SU ON FIND_IN_SET(KY.id, SU.target_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id !='=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id !='=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id !='=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id !='=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Consultings->find('all',['conditions'=>['Consultings.user_id !='=>$user_id,'Consultings.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Consultings->find('all',['conditions'=>['Consultings.user_id !='=>$user_id,'Consultings.status'=>1]])->contain(['Users']), $config);
	        	}
	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['project_start_date']= $myFundsList->project_start_date;
						$keys['project_complete_date']= $myFundsList->project_complete_date;
						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/consulting/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConsultingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConsultingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($myFundsList->id,$user_id);
						$keys['status']=$myFundsList->status;
						$keys['award_status']=$myFundsList->award_status;

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  7>
    *    myConsulting Method
    *
    *
    ***/
    public function myConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Consultings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM consulting_target_keywords as KY INNER JOIN consultings as SU ON FIND_IN_SET(KY.id, SU.target_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>1,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>1]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>1]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['project_start_date']= $myFundsList->project_start_date;
						$keys['project_complete_date']= $myFundsList->project_complete_date;

						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/consulting/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConsultingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConsultingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($myFundsList->id,$user_id);
						$keys['status']=$myFundsList->status;
						$keys['award_status']=$myFundsList->award_status;

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**  8>
    *    archiveConsultingList Method
    *
    *
    ***/
    public function archiveConsultingList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Consultings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	               	$qq = "SELECT SU.id FROM consulting_target_keywords as KY INNER JOIN consultings as SU ON FIND_IN_SET(KY.id, SU.target_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>2,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>2,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>2,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>2,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>2]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>2]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['project_start_date']= $myFundsList->project_start_date;
						$keys['project_complete_date']= $myFundsList->project_complete_date;

						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/consulting/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConsultingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConsultingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($myFundsList->id,$user_id);
						$keys['status']=$myFundsList->status;
						$keys['award_status']=$myFundsList->award_status;

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }

    /**   9>
    *     closeConsultingList Method
    *
    *
    ***/
    public function closeConsultingList()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingAwards');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id=$this->request->data['user_id'];
				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Consultings.modified' => 'DESC'
							]
						];


				$searchKeyword=$this->request->data['search_text'];
	            if (strpos($searchKeyword, "'") !== false) {
	                $searchKeywordArray=explode("'", $searchKeyword);
	                $searchKeyword=$searchKeywordArray[0];
	            }


                if(!empty($searchKeyword)){

                	$connection = ConnectionManager::get('default');
	                $qq = "SELECT SU.id FROM consulting_target_keywords as KY INNER JOIN consultings as SU ON FIND_IN_SET(KY.id, SU.target_keywords_id) where KY.name like  '%".$searchKeyword."%' GROUP BY SU.id";
	                    
                    $sql = $connection->execute ($qq);
                    $startup_ids = $sql->fetchAll('assoc');
                    $startupIDs=[];

                    foreach($startup_ids as $SingleUser):
                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
                                $startupIDs[] = $SingleUser['id'];
                            }
                    endforeach;

                    if(!empty($startupIDs)){
                    	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>0,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id '=>$user_id, 'Consultings.status'=>0,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%'],
									                                            ['Consultings.id IN' =>$startupIDs]
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
                    }else{

	                	$myFundsLists= $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>0,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']);

	                	$TotalItems= $myFundsLists->count();

	                    $myFundsLists= $this->Paginator->paginate( $this->Consultings->find('all',
									                        ['conditions'=>
									                            [
									                                'Consultings.user_id'=>$user_id, 'Consultings.status'=>0,

									                                'OR' =>[
									                                            ['Consultings.title LIKE' => '%'.$searchKeyword.'%']
									                                        ]        
									                            ]

									                        ])->contain(['Users']),$config);
	                }
                }else{

		            $myFundsLists= $this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>0]])->contain(['Users']);

		            $TotalItems= $myFundsLists->count();

		            $myFundsLists = $this->Paginator->paginate($this->Consultings->find('all',['conditions'=>['Consultings.user_id'=>$user_id,'Consultings.status'=>0]])->contain(['Users']), $config);

	        	}

	        	if(!empty($TotalItems)){
		
					foreach($myFundsLists as $myFundsList){

	                    $keys['id']= $myFundsList->id;
						$keys['title']= $myFundsList->title;
						$keys['project_start_date']= $myFundsList->project_start_date;
						$keys['project_complete_date']= $myFundsList->project_complete_date;

						$keys['description']= $myFundsList->description;
						if(!empty($myFundsList->image)){
							$keys['image']= "/img/consulting/".$myFundsList->image;
						}else{
							$keys['image']= '';
						}

						$keys['created_by']= $myFundsList->user->first_name.' '.$myFundsList->user->last_name;
						$keys['likes']= $this->ConsultingUpload->getLikeCount($myFundsList->id);
						$keys['dislikes']= $this->ConsultingUpload->getDislikeCount($myFundsList->id);
						$keys['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($myFundsList->id,$user_id);
						$keys['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($myFundsList->id,$user_id);
						$keys['status']=$myFundsList->status;
						//$keys['award_status']=$myFundsList->award_status;

						$ConsultingAwardList= $this->ConsultingAwards->find('all',['conditions'=>['consulting_id' => $myFundsList->id]])->first();

						if(!empty($ConsultingAwardList->contractor_id)){
							$keys['award_status']=1;
							$keys['winning_bidder']= $this->Contractor->contractorName($ConsultingAwardList->contractor_id);
						}else{
							$keys['award_status']=0;
							$keys['winning_bidder']= '';
						}
						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No list found.';
						echo json_encode($result);
					}
				}else{
					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}	       	
    }


     /**  10>
    *    archiveConsulting Method
    *
    *
    ***/
    public function archiveConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['consulting_id'];

            	$res= $this->Consultings->query()
                      ->update()
                      ->set(['status' => 2])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Consulting has been archived successfully.';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Consulting could not be archived. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Consulting could not be archived. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /**  11>
    *    deleteService Method
    *
    *
    ***/
    public function deleteConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['consulting_id'];

            	$res= $this->Consultings->query()
                      ->update()
                      ->set(['status' => 3])
                      ->where(['id' => $fund_id,'user_id' => $user_id])
                      ->execute();

            	if ($res) {
            			
            		$result['code']=200;
					$result['message']='The Consulting has been deleted successfully';
					echo json_encode($result);

            	}else{
            		
            		$result['code']=404;
					$result['message']= 'The Consulting could not be deleted. Please, try again.';
					echo json_encode($result);
            	}

			}else{
				$result['code']=404;
				$result['message']= 'The Consulting could not be deleted. Please, try again.';
				echo json_encode($result);
			}	       	
    }

   /* 12>
    *  closeConsulting Method
    *
    *
    ***/
    public function closeConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingAwards');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['consulting_id'];
				$contractor_id = $this->request->data['contractor_id'];
				if(!empty($contractor_id)){
					$awardstatus=1;
				}else{
					$awardstatus=0;
				}
				$exists= $this->Consultings->exists(['id' => $fund_id,'user_id' => $user_id]);

				if($exists){ 

	            	$res= $this->Consultings->query()
	                      ->update()
	                      ->set(['status' => 0,'award_status'=>$awardstatus])
	                      ->where(['id' => $fund_id,'user_id' => $user_id])
	                      ->execute();

	                //Save  record to award table
	                $isExists= $this->ConsultingAwards->find('all',['conditions'=>['consulting_id' => $fund_id]])->first(); 
	                     
	                $ConsultingAwards = $this->ConsultingAwards->newEntity(); 
	                $ConsultingAwards = $this->ConsultingAwards->patchEntity($ConsultingAwards, $this->request->data); 

	                if(!empty($isExists)){
                        $ConsultingAwards->id = $isExists->id;
                    }
	                $resultSave = $this->ConsultingAwards->save($ConsultingAwards);  

	            	if ($resultSave) {
	            			
	            		$result['code']=200;
						$result['message']='The Consulting has been closed successfully';
						echo json_encode($result);

	            	}else{
	            		
	            		$result['code']=404;
						$result['message']= 'The Consulting could not be closed. Please, try again.';
						echo json_encode($result);
	            	}
	            }else{
	            	$result['code']=404;
					$result['message']= 'No record found. Please, try again.';
					echo json_encode($result);
	            }	

			}else{
				$result['code']=404;
				$result['message']= 'The Consulting could not be closed. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /* 13>
    *  openConsulting Method
    *
    *
    ***/
    public function openConsulting()
    {
    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingAwards');

            if($this->request->is('post'))
            {
            	$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$user_id = $this->request->data['user_id'];
				$fund_id = $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fund_id,'user_id' => $user_id]);

				if($exists){ 

	            	$res= $this->Consultings->query()
	                      ->update()
	                      ->set(['status' => 1,'award_status'=>0])
	                      ->where(['id' => $fund_id,'user_id' => $user_id])
	                      ->execute();

	                //delete record from award table
                    $likeExists= $this->ConsultingAwards->find('all',['conditions'=>['consulting_id' => $fund_id]])->first();
                    if(!empty($likeExists)){
                        $entity = $this->ConsultingAwards->get($likeExists->id);
                        $this->ConsultingAwards->delete($entity);
                    }      
	            	if ($res) {
	            			
	            		$result['code']=200;
						$result['message']='The Consulting has been opened successfully.';
						echo json_encode($result);

	            	}else{
	            		
	            		$result['code']=404;
						$result['message']= 'The Consulting could not be opened. Please, try again.';
						echo json_encode($result);
	            	}

	            }else{
	            	$result['code']=404;
					$result['message']= 'No record found. Please, try again.';
					echo json_encode($result);
	            }	
			}else{
				$result['code']=404;
				$result['message']= 'The Consulting could not be opened. Please, try again.';
				echo json_encode($result);
			}	       	
    }

    /*  15>
     *  likeConsulting method 
     *
     *
     *
     *
     ***/
    public function likeConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['like_by'];
				$fundId= $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$this->loadModel('ConsultingDislikes');
					$likeExists= $this->ConsultingDislikes->find('all',['conditions'=>['dislike_by'=>$likeBy,'consulting_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConsultingDislikes->get($likeExists->id);
						$this->ConsultingDislikes->delete($entity);
					}

	                $this->loadModel('ConsultingLikes');
					$likefunds = $this->ConsultingLikes->newEntity(); 

					
	                $likefunds = $this->ConsultingLikes->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConsultingLikes->find('all',['conditions'=>['like_by'=>$likeBy,'consulting_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    $resultSave = $this->ConsultingLikes->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Consulting liked successfully.';
							$result['likes']= $this->ConsultingUpload->getLikeCount($fundId);
							$result['dislikes']= $this->ConsultingUpload->getDislikeCount($fundId);
							$result['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($fundId,$likeBy);
						    $result['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($fundId,$likeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not like. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Consulting.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not like Consulting.';
				echo json_encode($result);
            }
    }


    /*  16>
     *  disLikeConsulting method 
     *
     *
     *
     *
     ***/
    public function disLikeConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$dislikeBy= $this->request->data['dislike_by'];
				$fundId= $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

					//delete record from like table
					$this->loadModel('ConsultingLikes');
					$likeExists= $this->ConsultingLikes->find('all',['conditions'=>['like_by'=>$dislikeBy,'consulting_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConsultingLikes->get($likeExists->id);
						$this->ConsultingLikes->delete($entity);
					}

	                $this->loadModel('ConsultingDislikes');
					$dislikefunds = $this->ConsultingDislikes->newEntity(); 

					
	                $dislikefunds = $this->ConsultingDislikes->patchEntity($dislikefunds, $this->request->data);
	                
	                //Check if liked already
	                $dislikeExists= $this->ConsultingDislikes->find('all',['conditions'=>['dislike_by'=>$dislikeBy,'consulting_id' => $fundId]])->first();

	                if(!empty($dislikeExists)){
	                	$dislikefunds->id=$dislikeExists->id;
	                }
	                    $resultSave = $this->ConsultingDislikes->save($dislikefunds);
	                    if ($resultSave){

	                        $result['code']=200;
							$result['message']= 'Consulting disliked successfully.';
							$result['dislikes']= $this->ConsultingUpload->getDislikeCount($fundId);
							$result['likes']= $this->ConsultingUpload->getLikeCount($fundId);
							$result['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($fundId,$dislikeBy);
						    $result['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($fundId,$dislikeBy);
							echo json_encode($result);

	                    }else{
	                        $errors = $dislikefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not dislike Consulting. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Consulting.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not dislike Consulting.';
				echo json_encode($result);
            }
    }

    /* 17>
     *  ConsultingLikeList method 
     *
     *
     *
     *
     ***/
    public function consultingLikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['consulting_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ConsultingLikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ConsultingLikes->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ConsultingLikes->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No like list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No like list found.';
				echo json_encode($result);
            }
    }

        /* 18> 
     *  webinarDislikeList method 
     *
     *
     *
     *
     ***/
    public function consultingDislikeList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['consulting_id'];
					$page_no= $this->request->data['page_no'];

	                $this->loadModel('ConsultingDislikes');

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];
	            
	                $likelists= $this->ConsultingDislikes->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

	                $TotalItems= $likelists->count();

	                $likelists = $this->Paginator->paginate($this->ConsultingDislikes->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);

	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No dislike list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No Consulting dislike list found.';
				echo json_encode($result);
            }
    }


    /*  19>
     *  followWebinar method 
     *
     *
     *
     *
     ***/
    public function followConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

	                $this->loadModel('ConsultingFollowers');
					$FundFollowers = $this->ConsultingFollowers->newEntity(); 

					$this->request->data['user_id']=$this->request->data['follow_by'];
	                $likefunds = $this->ConsultingFollowers->patchEntity($FundFollowers, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConsultingFollowers->find('all',['conditions'=>['user_id'=>$followBy,'consulting_id' => $fundId]])->first();
	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }
	                    
	                    $resultSave = $this->ConsultingFollowers->save($likefunds);
	                    if ($resultSave){

	                    	//Save Feeds
                            $this->Feeds->saveConsultingFeeds($followBy,'feeds_consulting_following',$fundId);

	                        $result['code']=200;
							$result['message']= 'Consulting followed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not follow Consulting. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Consulting.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not follow Consulting.';
				echo json_encode($result);
            }
    }


    /*  20> 
     *  unfollowConsulting method 
     *
     *
     *
     *
     ***/
    public function unfollowConsulting()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$followBy= $this->request->data['follow_by'];
				$fundId= $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

					//delete record from follow table
					$this->loadModel('ConsultingFollowers');
					$likeExists= $this->ConsultingFollowers->find('all',['conditions'=>['user_id'=>$followBy,'consulting_id' => $fundId]])->first();

					if(!empty($likeExists)){
						$entity = $this->ConsultingFollowers->get($likeExists->id);
						$this->ConsultingFollowers->delete($entity);
					}

					$result['code']=200;
					$result['message']= 'Consulting unfollowed successfully.';
					echo json_encode($result);
   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not find Consulting.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not unfollow Consulting.';
				echo json_encode($result);
            }
    }

    /*  21>
     *  webinarCommitment method 
     *
     *
     *
     *
     ***/
    public function consultingCommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingCommitments');

            if($this->request->is('post'))
            {

        		/*$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;*/


				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['consulting_id'];



				$uploadFBError='';
                $uploadFBName='';
				if(!empty($this->request->data['document']['name'])){
				 
					$data5 = [];
					$data5 = $this->request->data['document']; 
					$uploadFB = $this->ConsultingUpload->uploadDoc($data5);

					if(empty($uploadFB['errors'])){
	                    $uploadFBName=$uploadFB['imgName'];
					}else{
						$flag=1;
						$uploadFBError=$uploadFB['errors'];
					}
				}

				
                if(!empty($flag)){

                    if(!empty($uploadFBError)){
                        $result['code']=404;
						$result['message']= 'Oops somthing wrong! Please try again.';
						$result['errors']= $uploadImgError;
						echo json_encode($result);
						exit;
                    }
                }
                if(empty($uploadFBName)){
                	$result['code']=404;
					$result['message']= 'Please upload document.';
					echo json_encode($result);
					exit;
                }

                $this->request->data['document']=$uploadFBName;

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

					$likefunds = $this->ConsultingCommitments->newEntity(); 
	                $likefunds = $this->ConsultingCommitments->patchEntity($likefunds, $this->request->data);

	                //Check if liked already
	                $likeExists= $this->ConsultingCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'consulting_id' => $fundId]])->first();

	                if(!empty($likeExists)){
	                	$likefunds->id=$likeExists->id;
	                }

	                    $resultSave = $this->ConsultingCommitments->save($likefunds);
	                    if ($resultSave){

	                        $result['code']=200;
	                        $result['numOfCommits']= $this->ConsultingUpload->getCommitCount($fundId);
							$result['message']= 'Committed successfully.';
							echo json_encode($result);

	                    }else{
	                        $errors = $likefunds->errors();
						 	foreach($errors as $key=>$value){
								foreach($value as $keytwo=>$message){
									$errorData[$key] = $message;
								}
							}
	                        $result['code']=404;
							$result['message']= 'Could not Commit. Please try again.';
							$result['errors']= $errorData;
							echo json_encode($result); 
	                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not Commit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not Commit. Please try again.';
				echo json_encode($result);
            }
    }


    /*  22>
     *  consultingUncommitment method 
     *
     *
     *
     *
     ***/
    public function consultingUncommitment()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingCommitments');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$likeBy= $this->request->data['user_id'];
				$fundId= $this->request->data['consulting_id'];

				$exists= $this->Consultings->exists(['id' => $fundId]);

				if($exists){

					//delete record from dislike table
					$likeExists= $this->ConsultingCommitments->find('all',['conditions'=>['user_id'=>$likeBy,'consulting_id' => $fundId]])->first();
					if(!empty($likeExists)){
						$entity = $this->ConsultingCommitments->get($likeExists->id);
						$this->ConsultingCommitments->delete($entity);
					}

                    $result['code']=200;
                    $result['numOfCommits']= $this->ConsultingUpload->getCommitCount($fundId);
					$result['message']= 'Uncommitted successfully.';
					echo json_encode($result); 
  
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not uncommit or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not uncommit. Please try again.';
				echo json_encode($result);
            }
    }

    /* 23>
     *  consultingCommitmentList method 
     *
     *
     *
     *
     ***/
    public function consultingCommitmentList()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('ConsultingCommitments');
            $this->loadModel('Users');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

					$fundId= $this->request->data['consulting_id'];
					$page_no= $this->request->data['page_no'];

	                $page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
					$config = 	[
								'limit' => 10,
								'page'=>$page_no,
							];

					if(isset($this->request->data['search_text'])){
						$searchKeyword=$this->request->data['search_text'];
					}else{
						$searchKeyword='';
					}
					
		            if (strpos($searchKeyword, "'") !== false) {
		                $searchKeywordArray=explode("'", $searchKeyword);
		                $searchKeyword=$searchKeywordArray[0];
		            }


	                if(!empty($searchKeyword)){

	                	$users= $this->Users->find('all',['conditions'=>[ 
	                                                                    'OR' =>[
	                                                                                ['first_name LIKE'=>'%'.$searchKeyword.'%'],
	                                                                                ['last_name LIKE' =>'%'.$searchKeyword.'%']
	                                                                            ]
	                                                                    ]])->toArray();

	                    if(!empty($users)){

	                        foreach($users as $SingleUser):
	                            if(isset($SingleUser['id'])&&($SingleUser['id']!='')){
	                                $contractorIds[] = $SingleUser['id'];
	                            }
	                        endforeach;

	                        $conditions = ['ConsultingCommitments.consulting_id'=>$fundId, 'ConsultingCommitments.user_id IN'=>$contractorIds]; 

	                        $likelists = $this->ConsultingCommitments->find('all',['conditions'=>$conditions])->contain(['Users'=>['ContractorBasics']]);

	                        $TotalItems= $likelists->count();

	                        $likelists = $this->Paginator->paginate($this->ConsultingCommitments->find('all',['conditions'=>$conditions])->contain(['Users'=>['ContractorBasics']]), $config);
	                    }else{
	                    	$TotalItems='';
	                    } 
	                }else{

	            
			                $likelists= $this->ConsultingCommitments->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]);

			                $TotalItems= $likelists->count();

			                $likelists = $this->Paginator->paginate($this->ConsultingCommitments->find('all',['conditions'=>['consulting_id' => $fundId]])->contain(['Users'=>['ContractorBasics']]), $config);
			        }
			                
	                if(!empty($TotalItems)){
		
						foreach($likelists as $likelist){

		                    $keys['id']= $likelist->user->id;
		                    if(!empty($likelist->user)){
		                    	$keys['name']= $likelist->user->first_name.' '.$likelist->user->last_name;
		                    }else{
		                    	$keys['name']='';
		                    }

		                    if(!empty($likelist->user->contractor_basic)){
		                    	$keys['bio']= $likelist->user->contractor_basic->bio;
		                    	$keys['image']= "/img/profile_pic/".$likelist->user->contractor_basic->image;
		                    }else{
		                    	$keys['bio']= '';
		                    	$keys['image']= '';
		                    }


							if(!empty($likelist->document)){
								$keys['document']= "/img/consulting/".$likelist->document;
							}else{
								$keys['document']= '';
							}
							

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['users']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No commitment list found.';
						echo json_encode($result);
					}       
            }else{
            	$result['code']=404;
				$result['message']= 'No commitment list found.';
				echo json_encode($result);
            }
    }


    /*  24>
     *  sendConsultingInvitation method 
     *
     *
     *
     *
     ***/
    public function sendConsultingInvitation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingInvitations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$sent_by= $this->request->data['sent_by'];
				$sent_to= $this->request->data['sent_to'];
				$consulting_id= $this->request->data['consulting_id'];

				if(!empty($sent_to)){

					$sentArray= explode(',', $sent_to);
				    $sentCount= count($sentArray);

					for($i=0; $i<$sentCount;$i++){

						$this->request->data['sent_to']=$sentArray[$i];
						$this->request->data['status']=0;
						$likefunds = $this->ConsultingInvitations->newEntity(); 
	                	$likefunds = $this->ConsultingInvitations->patchEntity($likefunds, $this->request->data);

	                	//Check if liked already
		                $likeExists= $this->ConsultingInvitations->find('all',['conditions'=>['sent_by'=>$sent_by,'sent_to'=>$sentArray[$i],'consulting_id' => $consulting_id]])->first();

		                if(!empty($likeExists)){
		                	$likefunds->id=$likeExists->id;
		                }

	                	$resultSave = $this->ConsultingInvitations->save($likefunds);
					}
					
                    if ($resultSave){

                        $result['code']=200;
						$result['message']= 'Invitation sent successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $likefunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not send Invitation. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not send Invitation please select any contractor.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not send Invitation. Please try again.';
				echo json_encode($result);
            }
    }


    /*  25>
     *  acceptConsultingInvitation method 
     *
     *
     *
     *
     ***/
    public function acceptConsultingInvitation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingInvitations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$sent_to= $this->request->data['user_id'];
				$sent_by= $this->request->data['sent_by'];
				$consulting_id= $this->request->data['consulting_id'];

				$exists= $this->ConsultingInvitations->exists(['sent_by'=>$sent_by,'sent_to'=>$sent_to,'consulting_id' => $consulting_id]);

				if($exists){

					$res= $this->ConsultingInvitations->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['sent_by' => $sent_by,'sent_to' => $sent_to,'consulting_id' => $consulting_id])
                      ->execute(); 
					
                    if ($res){

                        $result['code']=200;
						$result['message']= 'Invitation accepted successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $likefunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not accept Invitation. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not accept Invitation or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not accept Invitation. Please try again.';
				echo json_encode($result);
            }
    }


    /*  26>
     *  rejectConsultingInvitation method 
     *
     *
     *
     *
     ***/
    public function rejectConsultingInvitation()
    {
            $this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingInvitations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$sent_to= $this->request->data['user_id'];
				$sent_by= $this->request->data['sent_by'];
				$consulting_id= $this->request->data['consulting_id'];

				$exists= $this->ConsultingInvitations->exists(['sent_by'=>$sent_by,'sent_to'=>$sent_to,'consulting_id' => $consulting_id]);

				if($exists){

					$likeExists= $this->ConsultingInvitations->find('all',['conditions'=>['sent_by'=>$sent_by,'sent_to'=>$sent_to,'consulting_id' => $consulting_id]])->first();

					if(!empty($likeExists)){
						$entity = $this->ConsultingInvitations->get($likeExists->id);
						$this->ConsultingInvitations->delete($entity);

                        $result['code']=200;
						$result['message']= 'Invitation rejected successfully.';
						echo json_encode($result);

                    }else{
                        $errors = $likefunds->errors();
					 	foreach($errors as $key=>$value){
							foreach($value as $keytwo=>$message){
								$errorData[$key] = $message;
							}
						}
                        $result['code']=404;
						$result['message']= 'Could not reject Invitation. Please try again.';
						$result['errors']= $errorData;
						echo json_encode($result); 
                    }   
	            }else{
	            	$result['code']=404;
					$result['message']= 'Could not reject Invitation or no record found. Please try again.';
					echo json_encode($result);
	            }        
            }else{
            	$result['code']=404;
				$result['message']= 'Could not reject Invitation. Please try again.';
				echo json_encode($result);
            }
    }

    /*  27>
     *  rejectConsultingInvitation method 
     *
     *
     *
     *
     ***/
    public function consultingInvitationList()
    {

    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('Consultings');
            $this->loadModel('ConsultingInvitations');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$page_no=$this->request->data['page_no'];

				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
						];

				$sent_to= $this->request->data['user_id'];

				$ConsultingInvitations= $this->ConsultingInvitations->find('all',['conditions'=>['ConsultingInvitations.sent_to'=>$sent_to,'ConsultingInvitations.status'=>0]]);

				$TotalItems= $ConsultingInvitations->count();

	            $ConsultingInvitations = $this->Paginator->paginate($this->ConsultingInvitations->find('all',['conditions'=>['ConsultingInvitations.sent_to'=>$sent_to,'ConsultingInvitations.status'=>0]])->contain(['Consultings'=>['Users'],'ByUser'=>['ContractorBasics'],'ToUser'=>['ContractorBasics']]), $config);

	            if(!empty($TotalItems)){
		
						foreach($ConsultingInvitations as $ConsultingInvitation){

							$keys['id']=$ConsultingInvitation->consulting->id;
							$keys['title']=$ConsultingInvitation->consulting->title;
							$keys['overview']=$ConsultingInvitation->consulting->overview;
							$keys['description']=$ConsultingInvitation->consulting->description;
							$keys['project_start_date']=$ConsultingInvitation->consulting->project_start_date;
							$keys['project_complete_date']=$ConsultingInvitation->consulting->project_complete_date;
							$keys['award_status']=$ConsultingInvitation->consulting->award_status;
							$keys['created_by']=$ConsultingInvitation->consulting->user->first_name.' '.$ConsultingInvitation->consulting->user->last_name;

							if(!empty($ConsultingInvitation->consulting->image)){
								$keys['image']= "/img/consulting/".$ConsultingInvitation->consulting->image;
							}else{
								$keys['image']= '';
							}

							$keys['likes']= $this->ConsultingUpload->getLikeCount($ConsultingInvitation->consulting->id);
							$keys['dislikes']= $this->ConsultingUpload->getDislikeCount($ConsultingInvitation->consulting->id);
							$keys['is_liked_by_user']= $this->ConsultingUpload->isLikedbyUser($ConsultingInvitation->consulting->id,$sent_to);
							$keys['is_disliked_by_user']= $this->ConsultingUpload->isDislikedbyUser($ConsultingInvitation->consulting->id,$sent_to);
							$keys['status']=$ConsultingInvitation->status;

		                    $keys['sender_id']= $ConsultingInvitation->by_user->id;

		                    if(!empty($ConsultingInvitation->by_user)){
		                    	$keys['sender_name']= $ConsultingInvitation->by_user->first_name.' '.$ConsultingInvitation->by_user->last_name;
		                    }else{
		                    	$keys['sender_name']='';
		                    }

		                    if(!empty($ConsultingInvitation->by_user->contractor_basic)){
		                    	$keys['sender_bio']= $ConsultingInvitation->by_user->contractor_basic->bio;
		                    	$keys['sender_image']= "/img/profile_pic/".$ConsultingInvitation->by_user->contractor_basic->image;
		                    }else{
		                    	$keys['sender_bio']= '';
		                    	$keys['sender_image']= '';
		                    }

							$finalConnections[] = $keys;
						}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['invitations']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No invitations list found.';
						echo json_encode($result);
					}
			}else{

            	$result['code']=404;
				$result['message']= 'No invitations list found.';
				echo json_encode($result);

            }
    }


    /*  28>
     *  invitationContractorList method 
     *
     *
     *
     *
     ***/
	public function invitationContractorList()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('EntrepreneurProfessionals');
		$this->loadModel('Keywords');
		$this->loadModel('Users');
		$this->loadModel('ContractorBasics');
		$this->loadModel('ContractorProfessionals');

		$this->loadModel('Consultings');
		
		$result['TotalItems'] = '0';
		$result['Contractors'] = [];
		$result['code'] = 404;
		$finalDocs = [];
		$entrepreneur_id = $_REQUEST['user_id'];
		$UserId = $entrepreneur_id; //entrepreneur id
		$consulting_id= $_REQUEST['consulting_id'];

		$consultingDetails= $this->Consultings->get($consulting_id);
		$consultingOwner= $consultingDetails->user_id;

		$search_text = (isset($_REQUEST['search_text'])&&($_REQUEST['search_text']!=''))?$_REQUEST['search_text']:'';
		
		
		$contractorIds = [];
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		
		if($search_text==''):
			
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'ContractorProfessionals.id' => 'asc'
							]
						];

		//there is no seach text availbale in the search of contractor
			$EntrepreneurProfessionalsKeywords = $this->EntrepreneurProfessionals->find('all',
												['conditions'=>['EntrepreneurProfessionals.user_id'=>$entrepreneur_id]])
												->select(['keywords'])
												->first();
			 
			if(!empty($EntrepreneurProfessionalsKeywords)&&($EntrepreneurProfessionalsKeywords['keywords']!='')):
			
				$EntrepreneurProfessionalsKeywords = $EntrepreneurProfessionalsKeywords->toArray();
				$conditions = [];
				
				array_push($conditions,['ContractorProfessionals.user_id !='=>$entrepreneur_id]);
				
				$conditions['OR'] = [];
				 
				foreach(explode(',',$EntrepreneurProfessionalsKeywords['keywords']) as $single_keyword):
					 
					 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,ContractorProfessionals.keywords)"]);
					 
				endforeach;
				 
			//getting the campaigns list
				
				$query = $this->ContractorProfessionals->find('all')
										->where($conditions)
										->select(['user_id']);
				
				$result['TotalItems'] = $query->count();
				
				$contractors = $this->Paginator->paginate(
														$this->ContractorProfessionals->find('all')
														->where($conditions)
														->select(['user_id'])
												, $config);
				  
				if($contractors->toArray()){
					
					$contractors = $contractors->toArray();
					
					foreach($contractors as $singleContractor):
						if($singleContractor->user_id!=''):
							$contractorIds[] = $singleContractor->user_id;
						endif;
					endforeach;
					
					if(!empty($contractorIds)){
						
						// Added thid ->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC']) to sort result by name
						$users = $this->Users->find('all',['conditions'=>['Users.id IN'=>$contractorIds,
																		  'Users.id !='=>$entrepreneur_id
																 ]
												 ])
												->contain(['ContractorBasics','ContractorProfessionals'])
												->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC'])
												->toArray();
								
						if(!empty($users)){
								
								foreach($users as $singleUser){
									if($consultingOwner != $singleUser->id){
										$keys = [];
										$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';
										
										if((isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!='')
										   )
										   ||
										   (isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!='')
										   )
										  ){
											
											$first_name = (isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
											
											$last_name = (isset($singleUser['contractor_basic']['last_name'])
											&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
											
											$name = $first_name.' '.$last_name;
										  }
										else{
											
											$first_name = (isset($singleUser['first_name'])
											&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
											
											$last_name = (isset($singleUser['last_name'])
											&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
											
											$name = $first_name.' '.$last_name;
										}
										 
										$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']);
										$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
										$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
										$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
														&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
										
										$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
														&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
										
										$is_invitation_sent = $this->ConsultingUpload->checkInvitationSent($consulting_id,$UserId,$singleUser->id);

										$keys['is_invitation_sent']=$is_invitation_sent;

										$finalSkills = []; 
										if(isset($singleUser['contractor_professional']['skills'])&&
												 $singleUser['contractor_professional']['skills']!=''):
											
											$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
											
											
											if(!empty($userSkills)):
												
												foreach($userSkills as $key=>$value){
													$skills['id'] = ($key!='')?$key:' ';
													$skills['name'] = ($value!=' ')?$value:' ';
													
													$finalSkills[] = $skills;
												}
												
												$keys['skills'] = $finalSkills;
											else:
												$keys['skills'] = [];
											endif;
										else:
												$keys['skills'] = [];
										endif;
										 
										 $finalKeywords = [];
										if(isset($singleUser['contractor_professional']['keywords'])&&
												 $singleUser['contractor_professional']['keywords']!=''):
											
											$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
											
											if(!empty($userKeywords)):
											 
												foreach($userKeywords as $key=>$value){
													$keywords['id'] = ($key!='')?$key:' ';
													$keywords['name'] = ($value!=' ')?$value:' ';
													
													$finalKeywords[] = $keywords;
												}
												$keys['keywords'] = $finalKeywords;
											else:
												$keys['keywords'] = [];
											endif;
										else:
												$keys['keywords'] = [];
										endif;
										
										$finalDocs[] = $keys;
									}
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
					
				}
		 
			endif;
		
		else:
			//'Users.id' => 'asc'
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Users.first_name' => 'asc','Users.last_name' => 'ASC'
							]
						];
				
				$connection = ConnectionManager::get('default');
				
				$qq = "SELECT CP.user_id FROM keywords as KY INNER JOIN contractor_professionals as CP
											 ON FIND_IN_SET(KY.id, CP.keywords) where KY.name like '%".$_REQUEST['search_text']."%' GROUP BY CP.user_id
											 UNION SELECT CB.user_id FROM contractor_basics as CB where CB.first_name like '%".$_REQUEST['search_text']."%'
											 OR CB.last_name like '%".$_REQUEST['search_text']."%' OR (CB.price='".$_REQUEST['search_text']."' && CB.price!='' && CB.price!=0) GROUP BY CB.user_id";
				
				$sql = $connection->execute ($qq);
			    $user_ids = $sql->fetchAll('assoc');
				
				if(!empty($user_ids)):
					
					
					foreach($user_ids as $SingleUser):
						if(isset($SingleUser['user_id'])&&($SingleUser['user_id']!='')){
							$contractorIds[] = $SingleUser['user_id'];
						}
					endforeach;
					
					$conditions = ['Users.id IN'=>$contractorIds,
								   'Users.id !='=>$entrepreneur_id
								   ];
					
					$query = $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals']);
					
					$result['TotalItems'] = $query->count();
					
					if(!empty($contractorIds)){
						
						$users = $this->Paginator->paginate(
															 $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals'])
													, $config);
					 	
						if(!empty($users)){
								
								foreach($users as $singleUser){
									if($consultingOwner != $singleUser->id){
										$keys = [];
										$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';
										
										if((isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!='')
										   )
										   ||
										   (isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!='')
										   )
										  ){
											
											$first_name = (isset($singleUser['contractor_basic']['first_name'])
											&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
											
											$last_name = (isset($singleUser['contractor_basic']['last_name'])
											&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
											
											$name = $first_name.' '.$last_name;
										  }
										else{
											
											$first_name = (isset($singleUser['first_name'])
											&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
											
											$last_name = (isset($singleUser['last_name'])
											&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
											
											$name = $first_name.' '.$last_name;
										}
										$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']); 
										$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
										$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
										$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
														&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
										
										$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
														&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
										$is_invitation_sent = $this->ConsultingUpload->checkInvitationSent($consulting_id,$UserId,$singleUser->id);

										$keys['is_invitation_sent']=$is_invitation_sent;

										$finalSkills = []; 
										if(isset($singleUser['contractor_professional']['skills'])&&
												 $singleUser['contractor_professional']['skills']!=''):
											
											$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
											
											
											if(!empty($userSkills)):
												
												foreach($userSkills as $key=>$value){
													$skills['id'] = ($key!='')?$key:' ';
													$skills['name'] = ($value!=' ')?$value:' ';
													
													$finalSkills[] = $skills;
												}
												
												$keys['skills'] = $finalSkills;
											else:
												$keys['skills'] = [];
											endif;
										else:
												$keys['skills'] = [];
										endif;
										 
										 $finalKeywords = [];
										if(isset($singleUser['contractor_professional']['keywords'])&&
												 $singleUser['contractor_professional']['keywords']!=''):
											
											$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
											
											if(!empty($userKeywords)):
											 
												foreach($userKeywords as $key=>$value){
													$keywords['id'] = ($key!='')?$key:' ';
													$keywords['name'] = ($value!=' ')?$value:' ';
													
													$finalKeywords[] = $keywords;
												}
												$keys['keywords'] = $finalKeywords;
											else:
												$keys['keywords'] = [];
											endif;
										else:
												$keys['keywords'] = [];
										endif;
										
										$finalDocs[] = $keys;
									}
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
				 
			endif;
				
		endif;
		
		echo json_encode($result);
					   
	}
	

	/*  
     *  User Feed List method 
     *
     *
     *
     *
     ***/
    public function userFeedList()
    {

    		$this->viewBuilder()->layout(false);
            $this->render(false);
            $this->loadModel('UserFeeds');

            if($this->request->is('post'))
            {

        		$json = file_get_contents('php://input');
				$jsonData = json_decode($json, true);
				$this->request->data = $jsonData;

				$page_no=$this->request->data['page_no'];
				$page_no = (isset($page_no)&&($page_no!=''))?$page_no:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'UserFeeds.id' => 'DESC'
							]
						];

				$receiver_id= $this->request->data['user_id'];

				$UserFeeds= $this->UserFeeds->find('all',['conditions'=>['UserFeeds.receiver_id'=>$receiver_id]])->contain(['Sender'=>['ContractorBasics'],'Receiver'=>['ContractorBasics']]);

				$TotalItems= $UserFeeds->count();

	            $UserFeeds = $this->Paginator->paginate($this->UserFeeds->find('all',['conditions'=>['UserFeeds.receiver_id'=>$receiver_id]])->contain(['Sender'=>['ContractorBasics'],'Receiver'=>['ContractorBasics']]), $config);

	            if(!empty($TotalItems)){

						foreach($UserFeeds as $UserFeed){

							$keys['id']=$UserFeed->id;

							$keys['sender_name']= $UserFeed->sender->first_name.' '.$UserFeed->receiver->last_name;

							if($UserFeed->type == 'feeds_startup_completed_assignment'){

								$keys['message']=$UserFeed->receiver->first_name.' '.$UserFeed->sender->last_name.$UserFeed->title;

							}else{
								$keys['message']=$UserFeed->sender->first_name.' '.$UserFeed->sender->last_name.$UserFeed->title;
							}
							

							

							if(!empty($UserFeed->file1)){
								$keys['file1']='img/feed/'.$UserFeed->file1;
							}else{
								$keys['file1']='';
							}

							if(!empty($UserFeed->file2)){
								$keys['file2']='img/feed/'.$UserFeed->file2;
							}else{
								$keys['file2']='';
							}


							if(!empty($UserFeed->file3)){
								$keys['file3']='img/feed/'.$UserFeed->file3;
							}else{
								$keys['file3']='';
							}

							if(!empty($UserFeed->file4)){
								$keys['file4']='img/feed/'.$UserFeed->file4;
							}else{
								$keys['file4']='';
							}
							
							$keys['type']=$UserFeed->type;
		                    $keys['data']=json_decode($UserFeed->data);
		                    $keys['date']=date_format($UserFeed->created,"M d, Y");

		                //Startups    
							if($UserFeed->type == 'feeds_startup_added' or $UserFeed->type == 'feeds_startup_updated' or $UserFeed->type == 'feeds_startup_member_added' or $UserFeed->type == 'feeds_startup_completed_assignment' ){
								

								$data= json_decode($UserFeed->data);
								$this->loadModel('Startups');
								$startups= $this->Startups->get($data->record_id);

								if(!empty($startups)){
									$keys['title']= $startups->name;

									$keys['sender_image']= '';
									if(!empty($startups->roadmap_graphic)){
										$keys['sender_image']= "/img/roadmap/".$startups->roadmap_graphic;
									}
									
									$keys['sender_bio']= $startups->description;

								}else{
									$keys['title']= 'Startup';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}

						//Funds 		
							}else if($UserFeed->type == 'feeds_fund_added' or $UserFeed->type == 'feeds_fund_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Funds');
								$funds= $this->Funds->get($data->record_id);

								if(!empty($funds)){
									$keys['title']= $funds->title;
									$keys['sender_image']= '';
									if(!empty($funds->image)){
										$keys['sender_image']= "/img/funds/".$funds->image;
									}
									
									$keys['sender_bio']= $funds->description;

								}else{
									$keys['title']= 'Fund';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Campaign
							}else if($UserFeed->type == 'feeds_campaign_added' or $UserFeed->type == 'feeds_campaign_following' or $UserFeed->type=='feeds_campaign_commited'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Campaigns');
								$Campaigns= $this->Campaigns->get($data->record_id);

								if(!empty($Campaigns)){
									$keys['title']= $Campaigns->campaigns_name;
									$keys['sender_image']= '';
									if(!empty($Campaigns->campaign_image)){
										$keys['sender_image']= "/img/campaign/".$Campaigns->campaign_image;
									}
									
									$keys['sender_bio']= $Campaigns->summary;

								}else{
									$keys['title']= 'Campaign';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Self Improvements
							}else if($UserFeed->type == 'feeds_improvement_added' or $UserFeed->type == 'feeds_improvement_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('SelfImprovements');
								$SelfImprovements= $this->SelfImprovements->get($data->record_id);

								if(!empty($SelfImprovements)){
									$keys['title']= $SelfImprovements->title;
									$keys['sender_image']= '';
									if(!empty($SelfImprovements->image)){
										$keys['sender_image']= "/img/self/".$SelfImprovements->image;
									}
									
									$keys['sender_bio']= $SelfImprovements->description;

								}else{
									$keys['title']= 'Self';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Career		
							}else if($UserFeed->type == 'feeds_career_added' or $UserFeed->type == 'feeds_career_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('CareerAdvancements');
								$CareerAdvancements= $this->CareerAdvancements->get($data->record_id);

								if(!empty($CareerAdvancements)){
									$keys['title']= $CareerAdvancements->title;
									$keys['sender_image']= '';
									if(!empty($CareerAdvancements->image)){
										$keys['sender_image']= "/img/career/".$CareerAdvancements->image;
									}
									
									$keys['sender_bio']= $CareerAdvancements->description;

								}else{
									$keys['title']= 'Career Help';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Organization		
							}else if($UserFeed->type == 'feeds_organization_added' or $UserFeed->type == 'feeds_organization_updated'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('SubAdminDetails');
								$SubAdminDetails= $this->SubAdminDetails->get($data->record_id);

								if(!empty($SubAdminDetails)){
									$keys['title']= $SubAdminDetails->company_name;
									$keys['sender_image']= '';
									if(!empty($SubAdminDetails->profile_image)){
										$keys['sender_image']= "/img/subadmin_profile_image/".$SubAdminDetails->profile_image;
									}
									
									$keys['sender_bio']= $SubAdminDetails->description;

								}else{
									$keys['title']= 'Organization';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Forum		
							}else if($UserFeed->type == 'feeds_forum_added' or $UserFeed->type == 'feeds_forum_message'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Forums');
								$Forums= $this->Forums->get($data->record_id);

								if(!empty($Forums)){
									$keys['title']= $Forums->title;
									$keys['sender_image']= '';
									if(!empty($Forums->image)){
										$keys['sender_image']= "/img/forums/".$Forums->image;
									}
									
									$keys['sender_bio']= $Forums->description;

								}else{
									$keys['title']= 'Forum';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Groups		
							}else if($UserFeed->type == 'feeds_group_added' or $UserFeed->type == 'feeds_group_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Groups');
								$Groups= $this->Groups->get($data->record_id);

								if(!empty($Groups)){
									$keys['title']= $Groups->title;
									$keys['sender_image']= '';
									if(!empty($Groups->image)){
										$keys['sender_image']= "/img/group/".$Groups->image;
									}
									
									$keys['sender_bio']= $Groups->description;

								}else{
									$keys['title']= 'Group';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//hardware		
							}else if($UserFeed->type == 'feeds_hardware_added' or $UserFeed->type == 'feeds_hardware_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Hardwares');
								$Hardwares= $this->Hardwares->get($data->record_id);

								if(!empty($Hardwares)){
									$keys['title']= $Hardwares->title;
									$keys['sender_image']= '';
									if(!empty($Hardwares->image)){
										$keys['sender_image']= "/img/hardware/".$Hardwares->image;
									}
									
									$keys['sender_bio']= $Hardwares->description;

								}else{
									$keys['title']= 'Hardware';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Software		
							}else if($UserFeed->type == 'feeds_software_added' or $UserFeed->type == 'feeds_software_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Softwares');
								$Softwares= $this->Softwares->get($data->record_id);

								if(!empty($Softwares)){
									$keys['title']= $Softwares->title;
									$keys['sender_image']= '';
									if(!empty($Softwares->image)){
										$keys['sender_image']= "/img/software/".$Softwares->image;
									}
									
									$keys['sender_bio']= $Softwares->description;

								}else{
									$keys['title']= 'Software';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Service
							}else if($UserFeed->type == 'feeds_service_added' or $UserFeed->type == 'feeds_service_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Services');
								$Services= $this->Services->get($data->record_id);

								if(!empty($Services)){
									$keys['title']= $Services->title;
									$keys['sender_image']= '';
									if(!empty($Services->image)){
										$keys['sender_image']= "/img/service/".$Services->image;
									}
									
									$keys['sender_bio']= $Services->description;

								}else{
									$keys['title']= 'Service';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Audi Video		
							}else if($UserFeed->type == 'feeds_audio_added' or $UserFeed->type == 'feeds_audio_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('AudioVideos');
								$AudioVideos= $this->AudioVideos->get($data->record_id);

								if(!empty($AudioVideos)){
									$keys['title']= $AudioVideos->title;
									$keys['sender_image']= '';
									if(!empty($AudioVideos->image)){
										$keys['sender_image']= "/img/audio_video/".$AudioVideos->image;
									}
									
									$keys['sender_bio']= $AudioVideos->description;

								}else{
									$keys['title']= 'Audio Video';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Information	
							}else if($UserFeed->type == 'feeds_information_added' or $UserFeed->type == 'feeds_information_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Informations');
								$Informations= $this->Informations->get($data->record_id);

								if(!empty($Informations)){
									$keys['title']= $Informations->title;
									$keys['sender_image']= '';
									if(!empty($Informations->image)){
										$keys['sender_image']= "/img/information/".$Informations->image;
									}
									
									$keys['sender_bio']= $Informations->description;

								}else{
									$keys['title']= 'Information';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Productivity		
							}else if($UserFeed->type == 'feeds_productivity_added' or $UserFeed->type == 'feeds_productivity_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Productivities');
								$Productivities= $this->Productivities->get($data->record_id);

								if(!empty($Productivities)){
									$keys['title']= $Productivities->title;
									$keys['sender_image']= '';
									if(!empty($Productivities->image)){
										$keys['sender_image']= "/img/productivity/".$Productivities->image;
									}
									
									$keys['sender_bio']= $Productivities->description;

								}else{
									$keys['title']= 'productivities';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//conference
							}else if($UserFeed->type == 'feeds_conference_added' or $UserFeed->type == 'feeds_conference_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Conferences');
								$Conferences= $this->Conferences->get($data->record_id);

								if(!empty($Conferences)){
									$keys['title']= $Conferences->title;
									$keys['sender_image']= '';
									if(!empty($Conferences->image)){
										$keys['sender_image']= "/img/conference/".$Conferences->image;
									}
									
									$keys['sender_bio']= $Conferences->description;

								}else{
									$keys['title']= 'Conference';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Demoday		
							}else if($UserFeed->type == 'feeds_demoday_added' or $UserFeed->type == 'feeds_demoday_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Demodays');
								$Demodays= $this->Demodays->get($data->record_id);

								if(!empty($Demodays)){
									$keys['title']= $Demodays->title;
									$keys['sender_image']= '';
									if(!empty($Demodays->image)){
										$keys['sender_image']= "/img/demoday/".$Demodays->image;
									}
									
									$keys['sender_bio']= $Demodays->description;

								}else{
									$keys['title']= 'Demo days';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//meetup		
							}else if($UserFeed->type == 'feeds_meetup_added' or $UserFeed->type == 'feeds_meetup_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Meetups');
								$Meetups= $this->Meetups->get($data->record_id);

								if(!empty($Meetups)){
									$keys['title']= $Meetups->title;
									$keys['sender_image']= '';
									if(!empty($Meetups->image)){
										$keys['sender_image']= "/img/meetup/".$Meetups->image;
									}
									
									$keys['sender_bio']= $Meetups->description;

								}else{
									$keys['title']= 'Meetups';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//webinar		
							}else if($UserFeed->type == 'feeds_webinar_added' or $UserFeed->type == 'feeds_webinar_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Webinars');
								$Webinars= $this->Webinars->get($data->record_id);

								if(!empty($Webinars)){
									$keys['title']= $Webinars->title;
									$keys['sender_image']= '';
									if(!empty($Webinars->image)){
										$keys['sender_image']= "/img/meetup/".$Webinars->image;
									}
									
									$keys['sender_bio']= $Webinars->description;

								}else{
									$keys['title']= 'Webinars';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//betatest	
							}else if($UserFeed->type == 'feeds_betatest_added' or $UserFeed->type == 'feeds_betatest_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('BetaTests');
								$BetaTests= $this->BetaTests->get($data->record_id);

								if(!empty($BetaTests)){
									$keys['title']= $BetaTests->title;
									$keys['sender_image']= '';
									if(!empty($BetaTests->image)){
										$keys['sender_image']= "/img/beta_test/".$BetaTests->image;
									}
									
									$keys['sender_bio']= $BetaTests->description;

								}else{
									$keys['title']= 'Beta Tests';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//boardmember			
							}else if($UserFeed->type == 'feeds_boardmember_added' or $UserFeed->type == 'feeds_boardmember_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('BoardMembers');
								$BoardMembers= $this->BoardMembers->get($data->record_id);

								if(!empty($BoardMembers)){
									$keys['title']= $BoardMembers->title;
									$keys['sender_image']= '';
									if(!empty($BoardMembers->image)){
										$keys['sender_image']= "/img/board_member/".$BoardMembers->image;
									}
									
									$keys['sender_bio']= $BoardMembers->description;

								}else{
									$keys['title']= 'Board Members';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//communal_asset		
							}else if($UserFeed->type == 'feeds_communal_added' or $UserFeed->type == 'feeds_communal_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('CommunalAssets');
								$CommunalAssets= $this->CommunalAssets->get($data->record_id);

								if(!empty($CommunalAssets)){
									$keys['title']= $CommunalAssets->title;
									$keys['sender_image']= '';

									if(!empty($CommunalAssets->image)){
										$keys['sender_image']= "/img/communal/".$CommunalAssets->image;
									}
									
									$keys['sender_bio']= $CommunalAssets->description;

								}else{
									$keys['title']= 'Communal Assets';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//consulting		
							}else if($UserFeed->type == 'feeds_consulting_added' or $UserFeed->type == 'feeds_consulting_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Consultings');
								$Consultings= $this->Consultings->get($data->record_id);

								if(!empty($Consultings)){
									$keys['title']= $Consultings->title;
									$keys['sender_image']= '';

									if(!empty($Consultings->image)){
										$keys['sender_image']= "/img/consulting/".$Consultings->image;
									}
									
									$keys['sender_bio']= $Consultings->description;

								}else{
									$keys['title']= 'Consultings';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//EarlyAdopters		
							}else if($UserFeed->type == 'feeds_earlyadopter_added' or $UserFeed->type == 'feeds_earlyadopter_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('EarlyAdopters');
								$EarlyAdopters= $this->EarlyAdopters->get($data->record_id);

								if(!empty($EarlyAdopters)){
									$keys['title']= $EarlyAdopters->title;
									$keys['sender_image']= '';

									if(!empty($EarlyAdopters->image)){
										$keys['sender_image']= "/img/early_adopter/".$EarlyAdopters->image;
									}
									
									$keys['sender_bio']= $EarlyAdopters->description;

								}else{
									$keys['title']= 'Early Adopters';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//focusgroup		
							}else if($UserFeed->type == 'feeds_focusgroup_added' or $UserFeed->type == 'feeds_focusgroup_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('FocusGroups');
								$FocusGroups= $this->FocusGroups->get($data->record_id);

								if(!empty($FocusGroups)){
									$keys['title']= $FocusGroups->title;
									$keys['sender_image']= '';

									if(!empty($FocusGroups->image)){
										$keys['sender_image']= "/img/focus_group/".$FocusGroups->image;
									}
									
									$keys['sender_bio']= $FocusGroups->description;

								}else{
									$keys['title']= 'Focus Group';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Job		
							}else if($UserFeed->type == 'feeds_job_added' or $UserFeed->type == 'feeds_job_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('Jobs');
								$Jobs= $this->Jobs->get($data->record_id);

								if(!empty($Jobs)){
									$keys['title']= $Jobs->job_title;
									$keys['sender_image']= '';

									/*if(!empty($Jobs->image)){
										$keys['sender_image']= "/img/jobs/".$Jobs->image;
									}*/
									
									$keys['sender_bio']= $Jobs->description;

								}else{
									$keys['title']= 'Job';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//launch_deal		
							}else if($UserFeed->type == 'feeds_launchdeal_added' or $UserFeed->type == 'feeds_launchdeal_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('LaunchDeals');
								$LaunchDeals= $this->LaunchDeals->get($data->record_id);

								if(!empty($LaunchDeals)){
									$keys['title']= $LaunchDeals->title;
									$keys['sender_image']= '';

									if(!empty($LaunchDeals->image)){
										$keys['sender_image']= "/img/launchdeal/".$LaunchDeals->image;
									}
									
									$keys['sender_bio']= $LaunchDeals->description;

								}else{ 
									$keys['title']= 'Launch Deals ';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
						//Group Buying		
							}else if($UserFeed->type == 'feeds_purchaseorder_added' or $UserFeed->type == 'feeds_purchaseorder_following'){

								$data= json_decode($UserFeed->data);
								$this->loadModel('GroupBuyings');
								$GroupBuyings= $this->GroupBuyings->get($data->record_id);

								if(!empty($GroupBuyings)){
									$keys['title']= $GroupBuyings->title;
									$keys['sender_image']= '';

									if(!empty($GroupBuyings->image)){
										$keys['sender_image']= "/img/groupbuying/".$GroupBuyings->image;
									}
									
									$keys['sender_bio']= $GroupBuyings->description;

								}else{
									$keys['title']= 'Job';
									$keys['sender_image']= '';
									$keys['sender_bio']= '';
								}
							//Custom feed
							}else if($UserFeed->type == 'custom_feed'){

								
								$keys['title']= $UserFeed->sender->first_name.' '.$UserFeed->sender->last_name;
								
								if(!empty($UserFeed->sender->contractor_basic)){
			                    	$keys['sender_image']='';
			                    	if(!empty($UserFeed->sender->contractor_basic->image)){
			                    		$keys['sender_image']= "/img/profile_pic/".$UserFeed->sender->contractor_basic->image;
			                    	}
			                    }else{
			                    	$keys['sender_image']= '';
			                    }
			                    $keys['sender_bio']=$UserFeed->message;

							}else{

								$keys['title']= $UserFeed->sender->first_name.' '.$UserFeed->sender->last_name;


			                    if(!empty($UserFeed->sender->contractor_basic)){
			                    	$keys['sender_bio']= $UserFeed->sender->contractor_basic->bio;
			                    	$keys['sender_image']='';
			                    	if(!empty($UserFeed->sender->contractor_basic->image)){
			                    		$keys['sender_image']= "/img/profile_pic/".$UserFeed->sender->contractor_basic->image;
			                    	}
			                    }else{
			                    	$keys['sender_bio']= '';
			                    	$keys['sender_image']= '';
			                    }

							}

							$finalConnections[] = $keys;
						}

						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['feed_list']= $finalConnections;
						echo json_encode($result);

					}else{

						$result['code']=404;
						$result['message']= 'No feed list found.';
						echo json_encode($result);
					}
			}else{

            	$result['code']=404;
				$result['message']= 'No feed list found.';
				echo json_encode($result);

            }
    }


    /***
    *
    * Add Feed
    *
    *
    ****/
    public function addFeed()
    {   
        $this->viewBuilder()->layout(false);
        $this->render(false);

        $UserId = $this->request->data['user_id'];
        $UserConnections = TableRegistry::get('UserConnections');
        $UserFollowers = TableRegistry::get('UserFollowers');
        $connectionLists = $UserConnections->find('all',
                                                      ['conditions'=>
                                                        ['UserConnections.status'=>1,
                                                        'OR'=>[
                                                                ['UserConnections.connection_by'=>$UserId],
                                                                ['UserConnections.connection_to'=>$UserId]
                                                              ] 
                                                        ],           
                                                        'fields' => [
                                                            'first_user' => 'UserConnections.connection_by',
                                                            'other_user' => 'UserConnections.connection_to'
                                                        ]
                                                      ] );
        $followerLists = $UserFollowers->find('all',
                                                      ['conditions'=>['UserFollowers.user_id'=>$UserId],           
                                                        'fields' => [
                                                            'first_user' => 'UserFollowers.user_id',
                                                            'other_user' => 'UserFollowers.followed_by'
                                                        ]
                                                      ] );
        $allResults = $connectionLists->unionAll($followerLists)->toArray();

        $result_array = [];
        if(!empty($allResults)){
          foreach($allResults as $key=>$result){
              if($result->first_user==$UserId){
                $result_array[$key] = $result->other_user;
              }else{
                $result_array[$key] = $result->first_user;
              }
          }
        } 

        $finalResult = array_values(array_unique($result_array));

        $TotalItems= count($finalResult);

        if($this->request->is('post'))
        {
          $uploadImgError='';
          $uploadimgName='';
          $flag=0;

          $msgError='';
          if (empty($this->request->data['message'])) {
            $flag=1;
            $msgError='Please enter feed message.';
          }
          if(!empty($this->request->data['image']['name'])){
           
              $data = [];
              $data = $this->request->data['image']; 
              $uploadImg = $this->FeedUpload->uploadFile($data);

              if(empty($uploadImg['errors'])){
                  $uploadimgName=$uploadImg['imgName'];
              }else{
                  $flag=1;
                  $uploadImgError=$uploadImg['errors'];
              }
          }

          $uploaddocError='';
          $uploaddocName='';
          if(!empty($this->request->data['document']['name'])){
           
              $data2 = [];
              $data2 = $this->request->data['document']; 
              $uploadDoc = $this->FeedUpload->uploadFile($data2);

              if(empty($uploadDoc['errors'])){
                  $uploaddocName=$uploadDoc['imgName'];
              }else{
                  $flag=1;
                  $uploaddocError=$uploadDoc['errors'];
              }
          }

          $uploadAudioError='';
          $uploadAudioName='';
          if(!empty($this->request->data['audio']['name'])){
           
              $data3 = [];
              $data3 = $this->request->data['audio']; 
              $uploadAusio = $this->FeedUpload->uploadFile($data3);

              if(empty($uploadAusio['errors'])){
                  $uploadAudioName=$uploadAusio['imgName'];
              }else{
                  $flag=1;
                  $uploadAudioError=$uploadAusio['errors'];
              }
          }


          $uploadVideoError='';
          $uploadVideoName='';
          if(!empty($this->request->data['video']['name'])){
           
              $data3 = [];
              $data3 = $this->request->data['video']; 
              $uploadVideo = $this->FeedUpload->uploadFile($data3);

              if(empty($uploadVideo['errors'])){
                  $uploadVideoName=$uploadVideo['imgName'];
              }else{
                  $flag=1;
                  $uploadVideoError=$uploadVideo['errors'];
              }
          }

          
          if(!empty($flag))
          {
          		if(!empty($uploadImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadImgError;
					echo json_encode($result);
					exit;
                }

                if(!empty($uploaddocError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploaddocError;
					echo json_encode($result);
					exit;
                }
                if(!empty($uploadAudioError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadAudioError;
					echo json_encode($result);
					exit;
                }

                if(!empty($uploadVideoError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadVideoError;
					echo json_encode($result);
					exit;
                }

                if(!empty($msgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $msgError;
					echo json_encode($result);
					exit;
                }

          }else{

                $this->request->data['file1']=$uploadimgName;
                $this->request->data['file2']=$uploaddocName;
                $this->request->data['file3']=$uploadAudioName;
                $this->request->data['file4']=$uploadVideoName;

                //Save record for Followers and Connections
                if(!empty($TotalItems))
                {
                  foreach($finalResult as $key => $value)
                  {
                    //Check if seeting enabled
                    $UserFeeds = TableRegistry::get('UserFeeds');
                    $title =" has added a new information source for 'What's New'.";
                    $type="custom_feed";
                    $feeds = $UserFeeds->newEntity();

                    //$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile',base64_encode($value->connection_by)]);
                    $link='';
                    $values = ['sender_id'=>$UserId,'record_id'=>'','team_id'=>''];

                    $feeds->sender_id = $UserId;
                    $feeds->receiver_id = $value;

                    $feeds->type =$type;
                    $feeds->title =$title;
                    $feeds->link =$link;
                    $feeds->message =$this->request->data['message'];
                    $feeds->file1 =$this->request->data['file1'];
                    $feeds->file2 =$this->request->data['file2'];
                    $feeds->file3 =$this->request->data['file3'];
                    $feeds->file4 =$this->request->data['file4'];
                    $feeds->record_name  ='custom';
                    $feeds->data =json_encode($values);

                    //Save user feeds.
                    $result = $UserFeeds->save($feeds);

                  }
                }

              //Save record feed creator
              $UserFeeds = TableRegistry::get('UserFeeds');
              $title =" has added a new information source for 'What's New'.";
              $type="custom_feed";
              $feeds = $UserFeeds->newEntity();

              //$link= Router::url(['controller' => 'Contractors', 'action' => 'myProfile',base64_encode($value->connection_by)]);
              $link='';
              $values = ['sender_id'=>$UserId,'record_id'=>'','team_id'=>''];

              $feeds->sender_id = $UserId;
              $feeds->receiver_id = $UserId;

              $feeds->type =$type;
              $feeds->title =$title;
              $feeds->link =$link;
              $feeds->message =$this->request->data['message'];
              $feeds->file1 =$this->request->data['file1'];
              $feeds->file2 =$this->request->data['file2'];
              $feeds->file3 =$this->request->data['file3'];
              $feeds->file4 =$this->request->data['file4'];
              $feeds->record_name  ='custom';
              $feeds->data =json_encode($values);

              //Save user feeds.
              $result = $UserFeeds->save($feeds);

            $resultF['code']=200;
			$resultF['message']= 'Feed saved successfully.';
			echo json_encode($resultF);
                

          }      
          
        }
  
    }



    /**
	 * saveBlogPosts method
	 *
	 *
	 **/
	public function getBlogPosts()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('BlogPosts');
        if($this->request->is('post'))
        {

    		$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

				$page_no = (isset($this->request->data['page_no'])&&($this->request->data['page_no']!=''))?$this->request->data['page_no']:'1';
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'BlogPosts.id' => 'DESC'
							]
						];

		        $BlogPostsList= $this->BlogPosts->find('all',['conditions'=>['BlogPosts.posted_to_cbs'=>1,'BlogPosts.status'=>'publish']]);

		        $TotalItems= $BlogPostsList->count();

		        $BlogPostsList = $this->Paginator->paginate($this->BlogPosts->find('all',['conditions'=>['BlogPosts.posted_to_cbs'=>1,'BlogPosts.status'=>'publish']]), $config);

		    	if(!empty($TotalItems)){

					foreach($BlogPostsList as $BlogPostsLis){

		                $keys['id']= $BlogPostsLis->id;
						$keys['blog_id']= $BlogPostsLis->blog_id;
						$keys['blog_title']= $BlogPostsLis->blog_title;
						$keys['link']= $BlogPostsLis->link;
						$keys['date']= ($BlogPostsLis->date!=' ')?date('M d, Y',strtotime($BlogPostsLis->date)):' ';
						$keys['short_desc']= substr(strip_tags($BlogPostsLis->short_desc),0,300);;
						$keys['status']= $BlogPostsLis->status;

						$finalConnections[] = $keys;
					}
						$result['code']=200;
						$result['TotalItems']=$TotalItems;
						$result['result_list']= $finalConnections;
						echo json_encode($result);

				}else{

					$result['code']=404;
					$result['message']= 'No list found.';
					echo json_encode($result);
				}
		}			       	
    }

	/****
	*
	* Get blog list from wordpress
	*
	*/
	public function getWpBlogList()
    {
     	$this->viewBuilder()->layout(false);
        $this->render(false);
        
        $BlogPostTable = TableRegistry::get('BlogPosts');

		$ch = curl_init();
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_URL, 'http://crowdbootstrap.net/wp-json/wp/v2/posts?order=desc&per_page=100');
		$result = curl_exec($ch);
		curl_close($ch);
		$obj = json_decode($result);
		$totalReslt= count($obj);
		$procesCount=0;
        foreach ($obj as $key => $value) {
        	$procesCount ++;
        	$exists = $BlogPostTable->exists(['blog_id' => $value->id]);
        	if(empty($exists)){
        		$date = new \DateTime($value->date);
				$updateDate= $date->format('Y-m-d H:i:s');

	        	$this->request->data['blog_id']=$value->id;
	        	$this->request->data['blog_title']=$value->title->rendered;
	        	$this->request->data['slug']=$value->slug;
	        	$this->request->data['link']=$value->link;
	        	$this->request->data['date']=$updateDate;
	        	$this->request->data['short_desc']=$value->excerpt->rendered;
	        	$this->request->data['status']=$value->status;
	        	$this->request->data['posted_to_cbs']=0;

	        	$BlogPosts = $BlogPostTable->newEntity();
	        	$BlogPostsData = $BlogPostTable->patchEntity($BlogPosts, $this->request->data);
	        	$BlogPostTable->save($BlogPostsData);
	        }else{
	        	//echo "exist already";
	        }	


        }

        if($totalReslt == $procesCount){

	        $this->loadModel('BlogSettings');

	        $settingList = $this->BlogSettings->find('all',['conditions'=>['BlogSettings.status'=>1],['order'=>['BlogSettings.id DESC'],'limit'=>1]])->toArray();

	        if(!empty($settingList)){
	        	//$limit =1;
	            $limit = $settingList[0]->limit_per_day;

	            $this->loadModel('BlogPosts');
	            $query = $this->BlogPosts->query();
              	$qr= $query->update()
                        ->set(['posted_to_cbs' => 1])
                        ->where(['posted_to_cbs' => 0])
                        ->epilog('order by id ASC limit '.$limit);
                $qr->execute();

                  $results['code'] = 200;
			      $results['message'] = "Blog list imported to Crowdbootstrap successfully.";
			      echo json_encode($results); 
	        }else{
	            $this->set('limit_per_day', '');
	        }
                          
	   }    
   }
   

   



   /**
	 * User location availability status method
	 *
	 *
	 **/
	public function userAvailabilityStatus()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserLocationsTable = TableRegistry::get('businessUserLocations');
        $this->loadModel('businessUserLocations');
        if($this->request->is('post'))
        {

    		$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			/*$latitude = $this->request->data['latitude'];
			$longitude = $this->request->data['longitude'];
			$status = $this->request->data['status'];*/
			$exists = $businessUserLocationsTable->exists(['user_id' => $user_id]);
			$data= $businessUserLocationsTable->find('all',['conditions'=>['user_id' => $user_id]])->first();
			$userLocationId = $data->id;

			$userLocation = $businessUserLocationsTable->newEntity(); 
			
			if($exists){
				$userLocationStatusTabledata = $businessUserLocationsTable->patchEntity($userLocation,$this->request->data);
                $userLocationStatusTabledata->id=$userLocationId;
                if($businessUserLocationsTable->save($userLocationStatusTabledata)){
					$result['code']=200;
					$result['message']='Successfully Updated';
					echo json_encode($result);
				}else{
					$errors = $userLocationStatusTabledata->errors();					
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				} 
 
			}else{
				$userLocationStatusTabledata = $businessUserLocationsTable->patchEntity($userLocation,$this->request->data);

				if($businessUserLocationsTable->save($userLocationStatusTabledata)){
					$result['code']=200;
					$result['message']='successfully saved';
					echo json_encode($result);
				}else{
					$errors = $userLocationStatusTabledata->errors();					
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				}

			}	
		}			       	
    }

    /**
	 * User visibility status method
	 *
	 *
	 **/
	public function userVisibilityStatus()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserLocationsTable = TableRegistry::get('businessUserLocations');
        $this->loadModel('businessUserLocations');
        if($this->request->is('post'))
        {

    		$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			$visibility_status = $this->request->data['visibility_status'];
			$exists = $businessUserLocationsTable->exists(['user_id' => $user_id]);
			$data= $businessUserLocationsTable->find('all',['conditions'=>['user_id' => $user_id]])->first();
			$userLocationId = $data->id;


			$res= $this->businessUserLocations->query()
                      ->update()
                      ->set(['visibility_status' => $visibility_status])
                      ->where(['id' => $userLocationId])
                      ->execute();

        	if ($res) {
        			
        		$result['code']=200;
				$result['message']='Visibility Status updated successfully.';
				echo json_encode($result);

        	}else{
        		
        		$result['code']=404;
				$result['message']= 'Visibility Status not updated. Please, try again.';
				echo json_encode($result);
        	}

		}			       	
    }


    /**
	 * Add Business card method
	 *
	 *
	 **/
	public function addBusinessCard()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessCardsTable = TableRegistry::get('businessCards');
        $this->loadModel('businessCards');
        if($this->request->is('post'))
        {

    		/*$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;*/

			$uploadImgError='';
            $uploadimgName='';
            $flag=0;
            $businessCard = $businessCardsTable->newEntity(); 
			
			if(!empty($this->request->data['image']['name'])){
			 
				$data = [];
				$data = $this->request->data['image']; 
				$uploadImg = $this->SoftwareUpload->uploadImage($data);

				if(empty($uploadImg['errors'])){
                    $uploadimgName=$uploadImg['imgName'];
				}else{
					$flag=1;
					$uploadImgError=$uploadImg['errors'];
				}
			}

			if(!empty($flag)){

                if(!empty($uploadImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadImgError;
					echo json_encode($result);
					exit;
                }
            }

			$uploadLinkImgError='';
            $uploadimgLinkName='';
            $flgg=0;
            $uploadImg='';
			if(!empty($this->request->data['linkedin_image'])){
			 
				$data = [];
				$data = $this->request->data['linkedin_image']; 
				$uploadImg = $this->SoftwareUpload->base64ToJPG($data);

				/*if(empty($uploadImg['errors'])){
                    $uploadimgLinkName=$uploadImg['imgName'];
				}else{
					$flgg=1;
					$uploadLinkImgError=$uploadImg['errors'];
				}*/
			}

            /*if(!empty($flgg)){

                if(!empty($uploadLinkImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadLinkImgError;
					echo json_encode($result);
					exit;
                }
            }
			*/
            /*echo '<pre>';
            print_r($this->request->data['linkedin_image']);*/

            $this->request->data['linkedin_image']=$uploadImg;
            /*$result['code']=200;
			$result['message']=$this->request->data;
			
            echo json_encode($result);
			die;*/    


			$this->request->data['image']=$uploadimgName;
			$businessCardData = $businessCardsTable->patchEntity($businessCard,$this->request->data);

			if($businessCardsTable->save($businessCardData)){
				$result['code']=200;
				$result['message']='Successfully saved.';
				echo json_encode($result);
			}else{
				$errors = $businessCardData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				//$result['errors'] = $finalErrors;
				$result['message'] = $errorMessage;
				echo json_encode($result);
			}

			
		}			       	
    }

    /**
	 * Active Business Card method
	 *
	 *
	 **/
	public function activeBusinessCard()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessCardsTable = TableRegistry::get('businessCards');
        $this->loadModel('BusinessCards');
        $this->loadModel('BusinessUserNetworks');
        if($this->request->is('post'))
        {

            $json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];	
            $res= $this->BusinessCards->query()
                      ->update()
                      ->set(['status' => 1])
                      ->where(['id' => $this->request->data['card_id'],'user_id' => $user_id])
                      ->execute();

			$update= $this->BusinessCards->query()
                      ->update()
                      ->set(['status' => 0])
                      ->where(['id !=' => $this->request->data['card_id'],'user_id' => $user_id])
                      ->execute();

            //Update active business card id on business network          
            $update= $this->BusinessUserNetworks->query()
                      ->update()
                      ->set(['business_card_id' => $this->request->data['card_id']])
                      ->where(['connected_to' => $user_id])
                      ->execute();

            //pr($res); die;     	
            if($res){
				$result['code']=200;
				$result['message']='Card activated Successfully.';
				echo json_encode($result);
			}else{
				$errors = $businessCardData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			} 
 

		}			       	
    }	

    /**
	 * Update Business Card method
	 * Not using this API
	 *
	 **/
	public function editBusinessCard()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessCardsTable = TableRegistry::get('businessCards');
        $this->loadModel('businessCards');
        if($this->request->is('post'))
        {

        	//pr($this->request->data['id']); die;
			$userLocation = $businessCardsTable->newEntity(); 
			
			$uploadImgError='';
            $uploadimgName='';
            $flag=0;
            $businessCard = $businessCardsTable->newEntity(); 
			
			if(!empty($this->request->data['image']['name'])){
			 
				$data = [];
				$data = $this->request->data['image']; 
				$uploadImg = $this->SoftwareUpload->uploadImage($data);

				if(empty($uploadImg['errors'])){
                    $uploadimgName=$uploadImg['imgName'];
				}else{
					$flag=1;
					$uploadImgError=$uploadImg['errors'];
				}
			}

			if(!empty($flag)){

                if(!empty($uploadImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadImgError;
					echo json_encode($result);
					exit;
                }
            }
            
            $this->request->data['image']=$uploadimgName;

			$businessCardData = $businessCardsTable->patchEntity($businessCard,$this->request->data);
            $businessCardData->id=$this->request->data['id'];
            if($businessCardsTable->save($businessCardData)){
				$result['code']=200;
				$result['message']='Successfully Updated';
				echo json_encode($result);
			}else{
				$errors = $businessCardData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			} 
 

		}			       	
    }	

    /**
	 * delete business card  
	 *
	 * @return delete business card   
	 */

	public function deleteBusinessCard(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$businessCardsTable = $this->loadModel('businessCards');

		if($this->request->is('post'))
        {			
			$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$card_id = $this->request->data['card_id'];
			
			$entity = $this->businessCards->get($card_id);
				
			if($this->businessCards->delete($entity)){
				
				$result['code'] = 200;
				$result['message'] = 'Card deleted Successfully';
				echo json_encode($result);
					
			}else{
				
				$result['code'] = 404;
				$result['message'] = 'Card not deleted';
				echo json_encode($result);
				
			}
		} 			   
	}

    /**  
    *    Business Card Details Method
    *
    *
    ***/
    public function businessCardDetails(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('businessCards');
        $businessCardsTable = TableRegistry::get('businessCards');

        if($this->request->is('post'))
        {
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			//$user_id = $this->request->data['user_id'];
			$business_card_id = $this->request->data['card_id'];
			// pr($this->request->data); die('dfdf'); 
			$businessCardDetail= $businessCardsTable->find('all',['conditions'=>['businessCards.id'=>$business_card_id]])->contain(['Users'])->first();
        	 //pr($businessCardDetail->id); die('dfdf'); 
    		if(!empty($businessCardDetail))
    		{
				$result['id']=$businessCardDetail->id;
				$result['user_id']=$businessCardDetail->user_id;
				if(!empty($businessCardDetail->linkedin_username) && $businessCardDetail->linkedin_username != null){
					$result['linkedin_username']=$businessCardDetail->linkedin_username;
				}else{
					$result['linkedin_username']='';
				}

				$result['user_bio']=$businessCardDetail->user_bio;
				$result['user_interest']=$businessCardDetail->user_interest;

				if(!empty($businessCardDetail->statement) && $businessCardDetail->statement != null){

					$result['user_card_statement']=$businessCardDetail->statement;

				}else{

					$result['user_card_statement']='';

				}
				
				if(!empty($businessCardDetail->image)){
					$result['image']= "/img/software/".$businessCardDetail->image;
				}else{
					$result['image']= '';
				}

				if(!empty($businessCardDetail->linkedin_image)){
					$result['linkedin_image']= "/img/software/".$businessCardDetail->linkedin_image;
					$result['linkedin_image_name']= $businessCardDetail->linkedin_image;
				}else{
					$result['linkedin_image']= '';
					$result['linkedin_image_name']= '';

				} 

				$result['code'] = 200;
				//$result['businessCards'] = $finalList;
				echo json_encode($result);

			}else{

				$result['code']=404;
				$result['message']= 'No list found.';
				echo json_encode($result);
			}	      	
		}	
	}	


	/**  
    *    Business Card List Method
    *
    *
    ***/
	public function businessCardList(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('businessCards');
        $businessCardsTable = TableRegistry::get('businessCards');

        if($this->request->is('get'))
        {
        	$finalStateList = array();
        	$businessCardResults = $businessCardsTable->find('all',['conditions' => ['user_id' => $_REQUEST['user_id']]])->toArray();
        	$finalList = array();

        	if($businessCardResults){
        		foreach ($businessCardResults as $businessCardResult) {
        		//pr($businessCardResult);
        			$businessCardArr['card_id'] = $businessCardResult->id;
        			$businessCardArr['user_id'] = $businessCardResult->user_id;
        			$businessCardArr['user_bio'] = $businessCardResult->user_bio;
        			$businessCardArr['user_interest'] = $businessCardResult->user_interest;
        			if(!empty($businessCardResult->image)){
						$businessCardArr['image']= "/img/software/".$businessCardResult->image;
					}else{
						$businessCardArr['image']= '';
					}

					$businessCardArr['status']= $businessCardResult->status;
					$finalList[] = $businessCardArr;
					//pr($businessCardArr);
        		}
        		//die;
    			$result['code'] = 200;
				$result['businessCards'] = $finalList;
				echo json_encode($result);

        	}else{

        		$result['code'] = 404;
				$result['message'] = "No List Found";
				
			 	echo json_encode($result);
        	}
        	
        }	
	}		

    /* For distance calculation */

	public function distance($lat1, $lon1, $lat2, $lon2, $unit) {
       
		$theta = $lon1 - $lon2;
		$dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
		$dist = acos($dist);
		$dist = rad2deg($dist);
		$miles = $dist * 60 * 1.1515;
		$unit = strtoupper($unit);

		if ($unit == "K") {
		// echo round(($miles * 1.609344));
		return round(($miles * 1.609344));
		}else if ($unit == "N") {
		 //return round(($miles * 0.8684));
			//pr(round($miles));
		 return round($miles);
		}else {
		 return round($miles);
		}
    }

    /**
    * Users list with in N miles radius
	*
    */

    public function usersListWithinMiles()
    {
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserLocationsTable = TableRegistry::get('businessUserLocations');
        $this->loadModel('businessUserLocations');
        $this->loadModel('BusinessMiles');
        $this->loadModel('BusinessUserNetworks');
        $this->loadModel('BusinessCards');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			$latitude = $this->request->data['latitude'];
			$longitude = $this->request->data['longitude'];
			$searchText = $this->request->data['search_text'];
			$connectionTypeId = $this->request->data['connection_type_id'];

			$miles= $this->BusinessMiles->find('all')->first()->toArray();

			if(!empty($miles)){
				$max_dists = $miles['value'];
			}else{
				$max_dists ='';
			}	
			if($searchText == '' && $connectionTypeId == "" && $connectionTypeId == null)
			{
				// user list with same lat long
				$conn = ConnectionManager::get('default');
				$stmt = $conn->execute("SELECT * 
										FROM business_user_locations
										WHERE STATUS =1 AND latitude
										IN (
										SELECT latitude
										FROM business_user_locations
										GROUP BY latitude
										HAVING COUNT( id ) >1
										)");
				$duplicateUserData = $stmt ->fetchAll('assoc');
				//pr($duplicateUserData); die;
				$duplicateUserCount = $stmt ->count();

				$duplicateUserList = array();

				foreach ($duplicateUserData as $dupUserInfo){

					//echo "<pre>"; pr($dupUserInfo); 
					if( $dupUserInfo['latitude']!="" && $dupUserInfo['longitude']!="")
					{
						$dists = $this->distance($latitude, $longitude, $dupUserInfo['latitude'], $dupUserInfo['longitude'], 'N');


						//$max_dists = 5;
						$i = 0; 
						if($dists < $max_dists){

							$this->loadModel('ContractorBasics');
							$userData1= $this->ContractorBasics->find('all',['conditions'=>['user_id' =>$dupUserInfo['user_id']]])->first();

							//pr($userData1);

	                        //Get user image
	                        if(!empty($userData1['image'])){
	                            $userImage = "/img/profile_pic/".$userData1['image']; 
	                        }else{
	                        	$userImage = "/img/default/userdummy.png";
	                    	}
	                    	
	                    	$this->loadModel('Users');
							$userDetail= $this->Users->find('all',['conditions'=>['id' =>$dupUserInfo['user_id']]])->first();

	                    	//$username = $userData['']    
		                    $username = $userDetail['first_name'].' '.$userDetail['last_name'];

		                     //Check null value
		                    if(!empty($dupUserInfo['latitude'])){
								$lat6 = $dupUserInfo['latitude'];
							}else{
								$lat6 = '';
							}

							if(!empty($dupUserInfo['longitude'])){
								$long6 = $dupUserInfo['longitude'];
							}else{
								$long6 = '';
							}

							$result['user_id']= $dupUserInfo['user_id'];
							$result['user_name']= $username;
							$result['latitude']= $lat6;
							$result['longitude']= $long6;
							$result['user_image'] = $userImage;
							$result['type'] = "Mutiple";
							$duplicateUserList[] = $result;
							
						} 	  
					}	
				} 

				// all users list
				/*$data= $businessUserLocationsTable->find('all',['conditions'=>['businessUserLocations.status' =>"1"]])->contain(['Users'=>array('BusinessUserNetworks')])->toArray();*/
				$data= $businessUserLocationsTable->find('all',['conditions'=>['businessUserLocations.status' =>"1"]])->contain(['Users'])->toArray();
				
				//pr($data); die;
				$allUserList = array();

				foreach ($data as $uesrLocationData){
					//echo "<pre>"; pr($uesrLocationData); 
					if( $uesrLocationData['latitude']!="" && $uesrLocationData['longitude']!="")
					{
						$dists = $this->distance($latitude, $longitude, $uesrLocationData['latitude'], $uesrLocationData['longitude'], 'N');

						//$max_dists = 5;
						$i = 0; 
						if($dists < $max_dists){

							$this->loadModel('ContractorBasics');
							$userData= $this->ContractorBasics->find('all',['conditions'=>['user_id' =>$uesrLocationData['user']['id']]])->first();


	                        //Get user image
	                        if(!empty($userData['image'])){
	                            $userImage = "/img/profile_pic/".$userData['image']; 
	                        }else{
	                        	$userImage = "/img/default/userdummy.png";
	                    	}
	                    	
		                    $userLatitude = $uesrLocationData['latitude'];
		                    $userLongitude = $uesrLocationData['longitude'];

		                    //Check null value
		                    if(!empty($uesrLocationData['latitude'])){
								$lat5 = $uesrLocationData['latitude'];
							}else{
								$lat5 = '';
							}

							if(!empty($uesrLocationData['longitude'])){
								$long5 = $uesrLocationData['longitude'];
							}else{
								$long5 = '';
							}

							$result['user_id']= $uesrLocationData['user']['id'];
							$result['user_name']= $uesrLocationData['user']['username'];
							$result['latitude']= $lat5;
							$result['longitude']= $long5;

							if($uesrLocationData['visibility_status'] != null){
								$visi1 = $uesrLocationData['visibility_status'];
							}else{
								$visi1 = '';
							}

							$result['visibility_status']= $visi1;

							$result['user_image'] = $userImage;
							$result['type'] = "Single";
							$result['status'] = "1";
							$result['count'] = "1";
							$allUserList[] = $result;
							
							
						}	
					}	

				} 
				
				$uniqueUserArr = array_diff_key(array_column($allUserList, null, 'latitude'),
	                         array_column($duplicateUserList, null, 'latitude'));

				$uniqueUser = array();
				foreach ($uniqueUserArr as $uniqueUserArrValue)
				{
					$result1['user_id']= $uniqueUserArrValue['user_id'];
					$result1['user_name']= $uniqueUserArrValue['user_name'];

					//Check null value
                    if(!empty($uniqueUserArrValue['latitude'])){
						$lat4 = $uniqueUserArrValue['latitude'];
					}else{
						$lat4 = '';
					}

					if(!empty($uniqueUserArrValue['longitude'])){
						$long4 = $uniqueUserArrValue['longitude'];
					}else{
						$long4 = '';
					}
					$result1['latitude']= $lat4;
					$result1['longitude']= $long4;
					$result1['user_image'] = $uniqueUserArrValue['user_image'];

					if($uniqueUserArrValue['visibility_status'] != null){
						$visi2 = $uniqueUserArrValue['visibility_status'];
					}else{
						$visi2 = '';
					}
					$result1['visibility_status'] = $visi2;
					$result1['type'] = "Single";
					$result1['availability_status'] = "1";
					$result1['count'] = "1";
					
					//Get if User is Connected
					$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$uniqueUserArrValue['user_id'],'BusinessUserNetworks.user_id'=>$user_id]])->first();

					$userCardData = $this->BusinessCards->find('all',['conditions'=>['user_id'=>$uniqueUserArrValue['user_id'],'BusinessCards.status'=>1]])->first();


					//pr($userConnData);
					//pr($userCardData['statement']);
					$result1['connection_type_id'] = @$userConnData?$userConnData['connection_type_id']:"";
					
					if(isset($userCardData) ){
						
						$result1['card_id'] = $userCardData['id'];
						$result1['user_card_statement'] = $userCardData['statement'];
					}else{
						$result1['card_id'] = "";
						$result1['user_card_statement'] = "";
					}


					// End here

					//pr($result1);
					$uniqueUser[] = $result1;

				} //die;
			
				//pr($uniqueUser); die; vv
				if(!empty($duplicateUserData[0]['latitude'])){
					$lat1 = $duplicateUserData[0]['latitude'];
				}else{
					$lat1 = '';
				}

				if(!empty($duplicateUserData[0]['longitude'])){
					$long1 = $duplicateUserData[0]['longitude'];
				}else{
					$long1 = '';
				}
				$duplicateUser = array();
				$duplicateUserArr['user_id']= "";
				$duplicateUserArr['user_name']= "";
				$duplicateUserArr['latitude']= $lat1;
				$duplicateUserArr['longitude']= $long1;
				$duplicateUserArr['user_image']= "";
				$duplicateUserArr['type']= "multiple";
				$duplicateUserArr['availability_status']= "1";

				if(!empty($duplicateUserData[0]['visibility_status'] )){
					$visi3 = $duplicateUserData[0]['visibility_status'];
				}else{
					$visi3 = '';
				}
				$duplicateUserArr['visibility_status']= $visi3;
				$duplicateUserArr['count']= $duplicateUserCount;
				$duplicateUserArr['connection_type_id'] = "";
				$duplicateUserArr['card_id'] = "";
				$duplicateUserArr['user_card_statement'] = "";
				$duplicateUser[]= $duplicateUserArr;
				
				$finalList = array_merge($uniqueUser,$duplicateUser); 
				//pr($finalList); die;

				/* Requested user status */
				$requestUserData= $businessUserLocationsTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();
				// Ends here 

				//pr($requestUserData); die;
				$finalResult['code']=200;
				$finalResult['case']='one';

				if(!empty($requestUserData)){
					$avi423 = $requestUserData[0]['status'];
				}else{
					$avi423 = '';
				}

				$finalResult['availability_status']= $avi423;
				//$finalResult['availability_status']= ($requestUserData)?$requestUserData['status']:'';

				if(!empty($requestUserData)){
					$visi423 = $requestUserData[0]['visibility_status'];
				}else{
					$visi423 = '';
				}
				$finalResult['visibility_status']=$visi423;
				//$finalResult['visibility_status']=($requestUserData)?$requestUserData['visibility_status']:'';

				$finalResult['user_list']= !empty($finalList)? @$finalList:array();  //$finalList;
				echo json_encode($finalResult);

			}elseif($searchText =='' && $connectionTypeId != "" && $connectionTypeId != null){

				$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connection_type_id' =>$connectionTypeId,'user_id'=>$user_id]])->toArray();

				//pr($userConnData);
				foreach($userConnData as $userConnInfo){

					$uesrLocationData= $businessUserLocationsTable->find('all',['conditions'=>['businessUserLocations.status' =>"1",'user_id'=>$userConnInfo['connected_to']]])->contain(['Users'])->toArray();
					// pr($data); die;

					foreach($uesrLocationData as $data){
						
						$this->loadModel('ContractorBasics');
						$userData= $this->ContractorBasics->find('all',['conditions'=>['user_id' =>$data['user']['id']]])->first();

						
	                    //Get user image
	                    if(!empty($userData['image'])){
	                        $userImage = "/img/profile_pic/".$userData['image']; 
	                    }else{
	                    	$userImage = "/img/default/userdummy.png";
	                	}
	                

	                    $userLatitude = $data['latitude'];
	                    $userLongitude = $data['longitude'];


	                    //Check null value
	                    if(!empty($data['latitude'])){
							$lat2 = $data['latitude'];
						}else{
							$lat2 = '';
						}

						if(!empty($data['longitude'])){
							$long2 = $data['longitude'];
						}else{
							$long2 = '';
						}

						$result['user_id']= $data['user']['id'];
						$result['user_name']= $data['user']['username'];
						$result['latitude']= $lat2;
						$result['longitude']= $long2;

						if($data['visibility_status'] != null){
							$visi4 = $data['visibility_status'];
						}else{
							$visi4 = '';
						}

						$result['visibility_status']= $visi4;
						$result['user_image'] = $userImage;
						$result['type'] = "Single";
						$result['status'] = "1";
						$result['count'] = "1";

						//Get if User is Connected
						$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$data['user']['id'],'BusinessUserNetworks.user_id'=>$user_id]])->contain(['BusinessCards'])->first();

						$userCardData = $this->BusinessCards->find('all',['conditions'=>['user_id'=>$data['user']['id'],'BusinessCards.status'=>1]])->first();


						//pr($userCardData['id']);
						//pr($userCardData['statement']);

						$result['connection_type_id'] = @$userConnData?$userConnData['connection_type_id']:"";
						
						if(isset($userCardData) ){
							
							$result['card_id'] = $userCardData['id'];
							$result1['user_card_statement'] = $userCardData['statement'];
						}else{
							$result['card_id'] = "";
							$result['user_card_statement'] = "";
						}
						// End here

						$allUserList[] = $result; 
					} 

				} 

				/* Requested user status */
				$requestUserData= $businessUserLocationsTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();
				// Ends here 
				
				$finalResult['code']=200;
				$finalResult['case']='two';


				if(!empty($requestUserData)){
					$avi42 = $requestUserData[0]['status'];
				}else{
					$avi42 = '';
				}

				$finalResult['availability_status']= $avi42;

				if(!empty($requestUserData)){
					$visi42 = $requestUserData[0]['visibility_status'];
				}else{
					$visi42 = '';
				}
				$finalResult['visibility_status']=$visi42;

				//$finalResult['availability_status']= $requestUserData['status'];

				//$finalResult['visibility_status']=$requestUserData['visibility_status'];

				$finalResult['user_list']= !empty($allUserList)? @$allUserList:array();
				echo json_encode($finalResult);


			}else{
				$connection = ConnectionManager::get('default');
				
				$qq = "SELECT * FROM  users WHERE id !=$user_id AND LOWER(first_name) LIKE '%".strtolower($searchText)."%' OR LOWER(last_name) LIKE '%".strtolower($searchText)."%'";  
				$sql = $connection->execute ($qq);
			    $user_ids = $sql->fetchAll('assoc');
			   // pr($user_ids); die;
			    if(!empty($user_ids))
			    {
			    	foreach($user_ids as $SingleUser){

			    		$data= $businessUserLocationsTable->find('all',['conditions'=>['businessUserLocations.status' =>"1",'user_id'=>$SingleUser['id']]])->contain(['Users'])->toArray();

			    		foreach($data as $uesrLocationData){
			    			$this->loadModel('ContractorBasics');
							$userData= $this->ContractorBasics->find('all',['conditions'=>['user_id' =>$SingleUser['id']]])->first();


	                        //Get user image
	                        if(!empty($userData['image'])){
	                            $userImage = "/img/profile_pic/".$userData['image']; 
	                        }else{
	                        	$userImage = "/img/default/userdummy.png";
	                    	}
	                    

		                    $userLatitude = $uesrLocationData['latitude'];
		                    $userLongitude = $uesrLocationData['longitude'];

		                    //Check null value
		                    if(!empty($uesrLocationData['latitude'])){
								$lat3 = $uesrLocationData['latitude'];
							}else{
								$lat3 = '';
							}

							if(!empty($uesrLocationData['longitude'])){
								$long3 = $uesrLocationData['longitude'];
							}else{
								$long3 = '';
							}

							$result['user_id']= $uesrLocationData['user']['id'];
							$result['user_name']= $uesrLocationData['user']['username'];
							$result['latitude']= $lat3;
							$result['longitude']= $long3;

							if($uesrLocationData['visibility_status'] != null){
								$visi5 = $uesrLocationData['visibility_status'];
							}else{
								$visi5 = '';
							}
							$result['visibility_status']= $visi5;
							$result['user_image'] = $userImage;
							$result['type'] = "Single";
							$result['status'] = "1";
							$result['count'] = "1";

							//Get if User is Connected
							$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$uesrLocationData['user']['id'],'BusinessUserNetworks.user_id'=>$user_id]])->contain(['BusinessCards'])->first();

							$userCardData = $this->BusinessCards->find('all',['conditions'=>['user_id'=>$uesrLocationData['user']['id'],'BusinessCards.status'=>1]])->first();


							//pr($userCardData['id']); 
							//pr($userCardData['statement']);  

							$result['connection_type_id'] = @$userConnData?$userConnData['connection_type_id']:"";
					
							if(isset($userCardData) ){
								
								$result['card_id'] = $userCardData['id'];
								$result['user_card_statement'] = $userCardData['statement'];
							}else{
								$result['card_id'] = "";
								$result['user_card_statement'] = "";
							}
							// End here

							$allUserList[] = $result;
						}	
			    	}

			    	/* Requested user status */
					$requestUserData= $businessUserLocationsTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();
					// Ends here 
					
					$finalResult['code']=200;
					$finalResult['case']='three';

					if(!empty($requestUserData)){
						$avi41 = $requestUserData[0]['status'];
					}else{
						$avi41 = '';
					}

					$finalResult['availability_status']= $avi41;

					if(!empty($requestUserData)){
						$visi41 = $requestUserData[0]['visibility_status'];
					}else{
						$visi41 = '';
					}
					$finalResult['visibility_status']=$visi41;



					$finalResult['user_list']= !empty($allUserList)? @$allUserList:array(); //$allUserList;
					echo json_encode($finalResult);
			    	//die;  
			    }	 
			}	
		} 
		
	}

	/**
    * Users list with same latitude and longitude
	*
    */
    public function userListWithSameLatLong(){
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserLocationsTable = TableRegistry::get('businessUserLocations');
        $this->loadModel('businessUserLocations');
        $this->loadModel('BusinessUserNetworks');
        $this->loadModel('BusinessCards');

        if($this->request->is('post'))
        {	

        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			//$user_id = $this->request->data['user_id'];
			$latitude = $this->request->data['latitude'];
			$longitude = $this->request->data['longitude'];
			$user_id = $this->request->data['user_id'];

        	// all users list
			$data= $businessUserLocationsTable->find('all',['conditions'=>['businessUserLocations.latitude' =>$latitude,'businessUserLocations.longitude' =>$longitude]])->contain(['Users'])->toArray();
			
			$allUserList = array();

			foreach ($data as $uesrLocationData){
				//echo "<pre>"; pr($uesrLocationData); 
				
				$this->loadModel('ContractorBasics');
				$userData= $this->ContractorBasics->find('all',['conditions'=>['user_id' =>$uesrLocationData['user']['id']]])->first();


                //Get user image
                if(!empty($userData['image'])){
                    $userImage = "/img/profile_pic/".$userData['image']; 
                }else{
                	$userImage = "/img/default/userdummy.png";
            	}
            

                $userLatitude = $uesrLocationData['latitude'];
                $userLongitude = $uesrLocationData['longitude'];

				$result['user_id']= $uesrLocationData['user']['id'];
				$result['user_name']= $uesrLocationData['user']['username'];
				$result['latitude']= $uesrLocationData['latitude'];
				$result['longitude']= $uesrLocationData['longitude'];
				$result['user_image'] = $userImage;
				$result['status'] = "1";

				//Get if User is Connected
				$userConnData= $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to' =>$uesrLocationData['user']['id'],'BusinessUserNetworks.user_id'=>$user_id]])->contain(['BusinessCards'])->first();

				//pr($userConnData['connection_type_id']);

				if($userConnData){
					$result['connection_type_id'] = $userConnData['connection_type_id'];
					$result['card_id'] = $userConnData['business_card_id'];
					$result['user_card_statement'] = $userConnData['business_card']['statement'];
				}else{
					$result['connection_type_id'] = "";
					$result['card_id'] = "";
					$result['user_card_statement'] = "";
				}
				// End here
				$allUserList[] = $result;
					
			} 

			$finalResult['code']=200;
			$finalResult['user_list']= $allUserList;
			echo json_encode($finalResult);
        }
    }    	

    /*
	*Connection Type
	*
    */

    public function businessConnectionType(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessConnectionTable = TableRegistry::get('BusinessConnectionTypes');

        if($this->request->is('post'))
        {
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;
			$user_id = $this->request->data['user_id'];

			$businessUserConnTable = TableRegistry::get('BusinessUserConnectionTypes');
			$businessConnectionData = $businessUserConnTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();
				//pr($businessConnectionData); die; 

				
			if(!empty($businessConnectionData)){
				//pr($businessConnectionData); die;				
				$result['code'] = 200;
				$result['businessConnectionTypes'] = json_decode($businessConnectionData[0]->data); 
				echo json_encode($result,JSON_UNESCAPED_SLASHES);
		        
			}else{ 

				$businessConnectionData = $businessConnectionTable->find('all')->toArray();
		        $finalresult = array();
		        if(!empty($businessConnectionData))
	    		{
	    			foreach ($businessConnectionData as $businessConnection) {
	    				$data['id']= $businessConnection->id;
	    				$data['name']=$businessConnection->name;
	    				$data['description']="";
						$data['status']=$businessConnection->status;
						$finalresult[]= $data;
	    			}
					
					$result['code'] = 200;
					$result['businessConnectionTypes'] = $finalresult;
					echo json_encode($result);

				}else{

					$result['code']=404;
					$result['message']= 'No connection type found.';
					echo json_encode($result);
				}	   
				
			}	 
	    }    
    }

    /*
	*Add Business card contact
	*
    */

	public function addBusinessContact(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessTempContactsTable = TableRegistry::get('BusinessTempContacts');

        if($this->request->is('post'))
        {

        	//pr($this->request->is('post')); die;
        	$uploadImgError='';
            $uploadimgName='';
            $flag=0;
            
			if(!empty($this->request->data['image']['name'])){
			 
				$data = [];
				$data = $this->request->data['image']; 
				$uploadImg = $this->SoftwareUpload->uploadImage($data);

				if(empty($uploadImg['errors'])){
                    $uploadimgName=$uploadImg['imgName'];
				}else{
					$flag=1;
					$uploadImgError=$uploadImg['errors'];
				}
			}

			if(!empty($flag)){

                if(!empty($uploadImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadImgError;
					echo json_encode($result);
					exit;
                }
            }

            $this->request->data['image']=$uploadimgName;
            $businessContact = $businessTempContactsTable->newEntity(); 
            $businessContactData = $businessTempContactsTable->patchEntity($businessContact,$this->request->data);

			if($businessTempContactsTable->save($businessContactData)){
				if(!empty($this->request->data['connection_type_id'])){

					$result['code']=200;
					$result['message']='Successfully saved';
					echo json_encode($result);
				}else{
					$result['code'] = 404;
					$result['message'] = 'Please select connection type.';
					echo json_encode($result);
				}
			}else{
				$errors = $businessContactData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['message'] = ucfirst($key).' can not be left empty.';
				echo json_encode($result);
			}
        }
    }    


    /**
	 * Update Business Contact method
	 *
	 *
	 **/
	public function editBusinessContact()
    {
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessTempContactsTable = TableRegistry::get('BusinessTempContacts');
        $this->loadModel('BusinessTempContacts');
        if($this->request->is('post'))
        {

			
			$uploadImgError='';
            $uploadimgName='';
            $flag=0; 
			
			if(!empty($this->request->data['image']['name'])){
			 
				$data = [];
				$data = $this->request->data['image']; 
				$uploadImg = $this->SoftwareUpload->uploadImage($data);

				if(empty($uploadImg['errors'])){
                    $uploadimgName=$uploadImg['imgName'];
				}else{
					$flag=1;
					$uploadImgError=$uploadImg['errors'];
				}
			}

			if(!empty($flag)){

                if(!empty($uploadImgError)){
                    $result['code']=404;
					$result['message']= 'Oops somthing wrong! Please try again.';
					$result['errors']= $uploadImgError;
					echo json_encode($result);
					exit;
                }
            }
            
            $this->request->data['image']=$uploadimgName;
            $businessContact = $businessTempContactsTable->newEntity(); 
			$businessContactData = $businessTempContactsTable->patchEntity($businessContact,$this->request->data);
            $businessContactData->id=$this->request->data['id'];
            if($businessTempContactsTable->save($businessContactData)){
				$result['code']=200;
				$result['message']='Successfully Updated';
				echo json_encode($result);
			}else{
				$errors = $businessContactData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			} 
 

		}			       	
    }	

    /**
	 * Add User Business Connection Type method
	 *
	 *
	 **/
    public function addBusinessUserConnectionType(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserConnTypeTable = TableRegistry::get('BusinessUserConnectionTypes');
        $this->loadModel('BusinessUserConnectionTypes');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];

			$businessConnectionData = $businessUserConnTypeTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();

			//pr($businessConnectionData);die;
			if(empty($businessConnectionData)){
				$this->request->data['data'] = json_encode(array_values($this->request->data['data'])); 
				//pr($this->request->data);die;
				$businessUserConnection = $businessUserConnTypeTable->newEntity(); 
				$businessUserConnectiondata = $businessUserConnTypeTable->patchEntity($businessUserConnection,$this->request->data);

				
	            if($businessUserConnTypeTable->save($businessUserConnectiondata)){
					$result['code']=200;
					$result['message']='Successfully added';
					echo json_encode($result);
				}else{
					$errors = $businessUserConnectiondata->errors();					
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);
				}		
			}else{
				$this->request->data['data'] = json_encode(array_values($this->request->data['data'])); 
			
				$businessUserConnection = $businessUserConnTypeTable->newEntity();
				$businessConnData = $businessUserConnTypeTable->patchEntity($businessUserConnection,$this->request->data);
	            $businessConnData->id=$businessConnectionData[0]->id; 
				                                                                   
				//pr($businessConnData);die; 

	            if($businessUserConnTypeTable->save($businessConnData)){
					$result['code']=200;
					$result['message']='Successfully updated';
					echo json_encode($result);
				}else{
					$errors = $businessConnData->errors();					
					
					foreach($errors as $key=>$error){
						foreach($error as $errorKey=>$errorMessage){
							$finalErrors[$key] = $errorMessage;
						}
					}
					
					$result['code'] = 404;
					$result['errors'] = $finalErrors;
					echo json_encode($result);

				}
        	}
   		}
	}

 /**
	 * Edit User Business Connection Type method
	 *
	 *
	 **/
    public function editBusinessUserConnectionType(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserConnTypeTable = TableRegistry::get('BusinessUserConnectionTypes');
        $this->loadModel('BusinessUserConnectionTypes');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$this->request->data['data'] = json_encode(array_values($this->request->data['data'])); 
			
			$businessUserConnection = $businessUserConnTypeTable->newEntity();
			$businessConnData = $businessUserConnTypeTable->patchEntity($businessUserConnection,$this->request->data);
            $businessConnData->id=$this->request->data['id']; 
			                                                                   
			//pr($businessConnData);die; 

            if($businessUserConnTypeTable->save($businessConnData)){
				$result['code']=200;
				$result['message']='Successfully updated';
				echo json_encode($result);
			}else{
				$errors = $businessConnData->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			}
        }
    }


    /**
	* search Connections for Business Card
	*
	*/
	public function searchBusinessNetworks(){
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$this->loadModel('EntrepreneurProfessionals');
		$this->loadModel('Keywords');
		$this->loadModel('Users');
		$this->loadModel('ContractorBasics');
		$this->loadModel('ContractorProfessionals');
		$this->loadModel('BusinessUserNetworks');
		$this->loadModel('BusinessCards');
		
		$result['TotalItems'] = '0';
		$result['Contractors'] = [];
		$result['code'] = 404;
		$finalDocs = [];
		$entrepreneur_id = $_REQUEST['user_id']; //entrepreneur id
		$search_text = (isset($_REQUEST['search_text'])&&($_REQUEST['search_text']!=''))?$_REQUEST['search_text']:'';
		
		
		$contractorIds = [];
		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		
		if($search_text==''):
			
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'ContractorProfessionals.id' => 'asc'
							]
						];

		//there is no seach text availbale in the search of contractor
			
			$EntrepreneurProfessionalsKeywords = $this->EntrepreneurProfessionals->find('all',
												['conditions'=>['EntrepreneurProfessionals.user_id'=>$entrepreneur_id]])
												->select(['keywords'])
												->first();
			 
			if(!empty($EntrepreneurProfessionalsKeywords)&&($EntrepreneurProfessionalsKeywords['keywords']!='')):
			
				$EntrepreneurProfessionalsKeywords = $EntrepreneurProfessionalsKeywords->toArray();
				$conditions = [];
				
				array_push($conditions,['ContractorProfessionals.user_id !='=>$entrepreneur_id]);
				
				$conditions['OR'] = [];
				 
				foreach(explode(',',$EntrepreneurProfessionalsKeywords['keywords']) as $single_keyword):
					 
					 array_push($conditions['OR'],["FIND_IN_SET($single_keyword,ContractorProfessionals.keywords)"]);
					 
				endforeach;
				 
			//getting the campaigns list
				
				$query = $this->ContractorProfessionals->find('all')
										->where($conditions)
										->select(['user_id']);
				
				$result['TotalItems'] = $query->count();
				
				$contractors = $this->Paginator->paginate(
														$this->ContractorProfessionals->find('all')
														->where($conditions)
														->select(['user_id'])
												, $config);
				  
				if($contractors->toArray()){
					
					$contractors = $contractors->toArray();
					
					foreach($contractors as $singleContractor):
						if($singleContractor->user_id!=''):
							$contractorIds[] = $singleContractor->user_id;
						endif;
					endforeach;
					
					if(!empty($contractorIds)){
						
						// Added thid ->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC']) to sort result by name
						$users = $this->Users->find('all',['conditions'=>['Users.id IN'=>$contractorIds,
																		  'Users.id !='=>$entrepreneur_id
																 ]
												 ])
												->contain(['ContractorBasics','ContractorProfessionals'])
												->order(['Users.first_name' => 'ASC','Users.last_name' => 'ASC'])
												->toArray();
								
						if(!empty($users)){
								
								foreach($users as $singleUser){
									$keys = [];
									$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';

									$BusinessCardsData = $this->BusinessCards->find('all',['conditions'=>['user_id'=>$singleUser->id , 'status'=>1]])->toArray();

									if($BusinessCardsData){
										$keys['card_id']=$BusinessCardsData[0]->id;
									}else{

										$keys['card_id']="";
									}

									$businessNetworkData = $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to'=>$singleUser->id,'user_id'=>$entrepreneur_id]])->toArray();

									if($businessNetworkData){
										$keys['is_network']="1";
										$keys['business_connection_type_id']=$businessNetworkData[0]->connection_type_id;
									}else{
										$keys['is_network']="";
										$keys['business_connection_type_id']="";
									}

									
									if((isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									   ||
									   (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									  ){
										
										$first_name = (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
										
										$last_name = (isset($singleUser['contractor_basic']['last_name'])
										&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									  }
									else{
										
										$first_name = (isset($singleUser['first_name'])
										&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
										
										$last_name = (isset($singleUser['last_name'])
										&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									}
									 
									 $keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']);
									$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
									$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
									$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
													&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
									
									$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
													&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
									
									$finalSkills = []; 
									if(isset($singleUser['contractor_professional']['skills'])&&
											 $singleUser['contractor_professional']['skills']!=''):
										
										$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
										
										
										if(!empty($userSkills)):
											
											foreach($userSkills as $key=>$value){
												$skills['id'] = ($key!='')?$key:' ';
												$skills['name'] = ($value!=' ')?$value:' ';
												
												$finalSkills[] = $skills;
											}
											
											$keys['skills'] = $finalSkills;
										else:
											$keys['skills'] = [];
										endif;
									else:
											$keys['skills'] = [];
									endif;
									 
									 $finalKeywords = [];
									if(isset($singleUser['contractor_professional']['keywords'])&&
											 $singleUser['contractor_professional']['keywords']!=''):
										
										$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
										
										if(!empty($userKeywords)):
										 
											foreach($userKeywords as $key=>$value){
												$keywords['id'] = ($key!='')?$key:' ';
												$keywords['name'] = ($value!=' ')?$value:' ';
												
												$finalKeywords[] = $keywords;
											}
											$keys['keywords'] = $finalKeywords;
										else:
											$keys['keywords'] = [];
										endif;
									else:
											$keys['keywords'] = [];
									endif;
									
									$finalDocs[] = $keys;
									
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
					
				}
		 
			endif;
		
		else:
			//'Users.id' => 'asc'
				$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'Users.first_name' => 'asc','Users.last_name' => 'ASC'
							]
						];
				
				$connection = ConnectionManager::get('default');
				
				$qq = "SELECT CP.user_id FROM keywords as KY INNER JOIN contractor_professionals as CP
											 ON FIND_IN_SET(KY.id, CP.keywords) where KY.name like '%".$_REQUEST['search_text']."%' GROUP BY CP.user_id
											 UNION SELECT CB.user_id FROM contractor_basics as CB where CB.first_name like '%".$_REQUEST['search_text']."%'
											 OR CB.last_name like '%".$_REQUEST['search_text']."%' OR (CB.price='".$_REQUEST['search_text']."' && CB.price!='' && CB.price!=0) GROUP BY CB.user_id";
				
				$sql = $connection->execute ($qq);
			    $user_ids = $sql->fetchAll('assoc');
				
				if(!empty($user_ids)):
					
					
					foreach($user_ids as $SingleUser):
						if(isset($SingleUser['user_id'])&&($SingleUser['user_id']!='')){
							$contractorIds[] = $SingleUser['user_id'];
						}
					endforeach;
					
					$conditions = ['Users.id IN'=>$contractorIds,
								   'Users.id !='=>$entrepreneur_id
								   ];
					
					$query = $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals']);
					
					$result['TotalItems'] = $query->count();
					
					if(!empty($contractorIds)){
						
						$users = $this->Paginator->paginate(
															 $this->Users->find('all',['conditions'=>$conditions
																])
															   ->contain(['ContractorBasics','ContractorProfessionals'])
													, $config);
					 	
						if(!empty($users)){
								
								foreach($users as $singleUser){
									 $keys = [];
									$keys['id'] = ($singleUser->id!='')?$singleUser->id:' ';

									$BusinessCardsData = $this->BusinessCards->find('all',['conditions'=>['user_id'=>$singleUser->id , 'status'=>1]])->toArray();

									if($BusinessCardsData){
										$keys['card_id']=$BusinessCardsData[0]->id;
									}else{

										$keys['card_id']="";
									}

									$businessNetworkData = $this->BusinessUserNetworks->find('all',['conditions'=>['connected_to'=>$singleUser->id,'user_id'=>$entrepreneur_id]])->toArray();

									if($businessNetworkData){
										$keys['is_network']="1";
										$keys['business_connection_type_id']=$businessNetworkData[0]->connection_type_id;
									}else{
										$keys['is_network']="";
										$keys['business_connection_type_id']="";
									}

									
									if((isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									   ||
									   (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!='')
									   )
									  ){
										
										$first_name = (isset($singleUser['contractor_basic']['first_name'])
										&&($singleUser['contractor_basic']['first_name']!=''))?$singleUser['contractor_basic']['first_name']:"";
										
										$last_name = (isset($singleUser['contractor_basic']['last_name'])
										&&($singleUser['contractor_basic']['last_name']!=''))?$singleUser['contractor_basic']['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									  }
									else{
										
										$first_name = (isset($singleUser['first_name'])
										&&($singleUser['first_name']!=''))?$singleUser['first_name']:"";
										
										$last_name = (isset($singleUser['last_name'])
										&&($singleUser['last_name']!=''))?$singleUser['last_name']:"";
										
										$name = $first_name.' '.$last_name;
									}
									$keys['is_profile_public'] = $this->Contractor->ProfileStatus($singleUser['id']); 
									$keys['name'] = (isset($name)&&($name!=' '))?$name:' ';
									$keys['image'] = $this->Contractor->contractorImage($singleUser['id']);
									$keys['bio'] = (isset($singleUser['contractor_basic']['bio'])
													&&($singleUser['contractor_basic']['bio']!=''))?$singleUser['contractor_basic']['bio']:"";
									
									$keys['rate'] =  (isset($singleUser['contractor_basic']['price'])
													&&($singleUser['contractor_basic']['price']!=''))?$singleUser['contractor_basic']['price']:"";
									
									$finalSkills = []; 
									if(isset($singleUser['contractor_professional']['skills'])&&
											 $singleUser['contractor_professional']['skills']!=''):
										
										$userSkills = $this->Contractor->contractorSkills($singleUser['contractor_professional']['skills']);
										
										
										if(!empty($userSkills)):
											
											foreach($userSkills as $key=>$value){
												$skills['id'] = ($key!='')?$key:' ';
												$skills['name'] = ($value!=' ')?$value:' ';
												
												$finalSkills[] = $skills;
											}
											
											$keys['skills'] = $finalSkills;
										else:
											$keys['skills'] = [];
										endif;
									else:
											$keys['skills'] = [];
									endif;
									 
									 $finalKeywords = [];
									if(isset($singleUser['contractor_professional']['keywords'])&&
											 $singleUser['contractor_professional']['keywords']!=''):
										
										$userKeywords = $this->Contractor->contractorKeywords($singleUser['contractor_professional']['keywords']);
										
										if(!empty($userKeywords)):
										 
											foreach($userKeywords as $key=>$value){
												$keywords['id'] = ($key!='')?$key:' ';
												$keywords['name'] = ($value!=' ')?$value:' ';
												
												$finalKeywords[] = $keywords;
											}
											$keys['keywords'] = $finalKeywords;
										else:
											$keys['keywords'] = [];
										endif;
									else:
											$keys['keywords'] = [];
									endif;
									
									$finalDocs[] = $keys;
									
								}
								
								$result['Contractors'] = $finalDocs;
								$result['code'] = 200;
			
						}
						
					}
				 
			endif;
				
		endif;
		
		echo json_encode($result);
					   
	}

	/**
	* Add Business Netwrok 
	*
	*/
	public function addBusinessNetwork(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserNetworksTable = TableRegistry::get('BusinessUserNetworks');
        $this->loadModel('BusinessUserNetworks');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			$connected_to = $this->request->data['connected_to'];

			if($user_id != $connected_to){

				$businessUserNetworksData = $businessUserNetworksTable->find('all',['conditions'=>['user_id'=>$user_id,'connected_to'=>$connected_to]])->toArray();

				//pr($businessConnectionData);die;
				if(empty($businessUserNetworksData)){
					
					$businessUserNetworks = $businessUserNetworksTable->newEntity(); 
					$businessUserNetworksdata = $businessUserNetworksTable->patchEntity($businessUserNetworks,$this->request->data);

					
		            if($businessUserNetworksTable->save($businessUserNetworksdata)){
						$result['code']=200;
						$result['message']='Connected successfully.';
						echo json_encode($result);
					}else{
						$errors = $businessUserNetworksdata->errors();					
						
						foreach($errors as $key=>$error){
							foreach($error as $errorKey=>$errorMessage){
								$finalErrors[$key] = $errorMessage;
							}
						}
						
						$result['code'] = 404;
						//$result['errors'] = $finalErrors;
						$result['message'] = $errorMessage;
						echo json_encode($result);
					}		
				}else{

					$updateConnection=  $this->BusinessUserNetworks->query()
                          ->update()
                          ->set(['connection_type_id' => $this->request->data['connection_type_id']])
                          ->where(['user_id' => $user_id,'connected_to'=>$connected_to])
                          ->execute();
                    if($updateConnection){

						$result['code'] = 200;
						$result['message'] = "Connection updated successfully.";
						echo json_encode($result);
					}else{
						$result['code'] = 404;
						$result['message'] = "Could not update connection, please try again.";
						echo json_encode($result);
					}	
				}
			}else{
					$result['code'] = 404;
					$result['message'] = "You can not connect with yourself.";
					echo json_encode($result);
			}	
   		}
	}

	public function diconnectBusinessNetwork()
	{
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessUserNetworksTable = TableRegistry::get('BusinessUserNetworks');
        $this->loadModel('BusinessUserNetworks');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			$connected_to = $this->request->data['connected_to'];

			$businessUserNetworksData = $businessUserNetworksTable->find('all',['conditions'=>['user_id'=>$user_id,'connected_to'=>$connected_to]])->toArray();

			//pr($businessConnectionData);die;
			if(!empty($businessUserNetworksData)){
					
					$StartupWorkOrdersTable = TableRegistry::get('BusinessUserNetworks');
        			$dlett= $StartupWorkOrdersTable->deleteAll(['user_id'=>$user_id,'connected_to'=>$connected_to]);

        			if($dlett){

        				$result['code'] = 200;
						$result['message'] = "Disconnected successfully.";
						echo json_encode($result);

        			}else{

        				$result['code'] = 404;
						$result['message'] = "Could not disconnect, please try again.";
						echo json_encode($result);

        			}
	
			}else{

					$result['code'] = 404;
					$result['message'] = "Could not disconnect, please try again.";
					echo json_encode($result);

			}	
   		}
	}


	/**
	* Add Business Card Notes 
	*
	*/
	public function addBusinessCardNotes(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessCardNotesTable = TableRegistry::get('BusinessCardNotes');
        $this->loadModel('BusinessCardNotes');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			
			$businessCardNotes = $businessCardNotesTable->newEntity(); 
			$businessCardNotesdata = $businessCardNotesTable->patchEntity($businessCardNotes,$this->request->data);

			
            if($businessCardNotesTable->save($businessCardNotesdata)){
				$result['code']=200;
				$result['message']='Added successfully.';
				echo json_encode($result);
			}else{
				$errors = $businessCardNotesdata->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			}		
			
   		}
	}

	/**
	 * Edit Business Card Notes 
	 *
	 *
	 **/
    public function editBusinessCardNotes(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $businessCardNotesTable = TableRegistry::get('BusinessCardNotes');
        $this->loadModel('BusinessCardNotes');

        if($this->request->is('post'))
        {	
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$businessCardNotes = $businessCardNotesTable->newEntity();
			$businessCardNotesdata = $businessCardNotesTable->patchEntity($businessCardNotes,$this->request->data);
            $businessCardNotesdata->id=$this->request->data['id']; 
			                                                                   
			//pr($businessConnData);die; 

            if($businessCardNotesTable->save($businessCardNotesdata)){
				$result['code']=200;
				$result['message']='Successfully updated';
				echo json_encode($result);
			}else{
				$errors = $businessCardNotesdata->errors();					
				
				foreach($errors as $key=>$error){
					foreach($error as $errorKey=>$errorMessage){
						$finalErrors[$key] = $errorMessage;
					}
				}
				
				$result['code'] = 404;
				$result['errors'] = $finalErrors;
				echo json_encode($result);
			}
        }
    }

    /**  
    *    Business Card Notes Details Method
    *
    *
    ***/
    public function businessCardNoteDetail(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('BusinessCardNotes');
        $businessCardNotesTable = TableRegistry::get('BusinessCardNotes');

        if($this->request->is('post'))
        {
        	$json = file_get_contents('php://input');
			$jsonData = json_decode($json, true);
			$this->request->data = $jsonData;

			$user_id = $this->request->data['user_id'];
			$note_id = $this->request->data['note_id'];
			
			$businessCardNoteDetail= $businessCardNotesTable->find('all',['conditions'=>['id'=>$note_id]])->first();

			//pr($businessCardNoteDetail); die;
        	
    		if(!empty($businessCardNoteDetail)){
				$result['id']=$businessCardNoteDetail->id;
				$result['description']=$businessCardNoteDetail->description;
				$result['business_card_id']=$businessCardNoteDetail->business_card_id;
				$business_card_id = $businessCardNoteDetail->business_card_id;

				$this->loadModel('BusinessUserNetworks');
				$businessNetworkData= $this->BusinessUserNetworks->find('all',['conditions'=>['business_card_id'=>$business_card_id]])->first();

				if(!empty($businessNetworkData)){
					$result['connection_type_id'] = $businessNetworkData->connection_type_id;
				}else{
					$result['connection_type_id'] = "";
				}
				//pr($businessNetworkData); die;
				$result['code'] = 200;
				//$result['businessCards'] = $finalList;
				echo json_encode($result);

			}else{

				$result['code']=404;
				$result['message']= 'No note found.';
				echo json_encode($result);
			}
		}	
	}	


	/**  
    *    Business Card Notes List Method
    *
    *
    ***/
	public function businessCardNotesList(){
    	$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('BusinessCardNotes');
        $this->loadModel('BusinessUserNetworks');
        $this->loadModel('Users');
        $BusinessCardNotesTable = TableRegistry::get('BusinessCardNotes');

        if($this->request->is('get'))
        {	

        	$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
			$config = 	[
							'limit' => 10,
							'page'=>$page_no,
							'order' => [
								'id' => 'DESC'
							]
						];
			
			$user_id = $_REQUEST['user_id'];
			$card_id = $_REQUEST['card_id'];

			if(empty($card_id)){

				// all business card notes 
	        	$query = $this->BusinessCardNotes->find('all')->where(['BusinessCardNotes.user_id' => $user_id]														)->contain(['BusinessCards']);

				$result['TotalItems'] = $query->count();
				
				$notes = $this->Paginator->paginate($this->BusinessCardNotes->find('all')
										->where(['BusinessCardNotes.user_id' => $user_id])->contain(['BusinessCards']), $config);

				//pr($notes); die;
	        	$finalList = array();

	        	if($notes){
	        		foreach ($notes as $notesData) {
	        		//pr($businessCardResult);
	        			$notesArr['note_id'] = $notesData->id;
	        			$notesArr['notes_detail'] = $notesData->description;
	        			$notesArr['card_id'] = $notesData->business_card_id;

	        			$userData= $this->Users->find('all',['conditions'=>['id'=>$notesData->business_card->user_id]])->first();

	        			$image  = $this->Contractor->contractorImage($notesData->business_card->user_id);

	        			$notesArr['card_owner'] = $userData['id'];
						$notesArr['profile_image'] = $image;
						$notesArr['name'] = $userData['first_name'].' '.$userData['last_name'];
	        			
	        			$businessNetworkData= $this->BusinessUserNetworks->find('all',['conditions'=>['business_card_id'=>$notesData->business_card_id,'user_id'=>$notesData->user_id]])->first();

	        			//pr($businessNetworkData['connected_to']);
	        			if($businessNetworkData){
	        				$notesArr['connected_to_id'] = $businessNetworkData['connected_to'];
	        				$notesArr['connection_type_id'] = $businessNetworkData['connection_type_id'];

	        				//pr($userData); die;
	        			}else{
	        				$notesArr['connected_to_id'] = "";
	        				$notesArr['connection_type_id'] = "";
	        				//$notesArr['profile_image'] = "";
	        				//$notesArr['name'] = "";
	        			
	        			}//die;
						$finalList[] = $notesArr;
						//pr($businessNetworkData); die;
	        		}
	        		
	    			$result['code'] = 200;
					$result['businessCards'] = $finalList;
					echo json_encode($result);

	        	}else{

	        		$result['code'] = 404;
					$result['message'] = "No List Found";
					
				 	echo json_encode($result);
	        	}

	        }else{
	        	$query = $this->BusinessCardNotes->find('all')->where(['BusinessCardNotes.user_id' => $user_id,'BusinessCardNotes.business_card_id'=>$card_id])->contain(['BusinessCards']);

				$result['TotalItems'] = $query->count();
				
				$notes = $this->Paginator->paginate($this->BusinessCardNotes->find('all')
										->where(['BusinessCardNotes.user_id' => $user_id,'BusinessCardNotes.business_card_id'=>$card_id])->contain(['BusinessCards']), $config);

				//pr($notes); die;
	        	$finalList = array();

	        	if($notes){
	        		foreach ($notes as $notesData) {
	        		//pr($businessCardResult);
	        			$notesArr['note_id'] = $notesData->id;
	        			$notesArr['notes_detail'] = $notesData->description;
	        			$notesArr['card_id'] = $notesData->business_card_id;

	        			$userData= $this->Users->find('all',['conditions'=>['id'=>$notesData->business_card->user_id]])->first();

	        			$image  = $this->Contractor->contractorImage($notesData->business_card->user_id);

	        			$notesArr['card_owner'] = $userData['id'];
						$notesArr['profile_image'] = $image;
						$notesArr['name'] = $userData['first_name'].' '.$userData['last_name'];
	        			
	        			$businessNetworkData= $this->BusinessUserNetworks->find('all',['conditions'=>['business_card_id'=>$notesData->business_card_id,'user_id'=>$notesData->user_id]])->first();
	        			//pr($businessNetworkData['connected_to']);
	        			if($businessNetworkData){
	        				$notesArr['connected_to_id'] = $businessNetworkData['connected_to'];
	        				$notesArr['connection_type_id'] = $businessNetworkData['connection_type_id'];
	        				
	        				//pr($userData); die;
	        			}else{
	        				$notesArr['connected_to_id'] = "";
	        				$notesArr['connection_type_id'] = "";
	        				//$notesArr['profile_image'] = "";
	        				//$notesArr['name'] = "";
	        			
	        			}//die;
						$finalList[] = $notesArr;
						//pr($businessNetworkData); die;
	        		}
	        		
	    			$result['code'] = 200;
					$result['businessCards'] = $finalList;
					echo json_encode($result);

	        	}else{

	        		$result['code'] = 404;
					$result['message'] = "No List Found";
					
				 	echo json_encode($result);
	        	} 

	        }	
        	
        }	
	}		

	/***
	*
	* Get Tem User list added by logged in user
	*
	****/
	function getBusinessTempContacts()
	{	
		$this->viewBuilder()->layout(false);
        $this->render(false);
        $this->loadModel('BusinessTempContacts');

		$page_no = (isset($_REQUEST['page_no'])&&($_REQUEST['page_no']!=''))?$_REQUEST['page_no']:'1';
		$config = 	[
						'limit' => 10,
						'page'=>$page_no,
						'order' => [
							'id' => 'DESC'
						]
					];		
		$user_id = $_REQUEST['user_id'];

		if(!empty($user_id))
		{
			$query = $this->BusinessTempContacts->find('all')->where(['BusinessTempContacts.created_by' => $user_id]);

			$TotalItems = $query->count();
				
			$contactList = $this->Paginator->paginate($this->BusinessTempContacts->find('all')->where(['BusinessTempContacts.created_by' => $user_id]), $config);

			if(!empty($TotalItems)){

				foreach ($contactList as $key => $value) 
				{	
					$keys['contact_id']=$value->id;
					$keys['name']=$value->name;
					$keys['phone']=$value->phone;
					$keys['email']=$value->email;
					$keys['connection_type_id']=$value->connection_type_id;
					$keys['connection_type']= $this->getConnectionTypeById($user_id,$value->connection_type_id);

					if(!empty($value->image)){
						$keys['image']= 'img/software/'.$value->image;
					}else{
						$keys['image']='';
					}
					$keys['note']=$value->note;

					$finalList[]=$keys;	
				}

				$result['code'] = 200;
				$result['TotalItems'] = $TotalItems;
				$result['businessCards'] = $finalList;
				echo json_encode($result);

			}else{

				$result['code'] = 404;
				$result['message'] = "No contact list found.";
					
				echo json_encode($result);	
			}

		}else{

			$result['code'] = 404;
			$result['message'] = "No contact list found.";
				
			echo json_encode($result);	
		}
	}

	function getConnectionTypeById($user_id,$typeId)
	{
		$businessUserConnTable = TableRegistry::get('BusinessUserConnectionTypes');
        $businessConnectionData = $businessUserConnTable->find('all',['conditions'=>['user_id'=>$user_id]])->toArray();

        
        if(!empty($businessConnectionData)){

            $result = json_decode($businessConnectionData[0]->data);
            
            foreach ($result as $conn) {
                 $finalArray[$conn->id] = $conn->name;
            }
            
        }else{ 

            $businessConnectionTable = TableRegistry::get('BusinessConnectionTypes');
            $finalArray = $businessConnectionTable->find('list')->toArray();
        }

        if(!empty($typeId)){
        	return $finalArray[$typeId];
        }else{
        	return '';
        }
	}

	/***
	*
	* Delete Business Contact 
	*
	*****/
	public function deleteBusinessContact()
	{
		$this->viewBuilder()->layout(false);
	    $this->render(false);
		
		$BusinessTempContactsTable = $this->loadModel('BusinessTempContacts');
		
		if(isset($_REQUEST['contact_id']) && !empty($_REQUEST['contact_id']))
		{
			$contact_id = $_REQUEST['contact_id'];
			
			$entity = $this->BusinessTempContacts->get($contact_id);
				
			if($this->BusinessTempContacts->delete($entity)){
				
				$result['code'] = 200;
				$result['message'] = 'Business contact deleted successfully.';
				echo json_encode($result);
					
			}else{
				
				$result['code'] = 404;
				$result['message'] = 'Could not delete business contact.';
				echo json_encode($result);
				
			}
		}else{
				
			$result['code'] = 404;
			$result['message'] = 'No record found.Please try again';
			echo json_encode($result);
			
		}
		 			   
	}


	function testmail()
	{
	    	$this->viewBuilder()->layout(false);
	      	$this->render(false);

	    	$UserTokens = TableRegistry::get('UserTokens');    
	        $userToken = $UserTokens->find('all',['conditions'=>['UserTokens.user_id'=>377]])->select(['id','device_type','access_token','user_id'])->toArray();

	       $blankArray=[];
	       foreach($userToken as $single_token):
	                
	          if($single_token['access_token']!=''):
	              //$finalTokens[] = $single_token['access_token'];

	          	
	          	if (!in_array($single_token['access_token'], $blankArray)){

	              if($single_token['device_type']=='android'):
	                $finalTokens[] = $single_token['access_token'];
	              else:
	                if($single_token['device_type']=='ios'){
	              		$length = strlen($single_token['access_token']);
	              		if($length >60){
	                		$finalIosTokens[] = $single_token['access_token'];
	                	}	
	                } 
	              endif;
	            }  
	            array_push($blankArray,$single_token['access_token']);

	          endif;
	          
	        endforeach;
	        
			echo count($finalIosTokens);

			echo '<pre>';

			print_r($finalIosTokens);

			echo count($userToken);
			print_r($userToken);


	      /*$this->viewBuilder()->layout(false);
	      $this->render(false);
	      //echo getcwd(); die;
	       if(isset($_REQUEST['id'])){
	       	$emailid=$_REQUEST['id'];
	       }else{
	       	$emailid='vijay.kumar@trantorinc.com';
	       }
	      $url = Router::url(array("controller"=>"users","action"=>"login"),true);
	      
	      $email = new Email();                
	      $result= $email->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowdbootstrap'])
	                                    ->to($emailid)
	                                    ->subject('CrowdBootstrap:User Registration')
	                                    ->replyTo('crowdbootstrap@crowdbootstrap.com')
							            ->returnPath('crowdbootstrap@crowdbootstrap.com')
							            ->setHeaders(['Organization: Crowd Bootstrap\r\n','X-Mailer: PHP/'.phpversion().'\r\n','X-Priority: 3\r\n','MIME-Version: 1.0\r\n','Content-type: text/html; charset=iso-8859-1\r\n','Content-type: text/plain;','Content-type: image/png;'])
	                                    ->send('This is mail from stage site to check mail issue.');
	      if($result){
	        echo 'Mail sent to '.$emailid; 
	        //echo '<br> Server IP : '.$_SERVER['SERVER_ADDR'];
	        echo '<br>';
	        echo getcwd();   
	      } else {
	        echo 'Can not send mail.';
	      } */                            

	}


   	function notSpamContent()
   	{
      $this->viewBuilder()->layout(false);
      $this->render(false);
      //echo getcwd(); die;
       if(isset($_REQUEST['id'])){
       	$emailid=$_REQUEST['id'];
       }else{
       	$emailid='vijay.kumar@trantorinc.com';
       }
      $url = Router::url(array("controller"=>"users","action"=>"login"),true);
      
      $email = new Email();                
      $result= $email->from(['crowdbootstrap@crowdbootstrap.com' => 'Crowdbootstrap'])
                                    ->to($emailid)
                                    ->subject('CrowdBootstrap:Updated Content')
                                    ->replyTo('crowdbootstrap@crowdbootstrap.com')
						            ->returnPath('crowdbootstrap@crowdbootstrap.com')
						            ->setHeaders(['Organization: Crowd Bootstrap\r\n','X-Mailer: PHP/'.phpversion().'\r\n','X-Priority: 3\r\n','MIME-Version: 1.0\r\n','Content-type: text/html; charset=iso-8859-1\r\n','Content-type: text/plain;','Content-type: image/png;'])
                                    ->send('Finding the best food in town just got easier with Nodat. Restaurants, Bar, Cafe and more...! So many options to find what is best for you! With the Nodat app, you can explore any local businesses like restaurants, bars, cafe, anything and everything with ratings, reviews and great deals! You can share your experiences with friends and peers on social media and earn Nodat points. Nodat lets you add video reviews and share your enjoyable, memorable and amazing experiences at your favorite hangout spot.');
      if($result){
        echo 'Mail sent to '.$emailid; 
        //echo '<br> Server IP : '.$_SERVER['SERVER_ADDR'];
        echo '<br>';
        echo getcwd();   
      } else {
        echo 'Can not send mail.';
      }                             

   	}
}
